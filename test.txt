TranslationUnitDecl 0x1afcc6e3848 <<invalid sloc>> <invalid sloc>
|-CXXRecordDecl 0x1afcc6e4130 <<invalid sloc>> <invalid sloc> implicit struct _GUID
| `-TypeVisibilityAttr 0x1afcc6e41e8 <<invalid sloc>> Implicit Default
|-TypedefDecl 0x1afcc6e4260 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1afcc6e3de0 '__int128'
|-TypedefDecl 0x1afcc6e42d0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1afcc6e3e00 'unsigned __int128'
|-TypedefDecl 0x1afcc6e4680 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x1afcc6e43c0 '__NSConstantString_tag'
|   `-CXXRecord 0x1afcc6e4328 '__NSConstantString_tag'
|-CXXRecordDecl 0x1afcc6e46d8 <<invalid sloc>> <invalid sloc> implicit class type_info
| `-TypeVisibilityAttr 0x1afcc6e4798 <<invalid sloc>> Implicit Default
|-TypedefDecl 0x1afce07d400 <<invalid sloc>> <invalid sloc> implicit size_t 'unsigned long long'
| `-BuiltinType 0x1afcc6e3a20 'unsigned long long'
|-TypedefDecl 0x1afce07d4a8 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1afce07d460 'char *'
|   `-BuiltinType 0x1afcc6e38e0 'char'
|-TypedefDecl 0x1afce07d518 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1afce07d460 'char *'
|   `-BuiltinType 0x1afcc6e38e0 'char'
|-TypedefDecl 0x1afce07d730 <./src\Core/Defines.h:71:1, col:32> col:32 referenced i8 'char'
| |-BuiltinType 0x1afcc6e38e0 'char'
| `-FullComment 0x1afced89168 <line:69:3, col:78>
|   `-ParagraphComment 0x1afced89140 <col:3, col:78>
|     `-TextComment 0x1afced89118 <col:3, col:78> Text=" ---------------------------------- Types --------------------------------- "
|-TypedefDecl 0x1afce07d7a0 <line:72:1, col:32> col:32 referenced i16 'short'
| `-BuiltinType 0x1afcc6e3920 'short'
|-TypedefDecl 0x1afce07d810 <line:73:1, col:32> col:32 referenced i32 'int'
| `-BuiltinType 0x1afcc6e3940 'int'
|-TypedefDecl 0x1afce07d880 <line:74:1, col:32> col:32 referenced i64 'long long'
| `-BuiltinType 0x1afcc6e3980 'long long'
|-TypedefDecl 0x1afce07d8f0 <line:75:1, col:32> col:32 referenced u8 'unsigned char'
| `-BuiltinType 0x1afcc6e39a0 'unsigned char'
|-TypedefDecl 0x1afce07d960 <line:76:1, col:32> col:32 referenced u16 'unsigned short'
| `-BuiltinType 0x1afcc6e39c0 'unsigned short'
|-TypedefDecl 0x1afce07d9d0 <line:77:1, col:32> col:32 referenced u32 'unsigned int'
| `-BuiltinType 0x1afcc6e39e0 'unsigned int'
|-TypedefDecl 0x1afce07da40 <line:78:1, col:32> col:32 referenced u64 'unsigned long long'
| `-BuiltinType 0x1afcc6e3a20 'unsigned long long'
|-TypedefDecl 0x1afce07dab0 <line:79:1, col:32> col:32 f32 'float'
| `-BuiltinType 0x1afcc6e3a40 'float'
|-TypedefDecl 0x1afce07db20 <line:80:1, col:32> col:32 f64 'double'
| `-BuiltinType 0x1afcc6e3a60 'double'
|-TypedefDecl 0x1afce07db90 <line:81:1, col:32> col:32 f96 'long double'
| `-BuiltinType 0x1afcc6e3a80 'long double'
|-NamespaceDecl 0x1afce07dc78 <line:95:1, line:103:1> line:95:11 Michka
| |-FullComment 0x1afced89218 <line:93:3, col:78>
| | `-ParagraphComment 0x1afced891f0 <col:3, col:78>
| |   `-TextComment 0x1afced891c8 <col:3, col:78> Text=" --------------------------- Forward declartions -------------------------- "
| |-ClassTemplateDecl 0x1afce07de50 <line:97:5, line:98:11> col:11 StringTemplate
| | |-TemplateTypeParmDecl 0x1afce07dce8 <line:97:14, col:23> col:23 typename depth 0 index 0 T
| | |-CXXRecordDecl 0x1afce07ddc0 <line:98:5, col:11> col:11 class StringTemplate
| | |-ClassTemplateSpecializationDecl 0x1afce07e060 <line:97:5, line:98:11> col:11 class StringTemplate
| | | `-TemplateArgument type 'char'
| | |   `-BuiltinType 0x1afcc6e38e0 'char'
| | |-ClassTemplateSpecializationDecl 0x1afce07e280 <line:97:5, line:98:11> col:11 class StringTemplate
| | | `-TemplateArgument type 'wchar_t'
| | |   `-BuiltinType 0x1afcc6e3e20 'wchar_t'
| | `-ClassTemplateSpecializationDecl 0x1afce0b9548 <line:97:5, line:98:11> col:11 class StringTemplate
| |   `-TemplateArgument type 'char32_t'
| |     `-BuiltinType 0x1afcc6e3e80 'char32_t'
| |-TypedefDecl 0x1afce07e218 <line:100:5, col:34> col:34 String8 'StringTemplate<char>':'Michka::StringTemplate<char>'
| | `-TemplateSpecializationType 0x1afce07e170 'StringTemplate<char>' sugar StringTemplate
| |   |-TemplateArgument type 'char'
| |   | `-BuiltinType 0x1afcc6e38e0 'char'
| |   `-RecordType 0x1afce07e140 'Michka::StringTemplate<char>'
| |     `-ClassTemplateSpecialization 0x1afce07e060 'StringTemplate'
| |-TypedefDecl 0x1afce0b94e0 <line:101:5, col:37> col:37 referenced String 'StringTemplate<wchar_t>':'Michka::StringTemplate<wchar_t>'
| | `-TemplateSpecializationType 0x1afce07e390 'StringTemplate<wchar_t>' sugar StringTemplate
| |   |-TemplateArgument type 'wchar_t'
| |   | `-BuiltinType 0x1afcc6e3e20 'wchar_t'
| |   `-RecordType 0x1afce07e360 'Michka::StringTemplate<wchar_t>'
| |     `-ClassTemplateSpecialization 0x1afce07e280 'StringTemplate'
| `-TypedefDecl 0x1afce0b9708 <line:102:5, col:38> col:38 String32 'StringTemplate<char32_t>':'Michka::StringTemplate<char32_t>'
|   `-TemplateSpecializationType 0x1afce0b9660 'StringTemplate<char32_t>' sugar StringTemplate
|     |-TemplateArgument type 'char32_t'
|     | `-BuiltinType 0x1afcc6e3e80 'char32_t'
|     `-RecordType 0x1afce0b9630 'Michka::StringTemplate<char32_t>'
|       `-ClassTemplateSpecialization 0x1afce0b9548 'StringTemplate'
|-NamespaceDecl 0x1afce0b9880 prev 0x1afce07dc78 <./src\Core/Memory/Memory.h:34:1, line:44:1> line:34:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| `-CXXRecordDecl 0x1afce0b98f0 <line:36:5, line:43:5> line:36:22 class Memory definition
|   |-DefinitionData pass_in_registers empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
|   | |-MoveConstructor exists simple trivial
|   | |-CopyAssignment simple trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple trivial
|   | `-Destructor simple irrelevant trivial
|   |-DLLExportAttr 0x1afce0b9a10 <./src\Core/Defines.h:65:34>
|   |-CXXRecordDecl 0x1afce0b9a68 <./src\Core/Memory/Memory.h:36:5, col:22> col:22 implicit referenced class Memory
|   |-CXXConstructorDecl 0x1afce0b9ba0 <./src\Core/Defines.h:54:25, ./src\Core/Memory/Memory.h:38:29> col:22 used Memory 'void ()' inline
|   | |-DLLExportAttr 0x1afce0b3b18 <./src\Core/Defines.h:65:34> Inherited
|   | `-AlwaysInlineAttr 0x1afce0b9c48 <line:54:25> __forceinline
|   |-AccessSpecDecl 0x1afce0b9ca0 <./src\Core/Memory/Memory.h:39:5, col:11> col:5 public
|   |-CXXMethodDecl 0x1afce0b9de8 <./src\Core/Defines.h:54:25, ./src\Core/Memory/Memory.h:40:66> col:35 used invalid malloc 'void *(const int &)' static inline
|   | |-ParmVarDecl 0x1afce0b9d18 <col:42, col:61> col:61 invalid _size 'const int &'
|   | |-DLLExportAttr 0x1afce0b3b40 <./src\Core/Defines.h:65:34> Inherited
|   | `-AlwaysInlineAttr 0x1afce0b9e90 <line:54:25> __forceinline
|   |-CXXMethodDecl 0x1afce0ba068 <col:25, ./src\Core/Memory/Memory.h:41:79> col:35 used invalid realloc 'void *(void *, const int &)' static inline
|   | |-ParmVarDecl 0x1afce0b9f00 <col:43, col:49> col:49 _ptr 'void *'
|   | |-ParmVarDecl 0x1afce0b9f80 <col:55, col:74> col:74 invalid _size 'const int &'
|   | |-DLLExportAttr 0x1afce0b3b68 <./src\Core/Defines.h:65:34> Inherited
|   | `-AlwaysInlineAttr 0x1afce0ba118 <line:54:25> __forceinline
|   |-CXXMethodDecl 0x1afce0ba250 <col:25, ./src\Core/Memory/Memory.h:42:49> col:34 used free 'void (void *)' static inline
|   | |-ParmVarDecl 0x1afce0ba188 <col:39, col:45> col:45 _ptr 'void *'
|   | |-DLLExportAttr 0x1afce0b3b90 <./src\Core/Defines.h:65:34> Inherited
|   | `-AlwaysInlineAttr 0x1afce0ba2f8 <line:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afce0ba3a0 <./src\Core/Memory/Memory.h:36:22> col:22 implicit constexpr Memory 'void (const Michka::Memory &)' inline default trivial noexcept-unevaluated 0x1afce0ba3a0
|   | `-ParmVarDecl 0x1afce0b34a0 <col:22> col:22 'const Michka::Memory &'
|   |-CXXMethodDecl 0x1afce0b3540 <col:22> col:22 implicit used operator= 'Michka::Memory &(const Michka::Memory &) noexcept' inline default trivial
|   | |-ParmVarDecl 0x1afce0b3660 <col:22> col:22 'const Michka::Memory &'
|   | |-CompoundStmt 0x1afce0b3ce0 <col:22>
|   | | `-ReturnStmt 0x1afce0b3cd0 <col:22>
|   | |   `-UnaryOperator 0x1afce0b3cb8 <col:22> 'Michka::Memory' lvalue prefix '*' cannot overflow
|   | |     `-CXXThisExpr 0x1afce0b3ca8 <col:22> 'Michka::Memory *' this
|   | `-DLLExportAttr 0x1afce0b3bb8 <./src\Core/Defines.h:65:34> Inherited
|   |-CXXConstructorDecl 0x1afce0b3700 <./src\Core/Memory/Memory.h:36:22> col:22 implicit constexpr Memory 'void (Michka::Memory &&)' inline default trivial noexcept-unevaluated 0x1afce0b3700
|   | `-ParmVarDecl 0x1afce0b3830 <col:22> col:22 'Michka::Memory &&'
|   |-CXXMethodDecl 0x1afce0b38a0 <col:22> col:22 implicit used operator= 'Michka::Memory &(Michka::Memory &&) noexcept' inline default trivial
|   | |-ParmVarDecl 0x1afce0b39c0 <col:22> col:22 'Michka::Memory &&'
|   | |-CompoundStmt 0x1afce0b3d70 <col:22>
|   | | `-ReturnStmt 0x1afce0b3d60 <col:22>
|   | |   `-UnaryOperator 0x1afce0b3d48 <col:22> 'Michka::Memory' lvalue prefix '*' cannot overflow
|   | |     `-CXXThisExpr 0x1afce0b3d38 <col:22> 'Michka::Memory *' this
|   | `-DLLExportAttr 0x1afce0b3c10 <./src\Core/Defines.h:65:34> Inherited
|   `-CXXDestructorDecl 0x1afce0b3a30 <./src\Core/Memory/Memory.h:36:22> col:22 implicit ~Memory 'void ()' inline default trivial noexcept-unevaluated 0x1afce0b3a30
|-NamespaceDecl 0x1afce0b3e48 prev 0x1afce0b9880 <./src\Core/Memory/Memory.inl:30:1, line:51:1> line:30:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| |-CXXConstructorDecl 0x1afce0b3f10 parent 0x1afce0b98f0 prev 0x1afce0b9ba0 <./src\Core/Defines.h:54:25, ./src\Core/Memory/Memory.inl:35:5> line:32:26 used Memory 'void ()' inline
| | |-CompoundStmt 0x1afce0b40a8 <line:33:5, line:35:5>
| | |-DLLExportAttr 0x1afce0b4050 <./src\Core/Defines.h:65:34> Inherited
| | `-AlwaysInlineAttr 0x1afce0b3ff8 <line:54:25> __forceinline
| |-CXXMethodDecl 0x1afce0b4170 parent 0x1afce0b98f0 <col:25, ./src\Core/Memory/Memory.inl:40:5> line:37:32 invalid malloc 'void *(const int &)' inline
| | |-ParmVarDecl 0x1afce0b40d8 <col:39, col:58> col:58 invalid _size 'const int &'
| | |-CompoundStmt 0x1afce0b42f8 <line:38:5, line:40:5>
| | `-AlwaysInlineAttr 0x1afce0b4268 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afce0ba4c8 parent 0x1afce0b98f0 <col:25, ./src\Core/Memory/Memory.inl:45:5> line:42:32 invalid realloc 'void *(void *, const int &)' inline
| | |-ParmVarDecl 0x1afce0b4328 <col:40, col:46> col:46 used _ptr 'void *'
| | |-ParmVarDecl 0x1afce0b43a8 <col:52, col:71> col:71 invalid _size 'const int &'
| | |-CompoundStmt 0x1afce0ba660 <line:43:5, line:45:5>
| | `-AlwaysInlineAttr 0x1afce0ba5c8 <./src\Core/Defines.h:54:25> __forceinline
| `-CXXMethodDecl 0x1afce0ba720 parent 0x1afce0b98f0 prev 0x1afce0ba250 <col:25, ./src\Core/Memory/Memory.inl:50:5> line:47:31 used free 'void (void *)' inline
|   |-ParmVarDecl 0x1afce0ba690 <col:36, col:42> col:42 _ptr 'void *'
|   |-CompoundStmt 0x1afce0ba9a0 <line:48:5, line:50:5>
|   | `-DeclStmt 0x1afce0ba988 <line:49:9, col:21>
|   |   `-VarDecl 0x1afce0ba920 <col:9, <invalid sloc>> col:16 invalid _ptr 'int':'int'
|   |-DLLExportAttr 0x1afce0ba870 <./src\Core/Defines.h:65:34> Inherited
|   `-AlwaysInlineAttr 0x1afce0ba818 <line:54:25> __forceinline
|-NamespaceDecl 0x1afce0baa78 prev 0x1afce0b3e48 <./src\Core/Reflection/Type.h:35:1, line:420:1> line:35:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| |-NamespaceDecl 0x1afce0baae8 <line:40:5, line:73:5> line:40:15 OperatorCheck
| | |-FullComment 0x1afced89360 <line:38:7, col:33>
| | | |-ParagraphComment 0x1afced892c0 <col:7>
| | | | `-TextComment 0x1afced89298 <col:7> Text=" "
| | | `-BlockCommandComment 0x1afced892e0 <col:8, col:33> Name="see"
| | |   `-ParagraphComment 0x1afced89330 <col:12, col:33>
| | |     `-TextComment 0x1afced89308 <col:12, col:33> Text=" TypeBase::hasOperator"
| | |-CXXRecordDecl 0x1afce0bab58 <line:42:9, col:34> col:16 referenced struct NoType definition
| | | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | | |-DefaultConstructor exists trivial needs_implicit
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-CXXRecordDecl 0x1afce0bac80 <col:9, col:16> col:16 implicit struct NoType
| | | `-FieldDecl 0x1afce0badc0 <col:23, col:32> col:28 _m 'bool [2]'
| | |-FunctionTemplateDecl 0x1afce0bb2a0 <line:43:9, line:44:58> col:23 operator==
| | | |-TemplateTypeParmDecl 0x1afce0bae30 <line:43:18, col:27> col:27 referenced typename depth 0 index 0 _T1
| | | |-TemplateTypeParmDecl 0x1afce0baeb0 <col:32, col:41> col:41 referenced typename depth 0 index 1 _T2
| | | `-FunctionDecl 0x1afce0bb200 <line:44:9, col:58> col:23 operator== 'Michka::OperatorCheck::NoType (const _T1 &, const _T2 &)' inline
| | |   |-ParmVarDecl 0x1afce0bb000 <col:36, col:45> col:46 'const _T1 &'
| | |   `-ParmVarDecl 0x1afce0bb0e0 <col:48, col:57> col:58 'const _T2 &'
| | |-FunctionTemplateDecl 0x1afce0bc750 <line:45:9, line:46:58> col:23 operator!=
| | | |-TemplateTypeParmDecl 0x1afce0bb380 <line:45:18, col:27> col:27 referenced typename depth 0 index 0 _T1
| | | |-TemplateTypeParmDecl 0x1afce0bb400 <col:32, col:41> col:41 referenced typename depth 0 index 1 _T2
| | | `-FunctionDecl 0x1afce0bc6b0 <line:46:9, col:58> col:23 operator!= 'Michka::OperatorCheck::NoType (const _T1 &, const _T2 &)' inline
| | |   |-ParmVarDecl 0x1afce0bc520 <col:36, col:45> col:46 'const _T1 &'
| | |   `-ParmVarDecl 0x1afce0bc5d0 <col:48, col:57> col:58 'const _T2 &'
| | |-FunctionTemplateDecl 0x1afce0bcbd0 <line:47:9, line:48:57> col:23 operator>
| | | |-TemplateTypeParmDecl 0x1afce0bc830 <line:47:18, col:27> col:27 referenced typename depth 0 index 0 _T1
| | | |-TemplateTypeParmDecl 0x1afce0bc8b0 <col:32, col:41> col:41 referenced typename depth 0 index 1 _T2
| | | `-FunctionDecl 0x1afce0bcb30 <line:48:9, col:57> col:23 operator> 'Michka::OperatorCheck::NoType (const _T1 &, const _T2 &)' inline
| | |   |-ParmVarDecl 0x1afce0bc9a0 <col:35, col:44> col:45 'const _T1 &'
| | |   `-ParmVarDecl 0x1afce0bca50 <col:47, col:56> col:57 'const _T2 &'
| | |-FunctionTemplateDecl 0x1afce0bd050 <line:49:9, line:50:57> col:23 operator<
| | | |-TemplateTypeParmDecl 0x1afce0bccb0 <line:49:18, col:27> col:27 referenced typename depth 0 index 0 _T1
| | | |-TemplateTypeParmDecl 0x1afce0bcd30 <col:32, col:41> col:41 referenced typename depth 0 index 1 _T2
| | | `-FunctionDecl 0x1afce0bcfb0 <line:50:9, col:57> col:23 operator< 'Michka::OperatorCheck::NoType (const _T1 &, const _T2 &)' inline
| | |   |-ParmVarDecl 0x1afce0bce20 <col:35, col:44> col:45 'const _T1 &'
| | |   `-ParmVarDecl 0x1afce0bced0 <col:47, col:56> col:57 'const _T2 &'
| | |-FunctionTemplateDecl 0x1afce0bd560 <line:51:9, line:52:58> col:23 operator>=
| | | |-TemplateTypeParmDecl 0x1afce0bd130 <line:51:18, col:27> col:27 referenced typename depth 0 index 0 _T1
| | | |-TemplateTypeParmDecl 0x1afce0bd1b0 <col:32, col:41> col:41 referenced typename depth 0 index 1 _T2
| | | `-FunctionDecl 0x1afce0bd4c0 <line:52:9, col:58> col:23 operator>= 'Michka::OperatorCheck::NoType (const _T1 &, const _T2 &)' inline
| | |   |-ParmVarDecl 0x1afce0bd2a0 <col:36, col:45> col:46 'const _T1 &'
| | |   `-ParmVarDecl 0x1afce0bd350 <col:48, col:57> col:58 'const _T2 &'
| | |-FunctionTemplateDecl 0x1afce0bd9e0 <line:53:9, line:54:58> col:23 operator<=
| | | |-TemplateTypeParmDecl 0x1afce0bd640 <line:53:18, col:27> col:27 referenced typename depth 0 index 0 _T1
| | | |-TemplateTypeParmDecl 0x1afce0bd6c0 <col:32, col:41> col:41 referenced typename depth 0 index 1 _T2
| | | `-FunctionDecl 0x1afce0bd940 <line:54:9, col:58> col:23 operator<= 'Michka::OperatorCheck::NoType (const _T1 &, const _T2 &)' inline
| | |   |-ParmVarDecl 0x1afce0bd7b0 <col:36, col:45> col:46 'const _T1 &'
| | |   `-ParmVarDecl 0x1afce0bd860 <col:48, col:57> col:58 'const _T2 &'
| | |-ClassTemplateDecl 0x1afce0bdc88 <line:56:9, line:57:114> col:16 hasEqual
| | | |-TemplateTypeParmDecl 0x1afce0bdac0 <line:56:18, col:27> col:27 referenced typename depth 0 index 0 T1
| | | |-TemplateTypeParmDecl 0x1afce0bdb50 <col:31, col:45> col:40 referenced typename depth 0 index 1 T2
| | | | `-TemplateArgument type 'T1'
| | | |   `-TemplateTypeParmType 0x1afce0bdb10 'T1' dependent depth 0 index 0
| | | |     `-TemplateTypeParm 0x1afce0bdac0 'T1'
| | | `-CXXRecordDecl 0x1afce0bdbf8 <line:57:9, col:114> col:16 struct hasEqual definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-CXXRecordDecl 0x1afce0bdf18 <col:9, col:16> col:16 implicit struct hasEqual
| | |   |-VarDecl 0x1afce0bdfb8 <col:25, col:43> col:43 value 'const bool' static
| | |   `-VarDecl 0x1afce0be328 <col:25, col:99> col:99 NoType 'const bool' static
| | |-ClassTemplateDecl 0x1afce0b6508 <line:59:9, line:60:117> col:16 hasNotEqual
| | | |-TemplateTypeParmDecl 0x1afce0be3a8 <line:59:18, col:27> col:27 referenced typename depth 0 index 0 T1
| | | |-TemplateTypeParmDecl 0x1afce0be440 <col:31, col:45> col:40 referenced typename depth 0 index 1 T2
| | | | `-TemplateArgument type 'T1'
| | | |   `-TemplateTypeParmType 0x1afce0be400 'T1' dependent depth 0 index 0
| | | |     `-TemplateTypeParm 0x1afce0be3a8 'T1'
| | | `-CXXRecordDecl 0x1afce0b6478 <line:60:9, col:117> col:16 struct hasNotEqual definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-CXXRecordDecl 0x1afce0b6798 <col:9, col:16> col:16 implicit struct hasNotEqual
| | |   |-VarDecl 0x1afce0b6838 <col:28, col:46> col:46 value 'const bool' static
| | |   `-VarDecl 0x1afce0b6b18 <col:28, col:102> col:102 NoType 'const bool' static
| | |-ClassTemplateDecl 0x1afce0b6d68 <line:62:9, line:63:115> col:16 hasGreater
| | | |-TemplateTypeParmDecl 0x1afce0b6b98 <line:62:18, col:27> col:27 referenced typename depth 0 index 0 T1
| | | |-TemplateTypeParmDecl 0x1afce0b6c30 <col:31, col:45> col:40 referenced typename depth 0 index 1 T2
| | | | `-TemplateArgument type 'T1'
| | | |   `-TemplateTypeParmType 0x1afce0b6bf0 'T1' dependent depth 0 index 0
| | | |     `-TemplateTypeParm 0x1afce0b6b98 'T1'
| | | `-CXXRecordDecl 0x1afce0b6cd8 <line:63:9, col:115> col:16 struct hasGreater definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-CXXRecordDecl 0x1afce0b6ff8 <col:9, col:16> col:16 implicit struct hasGreater
| | |   |-VarDecl 0x1afce0b7098 <col:27, col:45> col:45 value 'const bool' static
| | |   `-VarDecl 0x1afce0b7378 <col:27, col:100> col:100 NoType 'const bool' static
| | |-ClassTemplateDecl 0x1afce0c46a8 <line:65:9, line:66:112> col:16 hasLess
| | | |-TemplateTypeParmDecl 0x1afce0b73f8 <line:65:18, col:27> col:27 referenced typename depth 0 index 0 T1
| | | |-TemplateTypeParmDecl 0x1afce0c4570 <col:31, col:45> col:40 referenced typename depth 0 index 1 T2
| | | | `-TemplateArgument type 'T1'
| | | |   `-TemplateTypeParmType 0x1afce0c4530 'T1' dependent depth 0 index 0
| | | |     `-TemplateTypeParm 0x1afce0b73f8 'T1'
| | | `-CXXRecordDecl 0x1afce0c4618 <line:66:9, col:112> col:16 struct hasLess definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-CXXRecordDecl 0x1afce0c4938 <col:9, col:16> col:16 implicit struct hasLess
| | |   |-VarDecl 0x1afce0c49d8 <col:24, col:42> col:42 value 'const bool' static
| | |   `-VarDecl 0x1afce0c4cb8 <col:24, col:97> col:97 NoType 'const bool' static
| | |-ClassTemplateDecl 0x1afce0c4f08 <line:68:9, line:69:123> col:16 hasGreaterOrEqual
| | | |-TemplateTypeParmDecl 0x1afce0c4d38 <line:68:18, col:27> col:27 referenced typename depth 0 index 0 T1
| | | |-TemplateTypeParmDecl 0x1afce0c4dd0 <col:31, col:45> col:40 referenced typename depth 0 index 1 T2
| | | | `-TemplateArgument type 'T1'
| | | |   `-TemplateTypeParmType 0x1afce0c4d90 'T1' dependent depth 0 index 0
| | | |     `-TemplateTypeParm 0x1afce0c4d38 'T1'
| | | `-CXXRecordDecl 0x1afce0c4e78 <line:69:9, col:123> col:16 struct hasGreaterOrEqual definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-CXXRecordDecl 0x1afce0c5198 <col:9, col:16> col:16 implicit struct hasGreaterOrEqual
| | |   |-VarDecl 0x1afce0c5238 <col:34, col:52> col:52 value 'const bool' static
| | |   `-VarDecl 0x1afce0c3520 <col:34, col:108> col:108 NoType 'const bool' static
| | `-ClassTemplateDecl 0x1afce0c3768 <line:71:9, line:72:120> col:16 hasLessOrEqual
| |   |-TemplateTypeParmDecl 0x1afce0c35a0 <line:71:18, col:27> col:27 referenced typename depth 0 index 0 T1
| |   |-TemplateTypeParmDecl 0x1afce0c3630 <col:31, col:45> col:40 referenced typename depth 0 index 1 T2
| |   | `-TemplateArgument type 'T1'
| |   |   `-TemplateTypeParmType 0x1afce0c35f0 'T1' dependent depth 0 index 0
| |   |     `-TemplateTypeParm 0x1afce0c35a0 'T1'
| |   `-CXXRecordDecl 0x1afce0c36d8 <line:72:9, col:120> col:16 struct hasLessOrEqual definition
| |     |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |     | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |     | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | |-MoveConstructor exists simple trivial needs_implicit
| |     | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |     | |-MoveAssignment exists simple trivial needs_implicit
| |     | `-Destructor simple irrelevant trivial needs_implicit
| |     |-CXXRecordDecl 0x1afce0c39f8 <col:9, col:16> col:16 implicit struct hasLessOrEqual
| |     |-VarDecl 0x1afce0c3a98 <col:31, col:49> col:49 value 'const bool' static
| |     `-VarDecl 0x1afce0c3d78 <col:31, col:105> col:105 NoType 'const bool' static
| |-ClassTemplateDecl 0x1afce0c3f60 <line:80:5, line:232:5> line:81:12 TypeBase
| | |-TemplateTypeParmDecl 0x1afce0c3e28 <line:80:14, col:23> col:23 referenced typename depth 0 index 0 T
| | |-CXXRecordDecl 0x1afce0c3ed0 <line:81:5, line:232:5> line:81:12 struct TypeBase definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-FullComment 0x1afced89580 <line:76:7, line:79:5>
| | | | |-ParagraphComment 0x1afced893e8 <line:76:7>
| | | | | `-TextComment 0x1afced893c0 <col:7> Text=" "
| | | | |-BlockCommandComment 0x1afced89408 <col:8, col:37> Name="brief"
| | | | | `-ParagraphComment 0x1afced89458 <col:14, col:37>
| | | | |   `-TextComment 0x1afced89430 <col:14, col:37> Text=" Set of type properties."
| | | | |-ParagraphComment 0x1afced894a0 <line:78:7>
| | | | | `-TextComment 0x1afced89478 <col:7> Text=" "
| | | | `-TParamCommandComment 0x1afced894c0 <col:8, line:79:5> Param="T"
| | | |   `-ParagraphComment 0x1afced89540 <col:1, col:5>
| | | |     `-TextComment 0x1afced89518 <col:1, col:5> Text="     "
| | | |-CXXRecordDecl 0x1afce0c41f8 <line:81:5, col:12> col:12 implicit struct TypeBase
| | | |-VarDecl 0x1afce0c4388 <line:106:9, col:48> col:33 size 'const u32':'const unsigned int' static inline cinit
| | | | |-ImplicitCastExpr 0x1afce0c4420 <col:40, col:48> 'const u32':'const unsigned int' <IntegralCast>
| | | | | `-UnaryExprOrTypeTraitExpr 0x1afce0c4400 <col:40, col:48> 'unsigned long long' sizeof 'T'
| | | | `-FullComment 0x1afced896a8 <line:104:11, col:29>
| | | |   |-ParagraphComment 0x1afced89608 <col:11>
| | | |   | `-TextComment 0x1afced895e0 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced89628 <col:12, col:29> Name="brief"
| | | |     `-ParagraphComment 0x1afced89678 <col:18, col:29>
| | | |       `-TextComment 0x1afced89650 <col:18, col:29> Text=" Sizeof type"
| | | |-VarDecl 0x1afce0c4480 <line:111:9, col:42> col:35 name 'const char *' static inline cinit
| | | | |-ImplicitCastExpr 0x1afce0c15a0 <col:42> 'const char *' <ArrayToPointerDecay>
| | | | | `-StringLiteral 0x1afce0c1580 <col:42> 'const char [8]' lvalue "Unknown"
| | | | `-FullComment 0x1afced897d0 <line:109:11, col:96>
| | | |   |-ParagraphComment 0x1afced89730 <col:11>
| | | |   | `-TextComment 0x1afced89708 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced89750 <col:12, col:96> Name="brief"
| | | |     `-ParagraphComment 0x1afced897a0 <col:18, col:96>
| | | |       `-TextComment 0x1afced89778 <col:18, col:96> Text=" Name of type if was native. "Unknown" for custom types like classes and enums."
| | | |-VarDecl 0x1afce0c1600 <line:116:9, col:35> col:35 typeName 'const char *' static inline
| | | | `-FullComment 0x1afced898f8 <line:114:11, col:31>
| | | |   |-ParagraphComment 0x1afced89858 <col:11>
| | | |   | `-TextComment 0x1afced89830 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced89878 <col:12, col:31> Name="brief"
| | | |     `-ParagraphComment 0x1afced898c8 <col:18, col:31>
| | | |       `-TextComment 0x1afced898a0 <col:18, col:31> Text=" Type id name."
| | | |-VarDecl 0x1afce0c16c0 <line:121:9, col:35> col:35 rawName 'const char *' static inline
| | | | `-FullComment 0x1afced89a20 <line:119:11, col:32>
| | | |   |-ParagraphComment 0x1afced89980 <col:11>
| | | |   | `-TextComment 0x1afced89958 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced899a0 <col:12, col:32> Name="brief"
| | | |     `-ParagraphComment 0x1afced899f0 <col:18, col:32>
| | | |       `-TextComment 0x1afced899c8 <col:18, col:32> Text=" Type raw name."
| | | |-VarDecl 0x1afce0c17a8 <line:126:9, col:33> col:33 hash 'const u64':'const unsigned long long' static inline
| | | | `-FullComment 0x1afced89b48 <line:124:11, col:31>
| | | |   |-ParagraphComment 0x1afced89aa8 <col:11>
| | | |   | `-TextComment 0x1afced89a80 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced89ac8 <col:12, col:31> Name="brief"
| | | |     `-ParagraphComment 0x1afced89b18 <col:18, col:31>
| | | |       `-TextComment 0x1afced89af0 <col:18, col:31> Text=" Type id hash."
| | | |-VarDecl 0x1afce0c1860 <line:131:9, col:39> col:33 min 'const u32':'const unsigned int' static inline cinit
| | | | |-ImplicitCastExpr 0x1afce0c18f0 <col:39> 'const u32':'const unsigned int' <IntegralCast>
| | | | | `-IntegerLiteral 0x1afce0c18c8 <col:39> 'int' 0
| | | | `-FullComment 0x1afced89c70 <line:129:11, col:59>
| | | |   |-ParagraphComment 0x1afced89bd0 <col:11>
| | | |   | `-TextComment 0x1afced89ba8 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced89bf0 <col:12, col:59> Name="brief"
| | | |     `-ParagraphComment 0x1afced89c40 <col:18, col:59>
| | | |       `-TextComment 0x1afced89c18 <col:18, col:59> Text=" Minimum possilbe value for numeric types."
| | | |-VarDecl 0x1afce0c1990 <line:136:9, col:39> col:33 max 'const u32':'const unsigned int' static inline cinit
| | | | |-ImplicitCastExpr 0x1afce0c1a20 <col:39> 'const u32':'const unsigned int' <IntegralCast>
| | | | | `-IntegerLiteral 0x1afce0c19f8 <col:39> 'int' 0
| | | | `-FullComment 0x1afced89d98 <line:134:11, col:59>
| | | |   |-ParagraphComment 0x1afced89cf8 <col:11>
| | | |   | `-TextComment 0x1afced89cd0 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced89d18 <col:12, col:59> Name="brief"
| | | |     `-ParagraphComment 0x1afced89d68 <col:18, col:59>
| | | |       `-TextComment 0x1afced89d40 <col:18, col:59> Text=" Maximum possilbe value for numeric types."
| | | |-VarDecl 0x1afce0c1ac0 <line:141:9, col:34> col:34 isSigned 'const bool' static inline
| | | | `-FullComment 0x1afced89ec0 <line:139:11, col:51>
| | | |   |-ParagraphComment 0x1afced89e20 <col:11>
| | | |   | `-TextComment 0x1afced89df8 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced89e40 <col:12, col:51> Name="brief"
| | | |     `-ParagraphComment 0x1afced89e90 <col:18, col:51>
| | | |       `-TextComment 0x1afced89e68 <col:18, col:51> Text=" Is type signed for numeric types."
| | | |-VarDecl 0x1afce0c1b88 <line:146:9, col:34> col:34 isUnsigned 'const bool' static inline
| | | | `-FullComment 0x1afced89fe8 <line:144:11, col:53>
| | | |   |-ParagraphComment 0x1afced89f48 <col:11>
| | | |   | `-TextComment 0x1afced89f20 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced89f68 <col:12, col:53> Name="brief"
| | | |     `-ParagraphComment 0x1afced89fb8 <col:18, col:53>
| | | |       `-TextComment 0x1afced89f90 <col:18, col:53> Text=" Is type unsigned for numeric types."
| | | |-VarDecl 0x1afce0c1c50 <line:151:9, col:47> col:34 isIntegral 'const bool' static inline cinit
| | | | |-CXXBoolLiteralExpr 0x1afce0c1cb8 <col:47> 'bool' false
| | | | `-FullComment 0x1afced8a110 <line:149:11, col:53>
| | | |   |-ParagraphComment 0x1afced8a070 <col:11>
| | | |   | `-TextComment 0x1afced8a048 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced8a090 <col:12, col:53> Name="brief"
| | | |     `-ParagraphComment 0x1afced8a0e0 <col:18, col:53>
| | | |       `-TextComment 0x1afced8a0b8 <col:18, col:53> Text=" Is type integral for numeric types."
| | | |-VarDecl 0x1afce0c1d50 <line:156:9, col:44> col:34 isFloat 'const bool' static inline cinit
| | | | |-CXXBoolLiteralExpr 0x1afce0c1db8 <col:44> 'bool' false
| | | | `-FullComment 0x1afced8a238 <line:154:11, col:49>
| | | |   |-ParagraphComment 0x1afced8a198 <col:11>
| | | |   | `-TextComment 0x1afced8a170 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced8a1b8 <col:12, col:49> Name="brief"
| | | |     `-ParagraphComment 0x1afced8a208 <col:18, col:49>
| | | |       `-TextComment 0x1afced8a1e0 <col:18, col:49> Text=" Is type real for numeric types."
| | | |-VarDecl 0x1afce0c1e50 <line:161:9, col:34> col:34 isNumeric 'const bool' static inline
| | | | `-FullComment 0x1afced8a360 <line:159:11, col:42>
| | | |   |-ParagraphComment 0x1afced8a2c0 <col:11>
| | | |   | `-TextComment 0x1afced8a298 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced8a2e0 <col:12, col:42> Name="brief"
| | | |     `-ParagraphComment 0x1afced8a330 <col:18, col:42>
| | | |       `-TextComment 0x1afced8a308 <col:18, col:42> Text=" Is type a numeric types."
| | | |-VarDecl 0x1afce0c1f18 <line:166:9, col:56> col:34 isClass 'const bool' static inline cinit
| | | | |-TypeTraitExpr 0x1afce0c1f90 <col:44, col:56> 'bool' __is_class
| | | | `-FullComment 0x1afced8a488 <line:164:11, col:41>
| | | |   |-ParagraphComment 0x1afced8a3e8 <col:11>
| | | |   | `-TextComment 0x1afced8a3c0 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced8a408 <col:12, col:41> Name="brief"
| | | |     `-ParagraphComment 0x1afced8a458 <col:18, col:41>
| | | |       `-TextComment 0x1afced8a430 <col:18, col:41> Text=" Is type a custom class."
| | | |-VarDecl 0x1afce0c1ff0 <line:171:9, col:56> col:34 isUnion 'const bool' static inline cinit
| | | | |-TypeTraitExpr 0x1afce0c2068 <col:44, col:56> 'bool' __is_union
| | | | `-FullComment 0x1afced8a5b0 <line:169:11, col:41>
| | | |   |-ParagraphComment 0x1afced8a510 <col:11>
| | | |   | `-TextComment 0x1afced8a4e8 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced8a530 <col:12, col:41> Name="brief"
| | | |     `-ParagraphComment 0x1afced8a580 <col:18, col:41>
| | | |       `-TextComment 0x1afced8a558 <col:18, col:41> Text=" Is type a custom union."
| | | |-VarDecl 0x1afce0c20c8 <line:176:9, col:54> col:34 isEnum 'const bool' static inline cinit
| | | | |-TypeTraitExpr 0x1afce0c2140 <col:43, col:54> 'bool' __is_enum
| | | | `-FullComment 0x1afced8a6d8 <line:174:11, col:40>
| | | |   |-ParagraphComment 0x1afced8a638 <col:11>
| | | |   | `-TextComment 0x1afced8a610 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced8a658 <col:12, col:40> Name="brief"
| | | |     `-ParagraphComment 0x1afced8a6a8 <col:18, col:40>
| | | |       `-TextComment 0x1afced8a680 <col:18, col:40> Text=" Is type a custom enum."
| | | |-VarDecl 0x1afce0c21a0 <line:181:9, col:34> col:34 isPointer 'const bool' static inline
| | | | `-FullComment 0x1afced8a800 <line:179:11, col:41>
| | | |   |-ParagraphComment 0x1afced8a760 <col:11>
| | | |   | `-TextComment 0x1afced8a738 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced8a780 <col:12, col:41> Name="brief"
| | | |     `-ParagraphComment 0x1afced8a7d0 <col:18, col:41>
| | | |       `-TextComment 0x1afced8a7a8 <col:18, col:41> Text=" Is type a pointer type."
| | | |-VarDecl 0x1afce0c2268 <line:186:9, col:34> col:34 isCString 'const bool' static inline
| | | | `-FullComment 0x1afced8a928 <line:184:11, col:36>
| | | |   |-ParagraphComment 0x1afced8a888 <col:11>
| | | |   | `-TextComment 0x1afced8a860 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced8a8a8 <col:12, col:36> Name="brief"
| | | |     `-ParagraphComment 0x1afced8a8f8 <col:18, col:36>
| | | |       `-TextComment 0x1afced8a8d0 <col:18, col:36> Text=" Is type a c string"
| | | |-VarDecl 0x1afce0c2350 <line:196:9, col:34> col:34 hasCopyAssign 'const bool' static inline
| | | | `-FullComment 0x1afced8aa50 <line:194:11, col:38>
| | | |   |-ParagraphComment 0x1afced8a9b0 <col:11>
| | | |   | `-TextComment 0x1afced8a988 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced8a9d0 <col:12, col:38> Name="brief"
| | | |     `-ParagraphComment 0x1afced8aa20 <col:18, col:38>
| | | |       `-TextComment 0x1afced8a9f8 <col:18, col:38> Text=" Is type assaignable."
| | | |-VarDecl 0x1afce0c23e8 <line:196:9, col:102> col:102 referenced T 'const bool' static inline callinit
| | | | |-ImplicitValueInitExpr 0x1afce0c2450 <<invalid sloc>> 'const bool'
| | | | `-FullComment 0x1afced8ab78 <line:194:11, col:38>
| | | |   |-ParagraphComment 0x1afced8aad8 <col:11>
| | | |   | `-TextComment 0x1afced8aab0 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced8aaf8 <col:12, col:38> Name="brief"
| | | |     `-ParagraphComment 0x1afced8ab48 <col:18, col:38>
| | | |       `-TextComment 0x1afced8ab20 <col:18, col:38> Text=" Is type assaignable."
| | | |-VarDecl 0x1afce0be4d0 <line:201:9, col:34> col:34 hasMoveAssign 'const bool' static inline
| | | | `-FullComment 0x1afced8aca0 <line:199:11, col:43>
| | | |   |-ParagraphComment 0x1afced8ac00 <col:11>
| | | |   | `-TextComment 0x1afced8abd8 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced8ac20 <col:12, col:43> Name="brief"
| | | |     `-ParagraphComment 0x1afced8ac70 <col:18, col:43>
| | | |       `-TextComment 0x1afced8ac48 <col:18, col:43> Text=" Is type move assaignable."
| | | |-VarDecl 0x1afce0be5b8 <line:206:9, col:34> col:34 hasDefaultConstructor 'const bool' static inline
| | | | `-FullComment 0x1afced8adc8 <line:204:11, col:52>
| | | |   |-ParagraphComment 0x1afced8ad28 <col:11>
| | | |   | `-TextComment 0x1afced8ad00 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced8ad48 <col:12, col:52> Name="brief"
| | | |     `-ParagraphComment 0x1afced8ad98 <col:18, col:52>
| | | |       `-TextComment 0x1afced8ad70 <col:18, col:52> Text=" Is type has a default constructor."
| | | |-VarDecl 0x1afce0be6a0 <line:211:9, col:34> col:34 hasDestructor 'const bool' static inline
| | | | `-FullComment 0x1afced8aef0 <line:209:11, col:51>
| | | |   |-ParagraphComment 0x1afced8ae50 <col:11>
| | | |   | `-TextComment 0x1afced8ae28 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced8ae70 <col:12, col:51> Name="brief"
| | | |     `-ParagraphComment 0x1afced8aec0 <col:18, col:51>
| | | |       `-TextComment 0x1afced8ae98 <col:18, col:51> Text=" Is type has a destrucor function."
| | | |-FunctionTemplateDecl 0x1afce0be970 <line:216:9, line:217:47> col:44 is
| | | | |-TemplateTypeParmDecl 0x1afce0be778 <line:216:18, col:27> col:27 typename depth 1 index 0 T2
| | | | |-CXXMethodDecl 0x1afce0be8d0 <line:217:9, col:47> col:44 constexpr is 'const bool ()' static inline
| | | | | `-FullComment 0x1afced8b140 <line:214:11, col:37>
| | | | |   |-ParagraphComment 0x1afced8b0a0 <col:11>
| | | | |   | `-TextComment 0x1afced8b078 <col:11> Text=" "
| | | | |   `-BlockCommandComment 0x1afced8b0c0 <col:12, col:37> Name="brief"
| | | | |     `-ParagraphComment 0x1afced8b110 <col:18, col:37>
| | | | |       `-TextComment 0x1afced8b0e8 <col:18, col:37> Text=" Check type is same."
| | | | `-FullComment 0x1afced8b018 <col:11, col:37>
| | | |   |-ParagraphComment 0x1afced8af78 <col:11>
| | | |   | `-TextComment 0x1afced8af50 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced8af98 <col:12, col:37> Name="brief"
| | | |     `-ParagraphComment 0x1afced8afe8 <col:18, col:37>
| | | |       `-TextComment 0x1afced8afc0 <col:18, col:37> Text=" Check type is same."
| | | `-ClassTemplateDecl 0x1afce0bebe0 <line:222:9, line:231:9> line:223:16 hasOperator
| | |   |-TemplateTypeParmDecl 0x1afce0beaa8 <line:222:18, col:32> col:27 referenced typename depth 1 index 0 T2
| | |   | `-TemplateArgument type 'TypeBase<T>::T'
| | |   |   `-DependentNameType 0x1afce0bea10 'TypeBase<T>::T' dependent
| | |   |-CXXRecordDecl 0x1afce0beb50 <line:223:9, line:231:9> line:223:16 struct hasOperator definition
| | |   | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | | |-MoveConstructor exists simple trivial needs_implicit
| | |   | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | | |-MoveAssignment exists simple trivial needs_implicit
| | |   | | `-Destructor simple irrelevant trivial needs_implicit
| | |   | |-FullComment 0x1afced8b3a8 <line:220:11, col:56>
| | |   | | |-ParagraphComment 0x1afced8b308 <col:11>
| | |   | | | `-TextComment 0x1afced8b2e0 <col:11> Text=" "
| | |   | | `-BlockCommandComment 0x1afced8b328 <col:12, col:56> Name="brief"
| | |   | |   `-ParagraphComment 0x1afced8b378 <col:18, col:56>
| | |   | |     `-TextComment 0x1afced8b350 <col:18, col:56> Text=" Check specific operator exists or not."
| | |   | |-CXXRecordDecl 0x1afce0bee48 <line:223:9, col:16> col:16 implicit struct hasOperator
| | |   | |-VarDecl 0x1afce0beee8 <line:225:13, col:38> col:38 equal 'const bool' static inline
| | |   | |-VarDecl 0x1afce0bf000 <line:226:13, col:38> col:38 notEqual 'const bool' static inline
| | |   | |-VarDecl 0x1afce0bf100 <line:227:13, col:38> col:38 less 'const bool' static inline
| | |   | |-VarDecl 0x1afce0bf200 <line:228:13, col:38> col:38 greater 'const bool' static inline
| | |   | |-VarDecl 0x1afce0bf300 <line:229:13, col:38> col:38 lessOrEqual 'const bool' static inline
| | |   | `-VarDecl 0x1afce0bf400 <line:230:13, col:38> col:38 greaterOrEqual 'const bool' static inline
| | |   `-FullComment 0x1afced8b280 <line:220:11, col:56>
| | |     |-ParagraphComment 0x1afced8b1c8 <col:11>
| | |     | `-TextComment 0x1afced8b1a0 <col:11> Text=" "
| | |     `-BlockCommandComment 0x1afced8b1e8 <col:12, col:56> Name="brief"
| | |       `-ParagraphComment 0x1afced8b238 <col:18, col:56>
| | |         `-TextComment 0x1afced8b210 <col:18, col:56> Text=" Check specific operator exists or not."
| | |-ClassTemplateSpecializationDecl 0x1afce0c6d40 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'bool'
| | |   `-BuiltinType 0x1afcc6e38c0 'bool'
| | |-ClassTemplateSpecializationDecl 0x1afce0bf558 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'char'
| | |   `-BuiltinType 0x1afcc6e38e0 'char'
| | |-ClassTemplateSpecializationDecl 0x1afce0bfd98 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'signed char'
| | |   `-BuiltinType 0x1afcc6e3900 'signed char'
| | |-ClassTemplateSpecializationDecl 0x1afce0c0728 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'short'
| | |   `-BuiltinType 0x1afcc6e3920 'short'
| | |-ClassTemplateSpecializationDecl 0x1afce0c1008 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'int'
| | |   `-BuiltinType 0x1afcc6e3940 'int'
| | |-ClassTemplateSpecializationDecl 0x1afce0c99a8 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'long'
| | |   `-BuiltinType 0x1afcc6e3960 'long'
| | |-ClassTemplateSpecializationDecl 0x1afce0ca298 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'long long'
| | |   `-BuiltinType 0x1afcc6e3980 'long long'
| | |-ClassTemplateSpecializationDecl 0x1afce0c2b68 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'unsigned char'
| | |   `-BuiltinType 0x1afcc6e39a0 'unsigned char'
| | |-ClassTemplateSpecializationDecl 0x1afce0c33a8 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'unsigned short'
| | |   `-BuiltinType 0x1afcc6e39c0 'unsigned short'
| | |-ClassTemplateSpecializationDecl 0x1afce0ced38 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'unsigned int'
| | |   `-BuiltinType 0x1afcc6e39e0 'unsigned int'
| | |-ClassTemplateSpecializationDecl 0x1afce0cd5d8 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'unsigned long'
| | |   `-BuiltinType 0x1afcc6e3a00 'unsigned long'
| | |-ClassTemplateSpecializationDecl 0x1afce0cde98 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'unsigned long long'
| | |   `-BuiltinType 0x1afcc6e3a20 'unsigned long long'
| | |-ClassTemplateSpecializationDecl 0x1afce0c7798 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'float'
| | |   `-BuiltinType 0x1afcc6e3a40 'float'
| | |-ClassTemplateSpecializationDecl 0x1afce0c7ff8 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'double'
| | |   `-BuiltinType 0x1afcc6e3a60 'double'
| | |-ClassTemplateSpecializationDecl 0x1afce0c8888 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'long double'
| | |   `-BuiltinType 0x1afcc6e3a80 'long double'
| | |-ClassTemplateSpecializationDecl 0x1afce0c9080 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'wchar_t'
| | |   `-BuiltinType 0x1afcc6e3e20 'wchar_t'
| | |-ClassTemplateSpecializationDecl 0x1afce0cb8d0 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'char16_t'
| | |   `-BuiltinType 0x1afcc6e3e60 'char16_t'
| | |-ClassTemplateSpecializationDecl 0x1afce0cc0e0 <line:80:5, line:232:5> line:81:12 struct TypeBase
| | | `-TemplateArgument type 'char32_t'
| | |   `-BuiltinType 0x1afcc6e3e80 'char32_t'
| | `-FullComment 0x1afced8b5d0 <line:76:7, line:79:5>
| |   |-ParagraphComment 0x1afced8b430 <line:76:7>
| |   | `-TextComment 0x1afced8b408 <col:7> Text=" "
| |   |-BlockCommandComment 0x1afced8b450 <col:8, col:37> Name="brief"
| |   | `-ParagraphComment 0x1afced8b4a0 <col:14, col:37>
| |   |   `-TextComment 0x1afced8b478 <col:14, col:37> Text=" Set of type properties."
| |   |-ParagraphComment 0x1afced8b4e8 <line:78:7>
| |   | `-TextComment 0x1afced8b4c0 <col:7> Text=" "
| |   `-TParamCommandComment 0x1afced8b508 <col:8, line:79:5> Param="T" Position=<0>
| |     `-ParagraphComment 0x1afced8b590 <col:1, col:5>
| |       `-TextComment 0x1afced8b568 <col:1, col:5> Text="     "
| |-ClassTemplateDecl 0x1afce0c66e0 <line:234:5, line:236:6> line:235:12 Type
| | |-TemplateTypeParmDecl 0x1afce0c65b0 <line:234:14, col:23> col:23 referenced typename depth 0 index 0 T
| | |-CXXRecordDecl 0x1afce0c6650 <line:235:5, line:236:6> line:235:12 struct Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-public 'TypeBase<T>'
| | | `-CXXRecordDecl 0x1afce0c6a08 <col:5, col:12> col:12 implicit struct Type
| | |-ClassTemplateSpecialization 0x1afce0c6b08 'Type'
| | |-ClassTemplateSpecialization 0x1afce0c7378 'Type'
| | |-ClassTemplateSpecialization 0x1afce0bfb60 'Type'
| | |-ClassTemplateSpecialization 0x1afce0c04f0 'Type'
| | |-ClassTemplateSpecialization 0x1afce0c0dd0 'Type'
| | |-ClassTemplateSpecialization 0x1afce0c9768 'Type'
| | |-ClassTemplateSpecialization 0x1afce0ca060 'Type'
| | |-ClassTemplateSpecialization 0x1afce0c2930 'Type'
| | |-ClassTemplateSpecialization 0x1afce0c3170 'Type'
| | |-ClassTemplateSpecialization 0x1afce0ceb00 'Type'
| | |-ClassTemplateSpecialization 0x1afce0cf3b0 'Type'
| | |-ClassTemplateSpecialization 0x1afce0cdc58 'Type'
| | |-ClassTemplateSpecialization 0x1afce0c7560 'Type'
| | |-ClassTemplateSpecialization 0x1afce0c7db8 'Type'
| | |-ClassTemplateSpecialization 0x1afce0c8648 'Type'
| | |-ClassTemplateSpecialization 0x1afce0c8e50 'Type'
| | |-ClassTemplateSpecialization 0x1afce0cb6a0 'Type'
| | `-ClassTemplateSpecialization 0x1afce0cbeb0 'Type'
| |-ClassTemplateSpecializationDecl 0x1afce0c6b08 <line:239:5, line:246:5> line:240:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'bool'
| | | `-BuiltinType 0x1afcc6e38c0 'bool'
| | |-FullComment 0x1afced8b680 <line:238:7, col:82>
| | | `-ParagraphComment 0x1afced8b658 <col:7, col:82>
| | |   `-TextComment 0x1afced8b630 <col:7, col:82> Text=" --------------------------------- Boolean -------------------------------- "
| | |-CXXRecordDecl 0x1afce0c6ec8 <line:240:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0c6f70 <line:242:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c7080 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0c7060 <col:42> 'const char [5]' lvalue "bool"
| | |-VarDecl 0x1afce0c70a8 <line:243:9, col:40> col:34 max 'const bool' static inline cinit
| | | `-CXXBoolLiteralExpr 0x1afce0c7110 <col:40> 'bool' true
| | |-VarDecl 0x1afce0c7178 <line:244:9, col:40> col:34 min 'const bool' static inline cinit
| | | `-CXXBoolLiteralExpr 0x1afce0c71e0 <col:40> 'bool' false
| | `-VarDecl 0x1afce0c7248 <line:245:9, col:47> col:34 isIntegral 'const bool' static inline cinit
| |   `-CXXBoolLiteralExpr 0x1afce0c72b0 <col:47> 'bool' true
| |-ClassTemplateSpecializationDecl 0x1afce0c7378 <line:250:5, line:257:5> line:251:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'char'
| | | `-BuiltinType 0x1afcc6e38e0 'char'
| | |-FullComment 0x1afced8b730 <line:248:7, col:82>
| | | `-ParagraphComment 0x1afced8b708 <col:7, col:82>
| | |   `-TextComment 0x1afced8b6e0 <col:7, col:82> Text=" ---------------------------- Signed Integrals ---------------------------- "
| | |-CXXRecordDecl 0x1afce0bf6e8 <line:251:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0bf790 <line:253:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0bf818 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0bf7f8 <col:42> 'const char [5]' lvalue "char"
| | |-VarDecl 0x1afce0bf840 <line:254:9, col:41> col:34 max 'const char' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0bf8d0 <col:41> 'const char' <IntegralCast>
| | |   `-IntegerLiteral 0x1afce0bf8a8 <col:41> 'int' 127
| | |-VarDecl 0x1afce0bf940 <line:255:9, col:41> col:34 min 'const char' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0bf9e8 <col:40, col:41> 'const char' <IntegralCast>
| | |   `-UnaryOperator 0x1afce0bf9d0 <col:40, col:41> 'int' prefix '-'
| | |     `-IntegerLiteral 0x1afce0bf9a8 <col:41> 'int' 128
| | `-VarDecl 0x1afce0bfa58 <line:256:9, col:47> col:34 isIntegral 'const bool' static inline cinit
| |   `-CXXBoolLiteralExpr 0x1afce0bfac0 <col:47> 'bool' true
| |-ClassTemplateSpecializationDecl 0x1afce0bfb60 <line:259:5, line:266:5> line:260:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'signed char'
| | | `-BuiltinType 0x1afcc6e3900 'signed char'
| | |-CXXRecordDecl 0x1afce0bff28 <col:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0bffd0 <line:262:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c00e8 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0c00c0 <col:42> 'const char [12]' lvalue "signed char"
| | |-VarDecl 0x1afce0c0110 <line:263:9, col:41> col:34 max 'const char' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c01a0 <col:41> 'const char' <IntegralCast>
| | |   `-IntegerLiteral 0x1afce0c0178 <col:41> 'int' 127
| | |-VarDecl 0x1afce0c0210 <line:264:9, col:41> col:34 min 'const char' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c02b8 <col:40, col:41> 'const char' <IntegralCast>
| | |   `-UnaryOperator 0x1afce0c02a0 <col:40, col:41> 'int' prefix '-'
| | |     `-IntegerLiteral 0x1afce0c0278 <col:41> 'int' 128
| | `-VarDecl 0x1afce0c0328 <line:265:9, col:47> col:34 isIntegral 'const bool' static inline cinit
| |   `-CXXBoolLiteralExpr 0x1afce0c0390 <col:47> 'bool' true
| |-ClassTemplateSpecializationDecl 0x1afce0c04f0 <line:268:5, line:275:5> line:269:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'short'
| | | `-BuiltinType 0x1afcc6e3920 'short'
| | |-CXXRecordDecl 0x1afce0c08b8 <col:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0c0960 <line:271:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c0a78 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0c0a50 <col:42> 'const char [10]' lvalue "short int"
| | |-VarDecl 0x1afce0c0aa8 <line:272:9, col:46> col:39 max 'const short' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c0b38 <col:46> 'const short' <IntegralCast>
| | |   `-IntegerLiteral 0x1afce0c0b10 <col:46> 'int' 32767
| | |-VarDecl 0x1afce0c0bb0 <line:273:9, col:46> col:39 min 'const short' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c0c58 <col:45, col:46> 'const short' <IntegralCast>
| | |   `-UnaryOperator 0x1afce0c0c40 <col:45, col:46> 'int' prefix '-'
| | |     `-IntegerLiteral 0x1afce0c0c18 <col:46> 'int' 32768
| | `-VarDecl 0x1afce0c0cc8 <line:274:9, col:47> col:34 isIntegral 'const bool' static inline cinit
| |   `-CXXBoolLiteralExpr 0x1afce0c0d30 <col:47> 'bool' true
| |-ClassTemplateSpecializationDecl 0x1afce0c0dd0 <line:277:5, line:284:5> line:278:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'int'
| | | `-BuiltinType 0x1afcc6e3940 'int'
| | |-CXXRecordDecl 0x1afce0c1198 <col:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0c1240 <line:280:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c1350 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0c1330 <col:42> 'const char [4]' lvalue "int"
| | |-VarDecl 0x1afce0c1380 <line:281:9, col:40> col:33 max 'const int' static inline cinit
| | | `-IntegerLiteral 0x1afce0c13e8 <col:40> 'int' 2147483647
| | |-VarDecl 0x1afce0c1470 <line:282:9, col:53> col:33 min 'const int' static inline cinit
| | | `-BinaryOperator 0x1afce0c95e8 <col:39, col:53> 'int' '-'
| | |   |-UnaryOperator 0x1afce0c95a8 <col:39, col:40> 'int' prefix '-'
| | |   | `-IntegerLiteral 0x1afce0c9580 <col:40> 'int' 2147483647
| | |   `-IntegerLiteral 0x1afce0c95c0 <col:53> 'int' 1
| | `-VarDecl 0x1afce0c9660 <line:283:9, col:47> col:34 isIntegral 'const bool' static inline cinit
| |   `-CXXBoolLiteralExpr 0x1afce0c96c8 <col:47> 'bool' true
| |-ClassTemplateSpecializationDecl 0x1afce0c9768 <line:286:5, line:293:5> line:287:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'long'
| | | `-BuiltinType 0x1afcc6e3960 'long'
| | |-CXXRecordDecl 0x1afce0c9b38 <col:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0c9be0 <line:289:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c9cf0 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0c9cd0 <col:42> 'const char [9]' lvalue "long int"
| | |-VarDecl 0x1afce0c9d20 <line:290:9, col:40> col:33 max 'const int' static inline cinit
| | | `-IntegerLiteral 0x1afce0c9d88 <col:40> 'int' 2147483647
| | |-VarDecl 0x1afce0c9e10 <line:291:9, col:53> col:33 min 'const int' static inline cinit
| | | `-BinaryOperator 0x1afce0c9ee0 <col:39, col:53> 'int' '-'
| | |   |-UnaryOperator 0x1afce0c9ea0 <col:39, col:40> 'int' prefix '-'
| | |   | `-IntegerLiteral 0x1afce0c9e78 <col:40> 'int' 2147483647
| | |   `-IntegerLiteral 0x1afce0c9eb8 <col:53> 'int' 1
| | `-VarDecl 0x1afce0c9f58 <line:292:9, col:47> col:34 isIntegral 'const bool' static inline cinit
| |   `-CXXBoolLiteralExpr 0x1afce0c9fc0 <col:47> 'bool' true
| |-ClassTemplateSpecializationDecl 0x1afce0ca060 <line:295:5, line:302:5> line:296:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'long long'
| | | `-BuiltinType 0x1afcc6e3980 'long long'
| | |-CXXRecordDecl 0x1afce0ca428 <col:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0ca4d0 <line:298:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c2578 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0c2550 <col:42> 'const char [14]' lvalue "long long int"
| | |-VarDecl 0x1afce0c25a8 <line:299:9, col:50> col:43 max 'const long long' static inline cinit
| | | `-IntegerLiteral 0x1afce0c2610 <col:50> 'long long' 9223372036854775807
| | |-VarDecl 0x1afce0c2698 <line:300:9, col:71> col:43 min 'const long long' static inline cinit
| | | `-BinaryOperator 0x1afce0c2780 <col:49, col:71> 'long long' '-'
| | |   |-UnaryOperator 0x1afce0c2728 <col:49, col:50> 'long long' prefix '-'
| | |   | `-IntegerLiteral 0x1afce0c2700 <col:50> 'long long' 9223372036854775807
| | |   `-ImplicitCastExpr 0x1afce0c2768 <col:71> 'long long' <IntegralCast>
| | |     `-IntegerLiteral 0x1afce0c2740 <col:71> 'int' 1
| | `-VarDecl 0x1afce0c27f8 <line:301:9, col:47> col:34 isIntegral 'const bool' static inline cinit
| |   `-CXXBoolLiteralExpr 0x1afce0c2860 <col:47> 'bool' true
| |-ClassTemplateSpecializationDecl 0x1afce0c2930 <line:306:5, line:313:5> line:307:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'unsigned char'
| | | `-BuiltinType 0x1afcc6e39a0 'unsigned char'
| | |-FullComment 0x1afced8b7e0 <line:304:7, col:82>
| | | `-ParagraphComment 0x1afced8b7b8 <col:7, col:82>
| | |   `-TextComment 0x1afced8b790 <col:7, col:82> Text=" --------------------------- Unsinged Integrals --------------------------- "
| | |-CXXRecordDecl 0x1afce0c2cf8 <line:307:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0c2da0 <line:309:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c2e30 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0c2e08 <col:42> 'const char [14]' lvalue "unsigned char"
| | |-VarDecl 0x1afce0c2e60 <line:310:9, col:49> col:43 min 'const unsigned char' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c2ef0 <col:49> 'const unsigned char' <IntegralCast>
| | |   `-IntegerLiteral 0x1afce0c2ec8 <col:49> 'int' 0
| | |-VarDecl 0x1afce0c2f68 <line:311:9, col:49> col:43 max 'const unsigned char' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c2ff8 <col:49> 'const unsigned char' <IntegralCast>
| | |   `-IntegerLiteral 0x1afce0c2fd0 <col:49> 'int' 255
| | `-VarDecl 0x1afce0c3068 <line:312:9, col:47> col:34 isIntegral 'const bool' static inline cinit
| |   `-CXXBoolLiteralExpr 0x1afce0c30d0 <col:47> 'bool' true
| |-ClassTemplateSpecializationDecl 0x1afce0c3170 <line:315:5, line:322:5> line:316:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'unsigned short'
| | | `-BuiltinType 0x1afcc6e39c0 'unsigned short'
| | |-CXXRecordDecl 0x1afce0ce600 <col:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0ce6a8 <line:318:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0ce7c0 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0ce790 <col:42> 'const char [19]' lvalue "unsigned short int"
| | |-VarDecl 0x1afce0ce7f0 <line:319:9, col:54> col:48 min 'const unsigned short' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0ce880 <col:54> 'const unsigned short' <IntegralCast>
| | |   `-IntegerLiteral 0x1afce0ce858 <col:54> 'int' 0
| | |-VarDecl 0x1afce0ce8f8 <line:320:9, col:54> col:48 max 'const unsigned short' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0ce988 <col:54> 'const unsigned short' <IntegralCast>
| | |   `-IntegerLiteral 0x1afce0ce960 <col:54> 'int' 65535
| | `-VarDecl 0x1afce0ce9f8 <line:321:9, col:47> col:34 isIntegral 'const bool' static inline cinit
| |   `-CXXBoolLiteralExpr 0x1afce0cea60 <col:47> 'bool' true
| |-ClassTemplateSpecializationDecl 0x1afce0ceb00 <line:324:5, line:331:5> line:325:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'unsigned int'
| | | `-BuiltinType 0x1afcc6e39e0 'unsigned int'
| | |-CXXRecordDecl 0x1afce0ceec8 <col:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0cef70 <line:327:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0cf088 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0cf060 <col:42> 'const char [13]' lvalue "unsigned int"
| | |-VarDecl 0x1afce0cf0b8 <line:328:9, col:48> col:42 min 'const unsigned int' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0cf148 <col:48> 'const unsigned int' <IntegralCast>
| | |   `-IntegerLiteral 0x1afce0cf120 <col:48> 'int' 0
| | |-VarDecl 0x1afce0cf1c0 <line:329:9, col:48> col:42 referenced max 'const unsigned int' static inline cinit
| | | `-IntegerLiteral 0x1afce0cf228 <col:48> 'unsigned int' 4294967295
| | `-VarDecl 0x1afce0cf2a8 <line:330:9, col:47> col:34 isIntegral 'const bool' static inline cinit
| |   `-CXXBoolLiteralExpr 0x1afce0cf310 <col:47> 'bool' true
| |-ClassTemplateSpecializationDecl 0x1afce0cf3b0 <line:333:5, line:340:5> line:334:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'unsigned long'
| | | `-BuiltinType 0x1afcc6e3a00 'unsigned long'
| | |-CXXRecordDecl 0x1afce0cd768 <col:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0cd810 <line:336:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0cd930 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0cd900 <col:42> 'const char [18]' lvalue "unsigned long int"
| | |-VarDecl 0x1afce0cd960 <line:337:9, col:48> col:42 min 'const unsigned int' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0cd9f0 <col:48> 'const unsigned int' <IntegralCast>
| | |   `-IntegerLiteral 0x1afce0cd9c8 <col:48> 'int' 0
| | |-VarDecl 0x1afce0cda68 <line:338:9, col:48> col:42 max 'const unsigned int' static inline cinit
| | | `-IntegerLiteral 0x1afce0cdad0 <col:48> 'unsigned int' 4294967295
| | `-VarDecl 0x1afce0cdb50 <line:339:9, col:47> col:34 isIntegral 'const bool' static inline cinit
| |   `-CXXBoolLiteralExpr 0x1afce0cdbb8 <col:47> 'bool' true
| |-ClassTemplateSpecializationDecl 0x1afce0cdc58 <line:342:5, line:349:5> line:343:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'unsigned long long'
| | | `-BuiltinType 0x1afcc6e3a20 'unsigned long long'
| | |-CXXRecordDecl 0x1afce0ce028 <col:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0ce0d0 <line:345:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0ce1f0 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0ce1c0 <col:42> 'const char [23]' lvalue "unsigned long long int"
| | |-VarDecl 0x1afce0ce220 <line:346:9, col:58> col:52 min 'const unsigned long long' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0ce2b0 <col:58> 'const unsigned long long' <IntegralCast>
| | |   `-IntegerLiteral 0x1afce0ce288 <col:58> 'int' 0
| | |-VarDecl 0x1afce0ce328 <line:347:9, col:58> col:52 max 'const unsigned long long' static inline cinit
| | | `-IntegerLiteral 0x1afce0ce390 <col:58> 'unsigned long long' 18446744073709551615
| | `-VarDecl 0x1afce0ce410 <line:348:9, col:47> col:34 isIntegral 'const bool' static inline cinit
| |   `-CXXBoolLiteralExpr 0x1afce0ce478 <col:47> 'bool' true
| |-ClassTemplateSpecializationDecl 0x1afce0c7560 <line:353:5, line:361:5> line:354:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'float'
| | | `-BuiltinType 0x1afcc6e3a40 'float'
| | |-FullComment 0x1afced8b890 <line:351:7, col:82>
| | | `-ParagraphComment 0x1afced8b868 <col:7, col:82>
| | |   `-TextComment 0x1afced8b840 <col:7, col:82> Text=" ----------------------------- Floating point ----------------------------- "
| | |-CXXRecordDecl 0x1afce0c7928 <line:354:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0c79d0 <line:356:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c7ae0 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0c7ac0 <col:42> 'const char [6]' lvalue "float"
| | |-VarDecl 0x1afce0c7b10 <line:357:9, col:35> col:35 max 'const float' static inline
| | |-VarDecl 0x1afce0c7b90 <line:358:9, col:35> col:35 min 'const float' static inline
| | |-VarDecl 0x1afce0c7c08 <line:359:9, col:44> col:34 isFloat 'const bool' static inline cinit
| | | `-CXXBoolLiteralExpr 0x1afce0c7c70 <col:44> 'bool' true
| | `-VarDecl 0x1afce0c7ce0 <line:360:9, col:45> col:35 epsilon 'const float' static inline cinit
| |   `-FloatingLiteral 0x1afce0c7d48 <col:45> 'float' 1.192090e-07
| |-ClassTemplateSpecializationDecl 0x1afce0c7db8 <line:363:5, line:371:5> line:364:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'double'
| | | `-BuiltinType 0x1afcc6e3a60 'double'
| | |-CXXRecordDecl 0x1afce0c8188 <col:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0c8230 <line:366:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c8340 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0c8320 <col:42> 'const char [7]' lvalue "double"
| | |-VarDecl 0x1afce0c8370 <line:367:9, col:36> col:36 max 'const double' static inline
| | |-VarDecl 0x1afce0c83f0 <line:368:9, col:36> col:36 min 'const double' static inline
| | |-VarDecl 0x1afce0c8468 <line:369:9, col:44> col:34 isFloat 'const bool' static inline cinit
| | | `-CXXBoolLiteralExpr 0x1afce0c84d0 <col:44> 'bool' true
| | `-VarDecl 0x1afce0c8570 <line:370:9, col:46> col:36 epsilon 'const double' static inline cinit
| |   `-FloatingLiteral 0x1afce0c85d8 <col:46> 'double' 2.220450e-16
| |-ClassTemplateSpecializationDecl 0x1afce0c8648 <line:373:5, line:381:5> line:374:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'long double'
| | | `-BuiltinType 0x1afcc6e3a80 'long double'
| | |-CXXRecordDecl 0x1afce0c8a18 <col:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0c8ac0 <line:376:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c8b50 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0c8b28 <col:42> 'const char [12]' lvalue "long double"
| | |-VarDecl 0x1afce0c8b80 <line:377:9, col:41> col:41 max 'const long double' static inline
| | |-VarDecl 0x1afce0c8c00 <line:378:9, col:41> col:41 min 'const long double' static inline
| | |-VarDecl 0x1afce0c8c78 <line:379:9, col:44> col:34 isFloat 'const bool' static inline cinit
| | | `-CXXBoolLiteralExpr 0x1afce0c8ce0 <col:44> 'bool' true
| | `-VarDecl 0x1afce0c8d50 <line:380:9, col:51> col:41 epsilon 'const long double' static inline cinit
| |   `-FloatingLiteral 0x1afce0c8db8 <col:51> 'long double' 1.084200e-19
| |-ClassTemplateSpecializationDecl 0x1afce0c8e50 <line:385:5, line:392:5> line:386:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'wchar_t'
| | | `-BuiltinType 0x1afcc6e3e20 'wchar_t'
| | |-FullComment 0x1afced8b940 <line:383:7, col:82>
| | | `-ParagraphComment 0x1afced8b918 <col:7, col:82>
| | |   `-TextComment 0x1afced8b8f0 <col:7, col:82> Text=" ----------------------------- Character Types ---------------------------- "
| | |-CXXRecordDecl 0x1afce0c9208 <line:386:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0c92b0 <line:388:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c9338 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0c9318 <col:42> 'const char [8]' lvalue "wchar_t"
| | |-VarDecl 0x1afce0c9360 <line:389:9, col:43> col:37 max 'const wchar_t' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c93f0 <col:43> 'const wchar_t' <IntegralCast>
| | |   `-IntegerLiteral 0x1afce0c93c8 <col:43> 'int' 65535
| | |-VarDecl 0x1afce0c9460 <line:390:9, col:43> col:37 min 'const wchar_t' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0c94f0 <col:43> 'const wchar_t' <IntegralCast>
| | |   `-IntegerLiteral 0x1afce0c94c8 <col:43> 'int' 0
| | `-VarDecl 0x1afce0cb5a0 <line:391:9, col:47> col:34 isIntegral 'const bool' static inline cinit
| |   `-CXXBoolLiteralExpr 0x1afce0cb608 <col:47> 'bool' true
| |-ClassTemplateSpecializationDecl 0x1afce0cb6a0 <line:394:5, line:401:5> line:395:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'char16_t'
| | | `-BuiltinType 0x1afcc6e3e60 'char16_t'
| | |-CXXRecordDecl 0x1afce0cba58 <col:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0cbb00 <line:397:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0cbb88 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0cbb68 <col:42> 'const char [9]' lvalue "char16_t"
| | |-VarDecl 0x1afce0cbbb0 <line:398:9, col:44> col:38 max 'const char16_t' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0cbc40 <col:44> 'const char16_t' <IntegralCast>
| | |   `-IntegerLiteral 0x1afce0cbc18 <col:44> 'int' 65535
| | |-VarDecl 0x1afce0cbcb0 <line:399:9, col:44> col:38 min 'const char16_t' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0cbd40 <col:44> 'const char16_t' <IntegralCast>
| | |   `-IntegerLiteral 0x1afce0cbd18 <col:44> 'int' 0
| | `-VarDecl 0x1afce0cbdb0 <line:400:9, col:47> col:34 isIntegral 'const bool' static inline cinit
| |   `-CXXBoolLiteralExpr 0x1afce0cbe18 <col:47> 'bool' true
| |-ClassTemplateSpecializationDecl 0x1afce0cbeb0 <line:403:5, line:410:5> line:404:12 invalid struct Type definition
| | |-DefinitionData parsing_base_specifiers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument type 'char32_t'
| | | `-BuiltinType 0x1afcc6e3e80 'char32_t'
| | |-CXXRecordDecl 0x1afce0cc268 <col:5, col:12> col:12 implicit struct Type
| | |-VarDecl 0x1afce0cc310 <line:406:9, col:42> col:35 name 'const char *' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0cc398 <col:42> 'const char *' <ArrayToPointerDecay>
| | |   `-StringLiteral 0x1afce0cc378 <col:42> 'const char [9]' lvalue "char32_t"
| | |-VarDecl 0x1afce0cc3c0 <line:407:9, col:44> col:38 max 'const char32_t' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0cc450 <col:44> 'const char32_t' <IntegralCast>
| | |   `-IntegerLiteral 0x1afce0cc428 <col:44> 'unsigned int' 4294967295
| | |-VarDecl 0x1afce0cc4c0 <line:408:9, col:44> col:38 min 'const char32_t' static inline cinit
| | | `-ImplicitCastExpr 0x1afce0cc550 <col:44> 'const char32_t' <IntegralCast>
| | |   `-IntegerLiteral 0x1afce0cc528 <col:44> 'int' 0
| | `-VarDecl 0x1afce0cc608 <line:409:9, col:47> col:34 isIntegral 'const bool' static inline cinit
| |   `-CXXBoolLiteralExpr 0x1afce0cc670 <col:47> 'bool' true
| |-TypedefDecl 0x1afce0cc7c8 <line:412:5, col:22> col:22 i8Info 'Type<i8>':'Michka::Type<char>'
| | `-TemplateSpecializationType 0x1afce0cc720 'Type<i8>' sugar Type
| |   |-TemplateArgument type 'i8':'char'
| |   | `-TypedefType 0x1afce0cc6e0 'i8' sugar
| |   |   |-Typedef 0x1afce07d730 'i8'
| |   |   `-BuiltinType 0x1afcc6e38e0 'char'
| |   `-RecordType 0x1afce0c7460 'Michka::Type<char>'
| |     `-ClassTemplateSpecialization 0x1afce0c7378 'Type'
| |-TypedefDecl 0x1afce0cc908 <line:413:5, col:23> col:23 i16Info 'Type<i16>':'Michka::Type<short>'
| | `-TemplateSpecializationType 0x1afce0cc860 'Type<i16>' sugar Type
| |   |-TemplateArgument type 'i16':'short'
| |   | `-TypedefType 0x1afce0cc820 'i16' sugar
| |   |   |-Typedef 0x1afce07d7a0 'i16'
| |   |   `-BuiltinType 0x1afcc6e3920 'short'
| |   `-RecordType 0x1afce0c05d0 'Michka::Type<short>'
| |     `-ClassTemplateSpecialization 0x1afce0c04f0 'Type'
| |-TypedefDecl 0x1afce0cca48 <line:414:5, col:23> col:23 i32Info 'Type<i32>':'Michka::Type<int>'
| | `-TemplateSpecializationType 0x1afce0cc9a0 'Type<i32>' sugar Type
| |   |-TemplateArgument type 'i32':'int'
| |   | `-TypedefType 0x1afce0cc960 'i32' sugar
| |   |   |-Typedef 0x1afce07d810 'i32'
| |   |   `-BuiltinType 0x1afcc6e3940 'int'
| |   `-RecordType 0x1afce0c0eb0 'Michka::Type<int>'
| |     `-ClassTemplateSpecialization 0x1afce0c0dd0 'Type'
| |-TypedefDecl 0x1afce0ccb88 <line:415:5, col:23> col:23 i64Info 'Type<i64>':'Michka::Type<long long>'
| | `-TemplateSpecializationType 0x1afce0ccae0 'Type<i64>' sugar Type
| |   |-TemplateArgument type 'i64':'long long'
| |   | `-TypedefType 0x1afce0ccaa0 'i64' sugar
| |   |   |-Typedef 0x1afce07d880 'i64'
| |   |   `-BuiltinType 0x1afcc6e3980 'long long'
| |   `-RecordType 0x1afce0ca140 'Michka::Type<long long>'
| |     `-ClassTemplateSpecialization 0x1afce0ca060 'Type'
| |-TypedefDecl 0x1afce0cccc8 <line:416:5, col:22> col:22 u8Info 'Type<u8>':'Michka::Type<unsigned char>'
| | `-TemplateSpecializationType 0x1afce0ccc20 'Type<u8>' sugar Type
| |   |-TemplateArgument type 'u8':'unsigned char'
| |   | `-TypedefType 0x1afce0ccbe0 'u8' sugar
| |   |   |-Typedef 0x1afce07d8f0 'u8'
| |   |   `-BuiltinType 0x1afcc6e39a0 'unsigned char'
| |   `-RecordType 0x1afce0c2a10 'Michka::Type<unsigned char>'
| |     `-ClassTemplateSpecialization 0x1afce0c2930 'Type'
| |-TypedefDecl 0x1afce0cce08 <line:417:5, col:23> col:23 u16Info 'Type<u16>':'Michka::Type<unsigned short>'
| | `-TemplateSpecializationType 0x1afce0ccd60 'Type<u16>' sugar Type
| |   |-TemplateArgument type 'u16':'unsigned short'
| |   | `-TypedefType 0x1afce0ccd20 'u16' sugar
| |   |   |-Typedef 0x1afce07d960 'u16'
| |   |   `-BuiltinType 0x1afcc6e39c0 'unsigned short'
| |   `-RecordType 0x1afce0c3250 'Michka::Type<unsigned short>'
| |     `-ClassTemplateSpecialization 0x1afce0c3170 'Type'
| |-TypedefDecl 0x1afce0ccf18 <line:418:5, col:23> col:23 referenced u32Info 'Type<u32>':'Michka::Type<unsigned int>'
| | `-TemplateSpecializationType 0x1afce0cce70 'Type<u32>' sugar Type
| |   |-TemplateArgument type 'u32':'unsigned int'
| |   | `-TypedefType 0x1afce0c4350 'u32' sugar
| |   |   |-Typedef 0x1afce07d9d0 'u32'
| |   |   `-BuiltinType 0x1afcc6e39e0 'unsigned int'
| |   `-RecordType 0x1afce0cebe0 'Michka::Type<unsigned int>'
| |     `-ClassTemplateSpecialization 0x1afce0ceb00 'Type'
| `-TypedefDecl 0x1afce0cd028 <line:419:5, col:23> col:23 u64Info 'Type<u64>':'Michka::Type<unsigned long long>'
|   `-TemplateSpecializationType 0x1afce0ccf80 'Type<u64>' sugar Type
|     |-TemplateArgument type 'u64':'unsigned long long'
|     | `-TypedefType 0x1afce0c1770 'u64' sugar
|     |   |-Typedef 0x1afce07da40 'u64'
|     |   `-BuiltinType 0x1afcc6e3a20 'unsigned long long'
|     `-RecordType 0x1afce0cdd40 'Michka::Type<unsigned long long>'
|       `-ClassTemplateSpecialization 0x1afce0cdc58 'Type'
|-NamespaceDecl 0x1afce0cd110 prev 0x1afce0baa78 <./src\Core/Reflection/Type.inl:29:1, line:37:1> line:29:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| `-FunctionTemplateDecl 0x1afce0cd520 parent 0x1afce0c3ed0 prev 0x1afce0be970 <line:32:5, line:36:5> line:33:46 is
|   |-TemplateTypeParmDecl 0x1afce0cd220 <line:32:14, col:23> col:23 referenced typename depth 1 index 0 T2
|   `-CXXMethodDecl 0x1afce0cd440 parent 0x1afce0c3ed0 prev 0x1afce0be8d0 <line:31:5, line:36:5> line:33:46 invalid constexpr is 'const bool ()' inline
|     `-CompoundStmt 0x1afce0cf678 <line:34:5, line:36:5>
|-NamespaceDecl 0x1afce0cf778 <./src\Core/Helpers.h:125:5, line:153:5> line:125:15 MichkaHasMemberFunction
| |-ClassTemplateDecl 0x1afce0cf9a8 <line:127:9, line:134:9> line:159:32 HasToString
| | |-TemplateTypeParmDecl 0x1afce0cf7e8 <line:127:18> col:26 typename depth 0 index 0
| | |-TemplateTypeParmDecl 0x1afce0cf870 <col:28, col:37> col:37 typename depth 0 index 1 T
| | `-CXXRecordDecl 0x1afce0cf918 <line:128:9, line:134:9> line:159:32 class HasToString definition
| |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial needs_implicit
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial needs_implicit
| |   `-CXXRecordDecl 0x1afce0cfc38 <line:128:9, line:159:32> col:32 implicit class HasToString
| `-ClassTemplatePartialSpecializationDecl 0x1afce0d0180 <line:135:9, line:152:9> line:159:32 class HasToString definition
|   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument type 'type-parameter-0-0'
|   | `-TemplateTypeParmType 0x1afce07dd40 'type-parameter-0-0' dependent depth 0 index 0
|   |-TemplateArgument type 'type-parameter-0-1 (type-parameter-0-2...)'
|   | `-FunctionProtoType 0x1afce0cffb0 'type-parameter-0-1 (type-parameter-0-2...)' dependent cdecl
|   |   |-TemplateTypeParmType 0x1afce0baf00 'type-parameter-0-1' dependent depth 0 index 1
|   |   `-PackExpansionType 0x1afce0cfed0 'type-parameter-0-2...' dependent
|   |     `-TemplateTypeParmType 0x1afce0cfe30 'type-parameter-0-2' dependent contains_unexpanded_pack depth 0 index 2 pack
|   |-TemplateTypeParmDecl 0x1afce0cfce0 <line:135:18, col:27> col:27 referenced typename depth 0 index 0 Class
|   |-TemplateTypeParmDecl 0x1afce0cfd60 <col:34, col:43> col:43 referenced typename depth 0 index 1 ReturnType
|   |-TemplateTypeParmDecl 0x1afce0cfde0 <col:55, col:67> col:67 referenced typename depth 0 index 2 ... Args
|   |-CXXRecordDecl 0x1afce0d0420 <line:136:9, line:159:32> col:32 implicit class HasToString
|   |-FunctionTemplateDecl 0x1afce0f99c8 <line:138:13, line:140:30> line:139:35 invalid check
|   | |-TemplateTypeParmDecl 0x1afce0d04b0 <line:138:22, col:31> col:31 referenced typename depth 1 index 0 T
|   | `-CXXMethodDecl 0x1afce0f9928 <line:139:13, line:140:30> line:139:35 invalid constexpr check 'auto (T *) -> int' static
|   |   `-ParmVarDecl 0x1afce0f97b0 <col:41, col:42> col:43 'T *'
|   |-FunctionTemplateDecl 0x1afce0f9bd0 <line:145:13, line:146:55> col:46 invalid check
|   | |-TemplateTypeParmDecl 0x1afce0f9a28 <line:145:22> col:30 typename depth 1 index 0
|   | `-CXXMethodDecl 0x1afce0f9b30 <line:146:13, col:55> col:46 invalid constexpr check 'int (...)' static
|   |-TypedefDecl 0x1afce0f9d90 <line:148:13, col:47> col:47 referenced type 'decltype(check<Class>(0))'
|   | `-DecltypeType 0x1afce0f9d50 'decltype(check<Class>(0))' dependent
|   |   `-CallExpr 0x1afce0f9ce8 <col:30, col:44> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x1afce0f9c38 <col:30, col:41> '<dependent type>' lvalue (no ADL) = 'check' 0x1afce0f99c8
|   |     `-IntegerLiteral 0x1afce0f9cc0 <col:43> 'int' 0
|   |-AccessSpecDecl 0x1afce0f9de8 <line:150:9, col:15> col:9 public
|   `-VarDecl 0x1afce0f9e28 <line:151:13, col:49> col:35 value 'const bool' static inline constexpr cinit
|     `-DependentScopeDeclRefExpr 0x1afce0f9f08 <col:43, col:49> '<dependent type>' lvalue
|-ClassTemplateDecl 0x1afce0fa090 <line:154:5, line:157:5> line:159:32 HasToString
| |-TemplateTypeParmDecl 0x1afce0f9f58 <line:154:14, col:23> col:23 referenced typename depth 0 index 0 Class
| `-CXXRecordDecl 0x1afce0fa000 <line:155:5, line:157:5> line:159:32 class HasToString definition
|   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-public 'MichkaHasMemberFunction::HasToString<Class, Michka::String ()>':'HasToString<Class, Michka::String ()>'
|   `-CXXRecordDecl 0x1afce0fa5f8 <line:155:5, line:159:32> col:32 implicit class HasToString
|-NamespaceDecl 0x1afce0f37b0 prev 0x1afce0cd110 <line:319:1, line:382:1> line:319:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| |-EnumDecl 0x1afce0f3820 <line:321:5, line:325:5> line:321:16 referenced class SortDirection 'int'
| | |-EnumConstantDecl 0x1afce0f38e8 <line:323:9> col:9 referenced ascending 'Michka::SortDirection'
| | `-EnumConstantDecl 0x1afce0f3940 <line:324:9> col:9 descending 'Michka::SortDirection'
| |-FunctionTemplateDecl 0x1afce0f3c30 <line:327:5, line:328:35> col:20 max
| | |-TemplateTypeParmDecl 0x1afce0f3998 <line:327:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1afce0f3b90 <./src\Core/Defines.h:54:25, ./src\Core/Helpers.h:328:35> col:20 max 'T (const T &)' inline
| |   |-ParmVarDecl 0x1afce0f3a80 <col:24, col:33> col:33 _a 'const T &'
| |   `-AlwaysInlineAttr 0x1afce0f3c90 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afce0f4230 <./src\Core/Helpers.h:338:5, line:339:52> col:20 max
| | |-TemplateTypeParmDecl 0x1afce0f3d90 <line:338:14, col:23> col:23 referenced typename depth 0 index 0 T
| | |-TemplateTypeParmDecl 0x1afce0f3e10 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... T2
| | |-FunctionDecl 0x1afce0f4190 <./src\Core/Defines.h:54:25, ./src\Core/Helpers.h:339:52> col:20 max 'T (const T &, const T2 &...)' inline
| | | |-ParmVarDecl 0x1afce0f3f30 <col:24, col:33> col:33 _a 'const T &'
| | | |-ParmVarDecl 0x1afce0f4078 <col:37, col:50> col:50 _b 'const T2 &...' pack
| | | |-AlwaysInlineAttr 0x1afce0f4298 <./src\Core/Defines.h:54:25> __forceinline
| | | `-FullComment 0x1afced8c250 <./src\Core/Helpers.h:331:7, line:337:5>
| | |   |-ParagraphComment 0x1afced8bed0 <line:331:7>
| | |   | `-TextComment 0x1afced8bea8 <col:7> Text=" "
| | |   |-BlockCommandComment 0x1afced8bef0 <col:8, col:50> Name="brief"
| | |   | `-ParagraphComment 0x1afced8bf40 <col:14, col:50>
| | |   |   `-TextComment 0x1afced8bf18 <col:14, col:50> Text=" Get maximum between multiple number."
| | |   |-ParagraphComment 0x1afced8bf88 <line:333:7>
| | |   | `-TextComment 0x1afced8bf60 <col:7> Text=" "
| | |   |-TParamCommandComment 0x1afced8bfa8 <col:8, line:334:7> Param="T"
| | |   | `-ParagraphComment 0x1afced8c028 <col:7>
| | |   |   `-TextComment 0x1afced8c000 <col:7> Text=" "
| | |   |-TParamCommandComment 0x1afced8c048 <col:8, line:335:7> Param="T2"
| | |   | `-ParagraphComment 0x1afced8c0c8 <col:7>
| | |   |   `-TextComment 0x1afced8c0a0 <col:7> Text=" "
| | |   |-ParamCommandComment 0x1afced8c0e8 <col:8, line:336:7> [in] implicitly Param="_a" ParamIndex=0
| | |   | `-ParagraphComment 0x1afced8c160 <col:7>
| | |   |   `-TextComment 0x1afced8c138 <col:7> Text=" "
| | |   `-ParamCommandComment 0x1afced8c180 <col:8, line:337:5> [in] implicitly Param="_b" ParamIndex=1
| | |     `-ParagraphComment 0x1afced8c1f8 <col:1, col:5>
| | |       `-TextComment 0x1afced8c1d0 <col:1, col:5> Text="     "
| | `-FullComment 0x1afced8be48 <line:331:7, line:337:5>
| |   |-ParagraphComment 0x1afced8bab8 <line:331:7>
| |   | `-TextComment 0x1afced8ba90 <col:7> Text=" "
| |   |-BlockCommandComment 0x1afced8bad8 <col:8, col:50> Name="brief"
| |   | `-ParagraphComment 0x1afced8bb28 <col:14, col:50>
| |   |   `-TextComment 0x1afced8bb00 <col:14, col:50> Text=" Get maximum between multiple number."
| |   |-ParagraphComment 0x1afced8bb70 <line:333:7>
| |   | `-TextComment 0x1afced8bb48 <col:7> Text=" "
| |   |-TParamCommandComment 0x1afced8bb90 <col:8, line:334:7> Param="T" Position=<0>
| |   | `-ParagraphComment 0x1afced8bc18 <col:7>
| |   |   `-TextComment 0x1afced8bbf0 <col:7> Text=" "
| |   |-TParamCommandComment 0x1afced8bc38 <col:8, line:335:7> Param="T2" Position=<1>
| |   | `-ParagraphComment 0x1afced8bcc0 <col:7>
| |   |   `-TextComment 0x1afced8bc98 <col:7> Text=" "
| |   |-ParamCommandComment 0x1afced8bce0 <col:8, line:336:7> [in] implicitly Param="_a" ParamIndex=0
| |   | `-ParagraphComment 0x1afced8bd58 <col:7>
| |   |   `-TextComment 0x1afced8bd30 <col:7> Text=" "
| |   `-ParamCommandComment 0x1afced8bd78 <col:8, line:337:5> [in] implicitly Param="_b" ParamIndex=1
| |     `-ParagraphComment 0x1afced8bdf0 <col:1, col:5>
| |       `-TextComment 0x1afced8bdc8 <col:1, col:5> Text="     "
| |-FunctionTemplateDecl 0x1afce0f45c0 <line:341:5, line:342:35> col:20 min
| | |-TemplateTypeParmDecl 0x1afce0f4368 <line:341:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1afce0f4520 <./src\Core/Defines.h:54:25, ./src\Core/Helpers.h:342:35> col:20 min 'T (const T &)' inline
| |   |-ParmVarDecl 0x1afce0f4450 <col:24, col:33> col:33 _a 'const T &'
| |   `-AlwaysInlineAttr 0x1afce0f4620 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afce0febd0 <./src\Core/Helpers.h:352:5, line:353:52> col:20 min
| | |-TemplateTypeParmDecl 0x1afce0fe800 <line:352:14, col:23> col:23 referenced typename depth 0 index 0 T
| | |-TemplateTypeParmDecl 0x1afce0fe880 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... T2
| | |-FunctionDecl 0x1afce0feb30 <./src\Core/Defines.h:54:25, ./src\Core/Helpers.h:353:52> col:20 min 'T (const T &, const T2 &...)' inline
| | | |-ParmVarDecl 0x1afce0fe970 <col:24, col:33> col:33 _a 'const T &'
| | | |-ParmVarDecl 0x1afce0fea58 <col:37, col:50> col:50 _b 'const T2 &...' pack
| | | |-AlwaysInlineAttr 0x1afce0fec38 <./src\Core/Defines.h:54:25> __forceinline
| | | `-FullComment 0x1afced8ca70 <./src\Core/Helpers.h:345:7, line:351:5>
| | |   |-ParagraphComment 0x1afced8c6f0 <line:345:7>
| | |   | `-TextComment 0x1afced8c6c8 <col:7> Text=" "
| | |   |-BlockCommandComment 0x1afced8c710 <col:8, col:50> Name="brief"
| | |   | `-ParagraphComment 0x1afced8c760 <col:14, col:50>
| | |   |   `-TextComment 0x1afced8c738 <col:14, col:50> Text=" Get minimum between multiple number."
| | |   |-ParagraphComment 0x1afced8c7a8 <line:347:7>
| | |   | `-TextComment 0x1afced8c780 <col:7> Text=" "
| | |   |-TParamCommandComment 0x1afced8c7c8 <col:8, line:348:7> Param="T"
| | |   | `-ParagraphComment 0x1afced8c848 <col:7>
| | |   |   `-TextComment 0x1afced8c820 <col:7> Text=" "
| | |   |-TParamCommandComment 0x1afced8c868 <col:8, line:349:7> Param="T2"
| | |   | `-ParagraphComment 0x1afced8c8e8 <col:7>
| | |   |   `-TextComment 0x1afced8c8c0 <col:7> Text=" "
| | |   |-ParamCommandComment 0x1afced8c908 <col:8, line:350:7> [in] implicitly Param="_a" ParamIndex=0
| | |   | `-ParagraphComment 0x1afced8c980 <col:7>
| | |   |   `-TextComment 0x1afced8c958 <col:7> Text=" "
| | |   `-ParamCommandComment 0x1afced8c9a0 <col:8, line:351:5> [in] implicitly Param="_b" ParamIndex=1
| | |     `-ParagraphComment 0x1afced8ca18 <col:1, col:5>
| | |       `-TextComment 0x1afced8c9f0 <col:1, col:5> Text="     "
| | `-FullComment 0x1afced8c668 <line:345:7, line:351:5>
| |   |-ParagraphComment 0x1afced8c2d8 <line:345:7>
| |   | `-TextComment 0x1afced8c2b0 <col:7> Text=" "
| |   |-BlockCommandComment 0x1afced8c2f8 <col:8, col:50> Name="brief"
| |   | `-ParagraphComment 0x1afced8c348 <col:14, col:50>
| |   |   `-TextComment 0x1afced8c320 <col:14, col:50> Text=" Get minimum between multiple number."
| |   |-ParagraphComment 0x1afced8c390 <line:347:7>
| |   | `-TextComment 0x1afced8c368 <col:7> Text=" "
| |   |-TParamCommandComment 0x1afced8c3b0 <col:8, line:348:7> Param="T" Position=<0>
| |   | `-ParagraphComment 0x1afced8c438 <col:7>
| |   |   `-TextComment 0x1afced8c410 <col:7> Text=" "
| |   |-TParamCommandComment 0x1afced8c458 <col:8, line:349:7> Param="T2" Position=<1>
| |   | `-ParagraphComment 0x1afced8c4e0 <col:7>
| |   |   `-TextComment 0x1afced8c4b8 <col:7> Text=" "
| |   |-ParamCommandComment 0x1afced8c500 <col:8, line:350:7> [in] implicitly Param="_a" ParamIndex=0
| |   | `-ParagraphComment 0x1afced8c578 <col:7>
| |   |   `-TextComment 0x1afced8c550 <col:7> Text=" "
| |   `-ParamCommandComment 0x1afced8c598 <col:8, line:351:5> [in] implicitly Param="_b" ParamIndex=1
| |     `-ParagraphComment 0x1afced8c610 <col:1, col:5>
| |       `-TextComment 0x1afced8c5e8 <col:1, col:5> Text="     "
| |-FunctionTemplateDecl 0x1afce0ff370 <line:363:5, line:364:87> col:23 sort
| | |-TemplateTypeParmDecl 0x1afce0fed38 <line:363:14, col:23> col:23 referenced typename depth 0 index 0 T
| | |-TemplateTypeParmDecl 0x1afce0fef48 <col:26, col:58> col:35 typename depth 0 index 1 ElementType
| | | `-TemplateArgument type 'Type<T>::RemovedPointerType'
| | |   `-DependentNameType 0x1afce0feed0 'Type<T>::RemovedPointerType' dependent
| | |-FunctionDecl 0x1afce0ff2d0 <./src\Core/Defines.h:54:25, ./src\Core/Helpers.h:364:87> col:23 sort 'void (T, const u32 &, const Michka::SortDirection &)' inline
| | | |-ParmVarDecl 0x1afce0ff008 <col:28, col:30> col:30 _array 'T'
| | | |-ParmVarDecl 0x1afce0ff0e0 <col:38, col:49> col:49 _size 'const u32 &'
| | | |-ParmVarDecl 0x1afce0ff190 <col:56, col:77> col:77 _direction 'const Michka::SortDirection &'
| | | |-AlwaysInlineAttr 0x1afce0ff3e0 <./src\Core/Defines.h:54:25> __forceinline
| | | `-FullComment 0x1afced912f8 <./src\Core/Helpers.h:356:7, line:362:5>
| | |   |-ParagraphComment 0x1afced8cf20 <line:356:7>
| | |   | `-TextComment 0x1afced8cef8 <col:7> Text=" "
| | |   |-BlockCommandComment 0x1afced8cf40 <col:8, col:34> Name="brief"
| | |   | `-ParagraphComment 0x1afced8cf90 <col:14, col:34>
| | |   |   `-TextComment 0x1afced8cf68 <col:14, col:34> Text=" Sort any iteratable."
| | |   |-ParagraphComment 0x1afced8cfd8 <line:358:7>
| | |   | `-TextComment 0x1afced8cfb0 <col:7> Text=" "
| | |   |-TParamCommandComment 0x1afced8cff8 <col:8, line:359:7> Param="T"
| | |   | `-ParagraphComment 0x1afced8d078 <col:7>
| | |   |   `-TextComment 0x1afced8d050 <col:7> Text=" "
| | |   |-TParamCommandComment 0x1afced8d098 <col:8, line:360:7> Param="ElementType"
| | |   | `-ParagraphComment 0x1afced8d120 <col:7>
| | |   |   `-TextComment 0x1afced8d0f8 <col:7> Text=" "
| | |   |-ParamCommandComment 0x1afced8d140 <col:8, line:361:7> [in] implicitly Param="_array" ParamIndex=0
| | |   | `-ParagraphComment 0x1afced8d1b8 <col:7>
| | |   |   `-TextComment 0x1afced8d190 <col:7> Text=" "
| | |   `-ParamCommandComment 0x1afced8d1d8 <col:8, line:362:5> [in] implicitly Param="_direction" ParamIndex=2
| | |     `-ParagraphComment 0x1afced912a0 <col:1, col:5>
| | |       `-TextComment 0x1afced8d230 <col:1, col:5> Text="     "
| | `-FullComment 0x1afced8ce98 <line:356:7, line:362:5>
| |   |-ParagraphComment 0x1afced8caf8 <line:356:7>
| |   | `-TextComment 0x1afced8cad0 <col:7> Text=" "
| |   |-BlockCommandComment 0x1afced8cb18 <col:8, col:34> Name="brief"
| |   | `-ParagraphComment 0x1afced8cb68 <col:14, col:34>
| |   |   `-TextComment 0x1afced8cb40 <col:14, col:34> Text=" Sort any iteratable."
| |   |-ParagraphComment 0x1afced8cbb0 <line:358:7>
| |   | `-TextComment 0x1afced8cb88 <col:7> Text=" "
| |   |-TParamCommandComment 0x1afced8cbd0 <col:8, line:359:7> Param="T" Position=<0>
| |   | `-ParagraphComment 0x1afced8cc58 <col:7>
| |   |   `-TextComment 0x1afced8cc30 <col:7> Text=" "
| |   |-TParamCommandComment 0x1afced8cc78 <col:8, line:360:7> Param="ElementType" Position=<1>
| |   | `-ParagraphComment 0x1afced8cd08 <col:7>
| |   |   `-TextComment 0x1afced8cce0 <col:7> Text=" "
| |   |-ParamCommandComment 0x1afced8cd28 <col:8, line:361:7> [in] implicitly Param="_array" ParamIndex=0
| |   | `-ParagraphComment 0x1afced8cda0 <col:7>
| |   |   `-TextComment 0x1afced8cd78 <col:7> Text=" "
| |   `-ParamCommandComment 0x1afced8cdc0 <col:8, line:362:5> [in] implicitly Param="_direction" ParamIndex=2
| |     `-ParagraphComment 0x1afced8ce40 <col:1, col:5>
| |       `-TextComment 0x1afced8ce18 <col:1, col:5> Text="     "
| |-FunctionTemplateDecl 0x1afce0fcc10 <line:374:5, line:375:132> col:23 invalid sort
| | |-TemplateTypeParmDecl 0x1afce0ff4e0 <line:374:14, col:23> col:23 referenced typename depth 0 index 0 T
| | |-TemplateTypeParmDecl 0x1afce0ff688 <col:26, col:58> col:35 referenced typename depth 0 index 1 ElementType
| | | `-TemplateArgument type 'Type<T>::RemovedPointerType'
| | |   `-DependentNameType 0x1afce0ff610 'Type<T>::RemovedPointerType' dependent
| | |-FunctionDecl 0x1afce0fcb70 <./src\Core/Defines.h:54:25, ./src\Core/Helpers.h:375:132> col:23 invalid sort 'void (T, const u32 &, const int &)' inline
| | | |-ParmVarDecl 0x1afce0ff748 <col:28, col:30> col:30 _array 'T'
| | | |-ParmVarDecl 0x1afce0fc7e0 <col:38, col:49> col:49 _size 'const u32 &'
| | | |-ParmVarDecl 0x1afce0fca38 <col:56, col:123> col:123 invalid _callback 'const int &'
| | | |-AlwaysInlineAttr 0x1afce0fcc80 <./src\Core/Defines.h:54:25> __forceinline
| | | `-FullComment 0x1afced91bb0 <./src\Core/Helpers.h:367:7, line:373:5>
| | |   |-ParagraphComment 0x1afced91820 <line:367:7>
| | |   | `-TextComment 0x1afced917f8 <col:7> Text=" "
| | |   |-BlockCommandComment 0x1afced91840 <col:8, col:55> Name="brief"
| | |   | `-ParagraphComment 0x1afced91890 <col:14, col:55>
| | |   |   `-TextComment 0x1afced91868 <col:14, col:55> Text=" Sort any iteratable with custom callback."
| | |   |-ParagraphComment 0x1afced918d8 <line:369:7>
| | |   | `-TextComment 0x1afced918b0 <col:7> Text=" "
| | |   |-TParamCommandComment 0x1afced918f8 <col:8, line:370:7> Param="T"
| | |   | `-ParagraphComment 0x1afced91978 <col:7>
| | |   |   `-TextComment 0x1afced91950 <col:7> Text=" "
| | |   |-TParamCommandComment 0x1afced91998 <col:8, line:371:7> Param="ElementType"
| | |   | `-ParagraphComment 0x1afced91a20 <col:7>
| | |   |   `-TextComment 0x1afced919f8 <col:7> Text=" "
| | |   |-ParamCommandComment 0x1afced91a40 <col:8, line:372:7> [in] implicitly Param="_array" ParamIndex=0
| | |   | `-ParagraphComment 0x1afced91ab8 <col:7>
| | |   |   `-TextComment 0x1afced91a90 <col:7> Text=" "
| | |   `-ParamCommandComment 0x1afced91ad8 <col:8, line:373:5> [in] implicitly Param="_callback" ParamIndex=2
| | |     `-ParagraphComment 0x1afced91b58 <col:1, col:5>
| | |       `-TextComment 0x1afced91b30 <col:1, col:5> Text="     "
| | `-FullComment 0x1afced91798 <line:367:7, line:373:5>
| |   |-ParagraphComment 0x1afced913f8 <line:367:7>
| |   | `-TextComment 0x1afced913d0 <col:7> Text=" "
| |   |-BlockCommandComment 0x1afced91418 <col:8, col:55> Name="brief"
| |   | `-ParagraphComment 0x1afced91468 <col:14, col:55>
| |   |   `-TextComment 0x1afced91440 <col:14, col:55> Text=" Sort any iteratable with custom callback."
| |   |-ParagraphComment 0x1afced914b0 <line:369:7>
| |   | `-TextComment 0x1afced91488 <col:7> Text=" "
| |   |-TParamCommandComment 0x1afced914d0 <col:8, line:370:7> Param="T" Position=<0>
| |   | `-ParagraphComment 0x1afced91558 <col:7>
| |   |   `-TextComment 0x1afced91530 <col:7> Text=" "
| |   |-TParamCommandComment 0x1afced91578 <col:8, line:371:7> Param="ElementType" Position=<1>
| |   | `-ParagraphComment 0x1afced91608 <col:7>
| |   |   `-TextComment 0x1afced915e0 <col:7> Text=" "
| |   |-ParamCommandComment 0x1afced91628 <col:8, line:372:7> [in] implicitly Param="_array" ParamIndex=0
| |   | `-ParagraphComment 0x1afced916a0 <col:7>
| |   |   `-TextComment 0x1afced91678 <col:7> Text=" "
| |   `-ParamCommandComment 0x1afced916c0 <col:8, line:373:5> [in] implicitly Param="_callback" ParamIndex=2
| |     `-ParagraphComment 0x1afced91740 <col:1, col:5>
| |       `-TextComment 0x1afced91718 <col:1, col:5> Text="     "
| `-FunctionTemplateDecl 0x1afce0fd050 <line:380:5, line:381:40> col:23 swap
|   |-TemplateTypeParmDecl 0x1afce0fcd08 <line:380:14, col:23> col:23 referenced typename depth 0 index 0 T
|   |-FunctionDecl 0x1afce0fcfb0 <./src\Core/Defines.h:54:25, ./src\Core/Helpers.h:381:40> col:23 swap 'void (T &, T &)' inline
|   | |-ParmVarDecl 0x1afce0fce20 <col:28, col:31> col:31 _a 'T &'
|   | |-ParmVarDecl 0x1afce0fce98 <col:35, col:38> col:38 _b 'T &'
|   | |-AlwaysInlineAttr 0x1afce0fd0b8 <./src\Core/Defines.h:54:25> __forceinline
|   | `-FullComment 0x1afced91e00 <./src\Core/Helpers.h:378:7, col:38>
|   |   |-ParagraphComment 0x1afced91d60 <col:7>
|   |   | `-TextComment 0x1afced91d38 <col:7> Text=" "
|   |   `-BlockCommandComment 0x1afced91d80 <col:8, col:38> Name="brief"
|   |     `-ParagraphComment 0x1afced91dd0 <col:14, col:38>
|   |       `-TextComment 0x1afced91da8 <col:14, col:38> Text=" Swap two variable value."
|   `-FullComment 0x1afced91cd8 <col:7, col:38>
|     |-ParagraphComment 0x1afced91c38 <col:7>
|     | `-TextComment 0x1afced91c10 <col:7> Text=" "
|     `-BlockCommandComment 0x1afced91c58 <col:8, col:38> Name="brief"
|       `-ParagraphComment 0x1afced91ca8 <col:14, col:38>
|         `-TextComment 0x1afced91c80 <col:14, col:38> Text=" Swap two variable value."
|-NamespaceDecl 0x1afce0fd218 prev 0x1afce0f37b0 <./src\Core/Helpers.inl:31:1, line:178:1> line:31:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| |-NamespaceDecl 0x1afce0fd288 <line:33:5, line:124:5> line:33:15 Private
| | |-FunctionTemplateDecl 0x1afce0fd738 <line:35:9, line:36:97> col:26 quickSortPartitionAscending
| | | |-TemplateTypeParmDecl 0x1afce0fd2f8 <line:35:18, col:27> col:27 referenced typename depth 0 index 0 T
| | | |-TemplateTypeParmDecl 0x1afce0fd380 <col:30, col:39> col:39 typename depth 0 index 1 ElementType
| | | `-FunctionDecl 0x1afce0fd698 <./src\Core/Defines.h:54:25, ./src\Core/Helpers.inl:36:97> col:26 quickSortPartitionAscending 'int (T, const i32 &, const i32 &)' inline
| | |   |-ParmVarDecl 0x1afce0fd438 <col:54, col:56> col:56 _array 'T'
| | |   |-ParmVarDecl 0x1afce0fd4e0 <col:64, col:75> col:75 _low 'const i32 &'
| | |   |-ParmVarDecl 0x1afce0fd558 <col:81, col:92> col:92 _high 'const i32 &'
| | |   |-<<<NULL>>>
| | |   `-AlwaysInlineAttr 0x1afce0fd7a8 <./src\Core/Defines.h:54:25> __forceinline
| | |-FunctionTemplateDecl 0x1afce0fdca0 <./src\Core/Helpers.inl:54:9, line:55:76> col:14 quickSortAscending
| | | |-TemplateTypeParmDecl 0x1afce0fd898 <line:54:18, col:27> col:27 referenced typename depth 0 index 0 T
| | | |-TemplateTypeParmDecl 0x1afce0fd920 <col:30, col:39> col:39 typename depth 0 index 1 ElementType
| | | `-FunctionDecl 0x1afce0fdc00 <line:55:9, col:76> col:14 quickSortAscending 'void (T, const i32 &, const i32 &)'
| | |   |-ParmVarDecl 0x1afce0fd9d8 <col:33, col:35> col:35 _array 'T'
| | |   |-ParmVarDecl 0x1afce0fda50 <col:43, col:54> col:54 _low 'const i32 &'
| | |   |-ParmVarDecl 0x1afce0fdac8 <col:60, col:71> col:71 _high 'const i32 &'
| | |   `-<<<NULL>>>
| | |-FunctionTemplateDecl 0x1afce0fe148 <line:65:9, line:66:98> col:26 quickSortPartitionDescending
| | | |-TemplateTypeParmDecl 0x1afce0fdd88 <line:65:18, col:27> col:27 referenced typename depth 0 index 0 T
| | | |-TemplateTypeParmDecl 0x1afce0fde10 <col:30, col:39> col:39 typename depth 0 index 1 ElementType
| | | `-FunctionDecl 0x1afce0fe0a8 <./src\Core/Defines.h:54:25, ./src\Core/Helpers.inl:66:98> col:26 quickSortPartitionDescending 'int (T, const i32 &, const i32 &)' inline
| | |   |-ParmVarDecl 0x1afce0fdec8 <col:55, col:57> col:57 _array 'T'
| | |   |-ParmVarDecl 0x1afce0fdf40 <col:65, col:76> col:76 _low 'const i32 &'
| | |   |-ParmVarDecl 0x1afce0fdfb8 <col:82, col:93> col:93 _high 'const i32 &'
| | |   |-<<<NULL>>>
| | |   `-AlwaysInlineAttr 0x1afce0fe1b8 <./src\Core/Defines.h:54:25> __forceinline
| | |-FunctionTemplateDecl 0x1afce0fe640 <./src\Core/Helpers.inl:84:9, line:85:77> col:14 quickSortDescending
| | | |-TemplateTypeParmDecl 0x1afce0fe288 <line:84:18, col:27> col:27 referenced typename depth 0 index 0 T
| | | |-TemplateTypeParmDecl 0x1afce0fe310 <col:30, col:39> col:39 typename depth 0 index 1 ElementType
| | | `-FunctionDecl 0x1afce0fe5a0 <line:85:9, col:77> col:14 quickSortDescending 'void (T, const i32 &, const i32 &)'
| | |   |-ParmVarDecl 0x1afce0fe3c8 <col:34, col:36> col:36 _array 'T'
| | |   |-ParmVarDecl 0x1afce0fe440 <col:44, col:55> col:55 _low 'const i32 &'
| | |   |-ParmVarDecl 0x1afce0fe4b8 <col:61, col:72> col:72 _high 'const i32 &'
| | |   `-<<<NULL>>>
| | |-FunctionTemplateDecl 0x1afce0ffdb8 <line:95:9, line:96:172> col:26 invalid quickSortPartitionCustom
| | | |-TemplateTypeParmDecl 0x1afce0fe728 <line:95:18, col:27> col:27 referenced typename depth 0 index 0 T
| | | |-TemplateTypeParmDecl 0x1afce0ff810 <col:30, col:39> col:39 referenced typename depth 0 index 1 ElementType
| | | `-FunctionDecl 0x1afce0ffd18 <./src\Core/Defines.h:54:25, ./src\Core/Helpers.inl:96:172> col:26 invalid quickSortPartitionCustom 'int (T, const i32 &, const i32 &, const int &)' inline
| | |   |-ParmVarDecl 0x1afce0ff8c8 <col:51, col:53> col:53 _array 'T'
| | |   |-ParmVarDecl 0x1afce0ff940 <col:61, col:72> col:72 _low 'const i32 &'
| | |   |-ParmVarDecl 0x1afce0ff9b8 <col:78, col:89> col:89 _high 'const i32 &'
| | |   |-ParmVarDecl 0x1afce0ffbc8 <col:96, col:163> col:163 invalid _callback 'const int &'
| | |   |-<<<NULL>>>
| | |   `-AlwaysInlineAttr 0x1afce0ffe30 <./src\Core/Defines.h:54:25> __forceinline
| | `-FunctionTemplateDecl 0x1afce1004b0 <./src\Core/Helpers.inl:114:9, line:115:151> col:14 invalid quickSortCustom
| |   |-TemplateTypeParmDecl 0x1afce0ffe88 <line:114:18, col:27> col:27 referenced typename depth 0 index 0 T
| |   |-TemplateTypeParmDecl 0x1afce0fff10 <col:30, col:39> col:39 referenced typename depth 0 index 1 ElementType
| |   `-FunctionDecl 0x1afce100410 <line:115:9, col:151> col:14 invalid quickSortCustom 'void (T, const i32 &, const i32 &, const int &)'
| |     |-ParmVarDecl 0x1afce0fffc8 <col:30, col:32> col:32 _array 'T'
| |     |-ParmVarDecl 0x1afce100040 <col:40, col:51> col:51 _low 'const i32 &'
| |     |-ParmVarDecl 0x1afce1000b8 <col:57, col:68> col:68 _high 'const i32 &'
| |     |-ParmVarDecl 0x1afce1002c8 <col:75, col:142> col:142 invalid _callback 'const int &'
| |     `-<<<NULL>>>
| |-FunctionTemplateDecl 0x1afce100780 prev 0x1afce0f3c30 <line:126:5, line:127:35> col:20 max
| | |-TemplateTypeParmDecl 0x1afce100528 <line:126:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1afce1006e0 prev 0x1afce0f3b90 <./src\Core/Defines.h:54:25, ./src\Core/Helpers.inl:127:35> col:20 max 'T (const T &)' inline
| |   |-ParmVarDecl 0x1afce100610 <col:24, col:33> col:33 _a 'const T &'
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afce1007e0 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afce0f8c70 <./src\Core/Helpers.inl:132:5, line:133:69> col:20 max
| | |-TemplateTypeParmDecl 0x1afce0f87d0 <line:132:14, col:23> col:23 referenced typename depth 0 index 0 T
| | |-TemplateTypeParmDecl 0x1afce0f8850 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... T2
| | `-FunctionDecl 0x1afce0f8bd0 <./src\Core/Defines.h:54:25, ./src\Core/Helpers.inl:133:69> col:20 max 'T (const T &, const T &, const T2 &...)' inline
| |   |-ParmVarDecl 0x1afce0f8940 <col:24, col:33> col:33 _a 'const T &'
| |   |-ParmVarDecl 0x1afce0f89b8 <col:37, col:46> col:46 _b 'const T &'
| |   |-ParmVarDecl 0x1afce0f8a98 <col:50, col:63> col:63 _other 'const T2 &...' pack
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afce0f8ce0 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afce0f9000 prev 0x1afce0f45c0 <./src\Core/Helpers.inl:138:5, line:139:35> col:20 min
| | |-TemplateTypeParmDecl 0x1afce0f8db0 <line:138:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1afce0f8f60 prev 0x1afce0f4520 <./src\Core/Defines.h:54:25, ./src\Core/Helpers.inl:139:35> col:20 min 'T (const T &)' inline
| |   |-ParmVarDecl 0x1afce0f8e90 <col:24, col:33> col:33 _a 'const T &'
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afce0f9060 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afce0f9510 <./src\Core/Helpers.inl:144:5, line:145:69> col:20 min
| | |-TemplateTypeParmDecl 0x1afce0f90b8 <line:144:14, col:23> col:23 referenced typename depth 0 index 0 T
| | |-TemplateTypeParmDecl 0x1afce0f9140 <col:26, col:38> col:38 referenced typename depth 0 index 1 ... T2
| | `-FunctionDecl 0x1afce0f9470 <./src\Core/Defines.h:54:25, ./src\Core/Helpers.inl:145:69> col:20 min 'T (const T &, const T &, const T2 &...)' inline
| |   |-ParmVarDecl 0x1afce0f9230 <col:24, col:33> col:33 _a 'const T &'
| |   |-ParmVarDecl 0x1afce0f92a8 <col:37, col:46> col:46 _b 'const T &'
| |   |-ParmVarDecl 0x1afce0f9388 <col:50, col:63> col:63 _other 'const T2 &...' pack
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afce0f9580 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afce103ad0 prev 0x1afce0ff370 <./src\Core/Helpers.inl:150:5, line:151:87> col:23 sort
| | |-TemplateTypeParmDecl 0x1afce0f9650 <line:150:14, col:23> col:23 referenced typename depth 0 index 0 T
| | |-TemplateTypeParmDecl 0x1afce0f96d0 <col:26, col:35> col:35 typename depth 0 index 1 ElementType
| | | `-TemplateArgument type 'Type<T>::RemovedPointerType'
| | |   |-inherited from TemplateTypeParm 0x1afce0fef48 'ElementType'
| | |   `-DependentNameType 0x1afce0feed0 'Type<T>::RemovedPointerType' dependent
| | `-FunctionDecl 0x1afce103a30 prev 0x1afce0ff2d0 <./src\Core/Defines.h:54:25, ./src\Core/Helpers.inl:151:87> col:23 sort 'void (T, const u32 &, const Michka::SortDirection &)' inline
| |   |-ParmVarDecl 0x1afce103850 <col:28, col:30> col:30 _array 'T'
| |   |-ParmVarDecl 0x1afce1038c8 <col:38, col:49> col:49 _size 'const u32 &'
| |   |-ParmVarDecl 0x1afce103940 <col:56, col:77> col:77 _direction 'const Michka::SortDirection &'
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afce103b40 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afce1040f0 <./src\Core/Helpers.inl:165:5, line:166:132> col:23 invalid sort
| | |-TemplateTypeParmDecl 0x1afce103b98 <line:165:14, col:23> col:23 referenced typename depth 0 index 0 T
| | |-TemplateTypeParmDecl 0x1afce103c20 <col:26, col:35> col:35 referenced typename depth 0 index 1 ElementType
| | `-FunctionDecl 0x1afce104050 <./src\Core/Defines.h:54:25, ./src\Core/Helpers.inl:166:132> col:23 invalid sort 'void (T, const u32 &, const int &)' inline
| |   |-ParmVarDecl 0x1afce103cd8 <col:28, col:30> col:30 _array 'T'
| |   |-ParmVarDecl 0x1afce103d50 <col:38, col:49> col:49 _size 'const u32 &'
| |   |-ParmVarDecl 0x1afce103f68 <col:56, col:123> col:123 invalid _callback 'const int &'
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afce104160 <./src\Core/Defines.h:54:25> __forceinline
| `-FunctionTemplateDecl 0x1afce104490 prev 0x1afce0fd050 <./src\Core/Helpers.inl:171:5, line:172:40> col:23 swap
|   |-TemplateTypeParmDecl 0x1afce1041b8 <line:171:14, col:23> col:23 referenced typename depth 0 index 0 T
|   `-FunctionDecl 0x1afce1043f0 prev 0x1afce0fcfb0 <./src\Core/Defines.h:54:25, ./src\Core/Helpers.inl:172:40> col:23 swap 'void (T &, T &)' inline
|     |-ParmVarDecl 0x1afce1042a0 <col:28, col:31> col:31 _a 'T &'
|     |-ParmVarDecl 0x1afce104318 <col:35, col:38> col:38 _b 'T &'
|     |-<<<NULL>>>
|     `-AlwaysInlineAttr 0x1afce1044f8 <./src\Core/Defines.h:54:25> __forceinline
|-NamespaceDecl 0x1afce104610 prev 0x1afce0fd218 <./src\Core/Container/String.h:34:1, line:474:1> line:34:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| |-ClassTemplateDecl 0x1afce1047b0 <line:36:5, line:37:11> col:11 Vector
| | |-TemplateTypeParmDecl 0x1afce104680 <line:36:14, col:23> col:23 typename depth 0 index 0 T
| | `-CXXRecordDecl 0x1afce104720 <line:37:5, col:11> col:11 class Vector
| |-ClassTemplateDecl 0x1afce101b10 prev 0x1afce07de50 <line:39:5, line:466:5> line:40:11 StringTemplate
| | |-TemplateTypeParmDecl 0x1afce1019e0 <line:39:14, col:23> col:23 referenced typename depth 0 index 0 T
| | |-CXXRecordDecl 0x1afce101a80 prev 0x1afce07ddc0 <line:40:5, line:466:5> line:40:11 class StringTemplate definition
| | | |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| | | | |-DefaultConstructor exists non_trivial user_provided
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | | |-MoveConstructor exists non_trivial user_declared
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | | |-MoveAssignment exists non_trivial user_declared
| | | | `-Destructor non_trivial user_declared
| | | |-CXXRecordDecl 0x1afce101bd0 <col:5, col:11> col:11 implicit referenced class StringTemplate
| | | |-AccessSpecDecl 0x1afce101c60 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| | | |-TypedefDecl 0x1afce101d38 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | | | |-BuiltinType 0x1afcc6e38c0 'bool'
| | | | `-AnnotateAttr 0x1afce101d90 <line:271:39, col:60> ""
| | | |-CXXMethodDecl 0x1afce101e88 <line:273:5, col:45> col:31 classFileName 'const char *()' static inline
| | | | `-<<<NULL>>>
| | | |-CXXMethodDecl 0x1afce101f88 <<scratch space>:7:1, ./src\Core/Helpers.h:277:62> <scratch space>:7:1 invalid __MICHKA_STRUCT_GENERATED_BODY_42 'int ()'
| | | |-AccessSpecDecl 0x1afce102028 <./src\Core/Container/String.h:43:5, col:11> col:5 public
| | | |-TypedefDecl 0x1afce102118 <line:44:9, col:38> col:38 String8 'StringTemplate<char>':'Michka::StringTemplate<char>'
| | | | `-TemplateSpecializationType 0x1afce102070 'StringTemplate<char>' sugar StringTemplate
| | | |   |-TemplateArgument type 'char'
| | | |   | `-BuiltinType 0x1afcc6e38e0 'char'
| | | |   `-RecordType 0x1afce07e140 'Michka::StringTemplate<char>'
| | | |     `-ClassTemplateSpecialization 0x1afce07e060 'StringTemplate'
| | | |-TypedefDecl 0x1afce102228 <line:45:9, col:41> col:41 referenced String 'StringTemplate<wchar_t>':'Michka::StringTemplate<wchar_t>'
| | | | `-TemplateSpecializationType 0x1afce102180 'StringTemplate<wchar_t>' sugar StringTemplate
| | | |   |-TemplateArgument type 'wchar_t'
| | | |   | `-BuiltinType 0x1afcc6e3e20 'wchar_t'
| | | |   `-RecordType 0x1afce07e360 'Michka::StringTemplate<wchar_t>'
| | | |     `-ClassTemplateSpecialization 0x1afce07e280 'StringTemplate'
| | | |-TypedefDecl 0x1afce102338 <line:46:9, col:42> col:42 String32 'StringTemplate<char32_t>':'Michka::StringTemplate<char32_t>'
| | | | `-TemplateSpecializationType 0x1afce102290 'StringTemplate<char32_t>' sugar StringTemplate
| | | |   |-TemplateArgument type 'char32_t'
| | | |   | `-BuiltinType 0x1afcc6e3e80 'char32_t'
| | | |   `-RecordType 0x1afce0b9630 'Michka::StringTemplate<char32_t>'
| | | |     `-ClassTemplateSpecialization 0x1afce0b9548 'StringTemplate'
| | | |-TypedefDecl 0x1afce1023d0 <line:47:9, col:20> col:20 referenced Iterator 'T *'
| | | | `-PointerType 0x1afce102390 'T *' dependent
| | | |   `-TemplateTypeParmType 0x1afce101a30 'T' dependent depth 0 index 0
| | | |     `-TemplateTypeParm 0x1afce1019e0 'T'
| | | |-TypedefDecl 0x1afce1024a0 <line:48:9, col:26> col:26 referenced ConstIterator 'const T *'
| | | | `-PointerType 0x1afce102460 'const T *' dependent
| | | |   `-QualType 0x1afce101a31 'const T' const
| | | |     `-TemplateTypeParmType 0x1afce101a30 'T' dependent depth 0 index 0
| | | |       `-TemplateTypeParm 0x1afce1019e0 'T'
| | | |-AccessSpecDecl 0x1afce1024f8 <line:51:5, col:11> col:5 public
| | | |-CXXConstructorDecl 0x1afce102560 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:52:37> col:22 StringTemplate<T> 'void ()' inline
| | | | `-AlwaysInlineAttr 0x1afce102608 <./src\Core/Defines.h:54:25> __forceinline
| | | |-FunctionTemplateDecl 0x1afce102948 <./src\Core/Container/String.h:53:9, line:54:51> col:22 StringTemplate<T>
| | | | |-TemplateTypeParmDecl 0x1afce102660 <line:53:18, col:27> col:27 referenced typename depth 1 index 0 T2
| | | | `-CXXConstructorDecl 0x1afce1028a0 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:54:51> col:22 StringTemplate<T> 'void (const T2 *)' inline
| | | |   |-ParmVarDecl 0x1afce102770 <col:37, col:47> col:47 _str 'const T2 *'
| | | |   `-AlwaysInlineAttr 0x1afce1029a8 <./src\Core/Defines.h:54:25> __forceinline
| | | |-CXXConstructorDecl 0x1afce102c30 <col:25, ./src\Core/Container/String.h:55:71> col:22 StringTemplate<T> 'void (const StringTemplate<char> &)' inline
| | | | |-ParmVarDecl 0x1afce102b28 <col:37, col:65> col:65 _other 'const StringTemplate<char> &'
| | | | `-AlwaysInlineAttr 0x1afce102ce0 <./src\Core/Defines.h:54:25> __forceinline
| | | |-CXXConstructorDecl 0x1afce102f70 <col:25, ./src\Core/Container/String.h:56:74> col:22 StringTemplate<T> 'void (const StringTemplate<wchar_t> &)' inline
| | | | |-ParmVarDecl 0x1afce102e68 <col:37, col:68> col:68 _other 'const StringTemplate<wchar_t> &'
| | | | `-AlwaysInlineAttr 0x1afce103020 <./src\Core/Defines.h:54:25> __forceinline
| | | |-CXXConstructorDecl 0x1afce1032b0 <col:25, ./src\Core/Container/String.h:57:75> col:22 StringTemplate<T> 'void (const StringTemplate<char32_t> &)' inline
| | | | |-ParmVarDecl 0x1afce1031a8 <col:37, col:69> col:69 _other 'const StringTemplate<char32_t> &'
| | | | `-AlwaysInlineAttr 0x1afce103360 <./src\Core/Defines.h:54:25> __forceinline
| | | |-CXXConstructorDecl 0x1afce1035f0 <col:25, ./src\Core/Container/String.h:58:63> col:22 StringTemplate<T> 'void (StringTemplate<T> &&)' inline
| | | | |-ParmVarDecl 0x1afce1034e8 <col:37, col:57> col:57 _other 'StringTemplate<T> &&'
| | | | `-AlwaysInlineAttr 0x1afce1036a0 <./src\Core/Defines.h:54:25> __forceinline
| | | |-CXXDestructorDecl 0x1afce103740 <col:25, ./src\Core/Container/String.h:59:38> col:22 ~StringTemplate<T> 'void ()' inline
| | | | `-AlwaysInlineAttr 0x1afce1037f0 <./src\Core/Defines.h:54:25> __forceinline
| | | |-CXXMethodDecl 0x1afce104a58 <col:25, ./src\Core/Container/String.h:66:47> col:41 clear 'StringTemplate<T> &()' inline
| | | | |-AlwaysInlineAttr 0x1afce104af8 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced92158 <./src\Core/Container/String.h:62:11, line:64:23>
| | | |   |-ParagraphComment 0x1afced91ff0 <line:62:11>
| | | |   | `-TextComment 0x1afced91fc8 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced92010 <col:12, col:31> Name="brief"
| | | |   | `-ParagraphComment 0x1afced92060 <col:18, col:31>
| | | |   |   `-TextComment 0x1afced92038 <col:18, col:31> Text=" Clear string."
| | | |   |-ParagraphComment 0x1afced920a8 <line:64:11>
| | | |   | `-TextComment 0x1afced92080 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced920c8 <col:12, col:23> Name="return"
| | | |     `-ParagraphComment 0x1afced92118 <col:19, col:23>
| | | |       `-TextComment 0x1afced920f0 <col:19, col:23> Text=" Self"
| | | |-CXXMethodDecl 0x1afce104c30 <line:71:9, col:24> col:18 begin 'Michka::StringTemplate::Iterator ()'
| | | | `-FullComment 0x1afced92280 <line:69:11, col:33>
| | | |   |-ParagraphComment 0x1afced921e0 <col:11>
| | | |   | `-TextComment 0x1afced921b8 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced92200 <col:12, col:33> Name="brief"
| | | |     `-ParagraphComment 0x1afced92250 <col:18, col:33>
| | | |       `-TextComment 0x1afced92228 <col:18, col:33> Text=" Iterator begin."
| | | |-CXXMethodDecl 0x1afce104db0 <line:72:9, col:31> col:23 begin 'Michka::StringTemplate::ConstIterator () const'
| | | |-CXXMethodDecl 0x1afce104ed0 <line:77:9, col:25> col:18 cstr 'const T *() const'
| | | | `-FullComment 0x1afced923a8 <line:75:11, col:45>
| | | |   |-ParagraphComment 0x1afced92308 <col:11>
| | | |   | `-TextComment 0x1afced922e0 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced92328 <col:12, col:45> Name="brief"
| | | |     `-ParagraphComment 0x1afced92378 <col:18, col:45>
| | | |       `-TextComment 0x1afced92350 <col:18, col:45> Text=" Get string as C characters."
| | | |-CXXMethodDecl 0x1afce104fc0 <line:82:9, col:22> col:18 end 'Michka::StringTemplate::Iterator ()'
| | | | `-FullComment 0x1afced924d0 <line:80:11, col:31>
| | | |   |-ParagraphComment 0x1afced92430 <col:11>
| | | |   | `-TextComment 0x1afced92408 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced92450 <col:12, col:31> Name="brief"
| | | |     `-ParagraphComment 0x1afced924a0 <col:18, col:31>
| | | |       `-TextComment 0x1afced92478 <col:18, col:31> Text=" Iterator end."
| | | |-CXXMethodDecl 0x1afce105080 <line:83:9, col:29> col:23 end 'Michka::StringTemplate::ConstIterator () const'
| | | |-CXXMethodDecl 0x1afce105320 <line:92:9, col:63> col:13 find 'u32 (const T &, const u32 &) const'
| | | | |-ParmVarDecl 0x1afce105190 <col:18, col:27> col:27 _character 'const T &'
| | | | |-ParmVarDecl 0x1afce105208 <col:39, col:60> col:50 _offset 'const u32 &' cinit
| | | | | `-ExprWithCleanups 0x1afcebf1690 <col:60> 'const u32':'const unsigned int' lvalue
| | | | |   `-MaterializeTemporaryExpr 0x1afcebf1678 <col:60> 'const u32':'const unsigned int' lvalue
| | | | |     `-ImplicitCastExpr 0x1afcebf1660 <col:60> 'const u32':'const unsigned int' <IntegralCast>
| | | | |       `-IntegerLiteral 0x1afcebf1638 <col:60> 'int' 0
| | | | `-FullComment 0x1afced92858 <line:86:11, line:90:92>
| | | |   |-ParagraphComment 0x1afced92558 <line:86:11>
| | | |   | `-TextComment 0x1afced92530 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced92578 <col:12, col:45> Name="brief"
| | | |   | `-ParagraphComment 0x1afced925c8 <col:18, col:45>
| | | |   |   `-TextComment 0x1afced925a0 <col:18, col:45> Text=" Find a character in string."
| | | |   |-ParagraphComment 0x1afced92610 <line:88:11>
| | | |   | `-TextComment 0x1afced925e8 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced92630 <col:12, line:89:11> [in] implicitly Param="_character" ParamIndex=0
| | | |   | `-ParagraphComment 0x1afced926b0 <col:11>
| | | |   |   `-TextComment 0x1afced92688 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced926d0 <col:12, line:90:11> [in] implicitly Param="_offset" ParamIndex=1
| | | |   | `-ParagraphComment 0x1afced92748 <col:11>
| | | |   |   `-TextComment 0x1afced92720 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced92768 <col:12, col:92> Name="return"
| | | |     `-ParagraphComment 0x1afced92808 <col:19, col:92>
| | | |       |-TextComment 0x1afced92790 <col:19, col:66> Text=" index of character. If not found StringTemplate"
| | | |       |-TextComment 0x1afced927b0 <col:67, col:68> Text="<T"
| | | |       `-TextComment 0x1afced927d0 <col:69, col:92> Text=">::notFound will return."
| | | |-CXXMethodDecl 0x1afce105520 <line:101:9, col:78> col:13 findLast 'u32 (const T &, const u32 &) const'
| | | | |-ParmVarDecl 0x1afce105410 <col:22, col:31> col:31 _character 'const T &'
| | | | |-ParmVarDecl 0x1afce105488 <col:43, col:73> col:54 _offset 'const u32 &' cinit
| | | | | `-DeclRefExpr 0x1afcebf1728 <col:64, col:73> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int'
| | | | `-FullComment 0x1afced92be0 <line:95:11, line:99:96>
| | | |   |-ParagraphComment 0x1afced928e0 <line:95:11>
| | | |   | `-TextComment 0x1afced928b8 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced92900 <col:12, col:56> Name="brief"
| | | |   | `-ParagraphComment 0x1afced92950 <col:18, col:56>
| | | |   |   `-TextComment 0x1afced92928 <col:18, col:56> Text=" Find a character from end to begining."
| | | |   |-ParagraphComment 0x1afced92998 <line:97:11>
| | | |   | `-TextComment 0x1afced92970 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced929b8 <col:12, line:98:11> [in] implicitly Param="_character" ParamIndex=0
| | | |   | `-ParagraphComment 0x1afced92a38 <col:11>
| | | |   |   `-TextComment 0x1afced92a10 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced92a58 <col:12, line:99:11> [in] implicitly Param="_offset" ParamIndex=1
| | | |   | `-ParagraphComment 0x1afced92ad0 <col:11>
| | | |   |   `-TextComment 0x1afced92aa8 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced92af0 <col:12, col:96> Name="return"
| | | |     `-ParagraphComment 0x1afced92b90 <col:19, col:96>
| | | |       |-TextComment 0x1afced92b18 <col:19, col:70> Text=" u32 index of character. If not found StringTemplate"
| | | |       |-TextComment 0x1afced92b38 <col:71, col:72> Text="<T"
| | | |       `-TextComment 0x1afced92b58 <col:73, col:96> Text=">::notFound will return."
| | | |-CXXMethodDecl 0x1afce107900 <line:110:9, col:76> col:13 find 'u32 (const StringTemplate<T> &, const u32 &) const'
| | | | |-ParmVarDecl 0x1afce105728 <col:18, col:43> col:43 _string 'const StringTemplate<T> &'
| | | | |-ParmVarDecl 0x1afce1057a0 <col:52, col:73> col:63 _offset 'const u32 &' cinit
| | | | | `-ExprWithCleanups 0x1afcebf17b0 <col:73> 'const u32':'const unsigned int' lvalue
| | | | |   `-MaterializeTemporaryExpr 0x1afcebf1798 <col:73> 'const u32':'const unsigned int' lvalue
| | | | |     `-ImplicitCastExpr 0x1afcebf1780 <col:73> 'const u32':'const unsigned int' <IntegralCast>
| | | | |       `-IntegerLiteral 0x1afcebf1758 <col:73> 'int' 0
| | | | `-FullComment 0x1afced92f60 <line:104:11, line:108:93>
| | | |   |-ParagraphComment 0x1afced92c68 <line:104:11>
| | | |   | `-TextComment 0x1afced92c40 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced92c88 <col:12, col:50> Name="brief"
| | | |   | `-ParagraphComment 0x1afced92cd8 <col:18, col:50>
| | | |   |   `-TextComment 0x1afced92cb0 <col:18, col:50> Text=" Find a sub string inside string."
| | | |   |-ParagraphComment 0x1afced92d20 <line:106:11>
| | | |   | `-TextComment 0x1afced92cf8 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced92d40 <col:12, line:107:11> [in] implicitly Param="_string" ParamIndex=0
| | | |   | `-ParagraphComment 0x1afced92db8 <col:11>
| | | |   |   `-TextComment 0x1afced92d90 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced92dd8 <col:12, line:108:11> [in] implicitly Param="_offset" ParamIndex=1
| | | |   | `-ParagraphComment 0x1afced92e50 <col:11>
| | | |   |   `-TextComment 0x1afced92e28 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced92e70 <col:12, col:93> Name="return"
| | | |     `-ParagraphComment 0x1afced92f10 <col:19, col:93>
| | | |       |-TextComment 0x1afced92e98 <col:19, col:67> Text=" u32 index of string. If not found StringTemplate"
| | | |       |-TextComment 0x1afced92eb8 <col:68, col:69> Text="<T"
| | | |       `-TextComment 0x1afced92ed8 <col:70, col:93> Text=">::notFound will return."
| | | |-CXXMethodDecl 0x1afce107c30 <line:119:9, col:91> col:13 findLast 'u32 (const StringTemplate<T> &, const u32 &) const'
| | | | |-ParmVarDecl 0x1afce107ad8 <col:22, col:47> col:47 _string 'const StringTemplate<T> &'
| | | | |-ParmVarDecl 0x1afce107b50 <col:56, col:86> col:67 _offset 'const u32 &' cinit
| | | | | `-DeclRefExpr 0x1afcebf1800 <col:77, col:86> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int'
| | | | `-FullComment 0x1afced8f2e0 <line:113:11, line:117:96>
| | | |   |-ParagraphComment 0x1afced92fe8 <line:113:11>
| | | |   | `-TextComment 0x1afced92fc0 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced93008 <col:12, col:68> Name="brief"
| | | |   | `-ParagraphComment 0x1afced93058 <col:18, col:68>
| | | |   |   `-TextComment 0x1afced93030 <col:18, col:68> Text=" Find a sub string inside string from end to begin."
| | | |   |-ParagraphComment 0x1afced930a0 <line:115:11>
| | | |   | `-TextComment 0x1afced93078 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced930c0 <col:12, line:116:11> [in] implicitly Param="_string" ParamIndex=0
| | | |   | `-ParagraphComment 0x1afced93138 <col:11>
| | | |   |   `-TextComment 0x1afced93110 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced93158 <col:12, line:117:11> [in] implicitly Param="_offset" ParamIndex=1
| | | |   | `-ParagraphComment 0x1afced931d0 <col:11>
| | | |   |   `-TextComment 0x1afced931a8 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced931f0 <col:12, col:96> Name="return"
| | | |     `-ParagraphComment 0x1afced8f290 <col:19, col:96>
| | | |       |-TextComment 0x1afced93218 <col:19, col:70> Text=" u32 index of character. If not found StringTemplate"
| | | |       |-TextComment 0x1afced93238 <col:71, col:72> Text="<T"
| | | |       `-TextComment 0x1afced93258 <col:73, col:96> Text=">::notFound will return."
| | | |-CXXMethodDecl 0x1afce107ee0 <line:126:9, col:62> col:34 fromUtf8 'StringTemplate<T> (const char *)' static
| | | | |-ParmVarDecl 0x1afce107db0 <col:43, col:55> col:55 _string 'const char *'
| | | | `-FullComment 0x1afced8f4f8 <line:122:11, line:125:9>
| | | |   |-ParagraphComment 0x1afced8f368 <line:122:11>
| | | |   | `-TextComment 0x1afced8f340 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced8f388 <col:12, col:57> Name="brief"
| | | |   | `-ParagraphComment 0x1afced8f3d8 <col:18, col:57>
| | | |   |   `-TextComment 0x1afced8f3b0 <col:18, col:57> Text=" Create string from utf8 encoded string."
| | | |   |-ParagraphComment 0x1afced8f420 <line:124:11>
| | | |   | `-TextComment 0x1afced8f3f8 <col:11> Text=" "
| | | |   `-ParamCommandComment 0x1afced8f440 <col:12, line:125:9> [in] implicitly Param="_string" ParamIndex=0
| | | |     `-ParagraphComment 0x1afced8f4b8 <col:1, col:9>
| | | |       `-TextComment 0x1afced8f490 <col:1, col:9> Text="         "
| | | |-CXXMethodDecl 0x1afce1081c0 <line:133:9, col:66> col:34 fromUtf16 'StringTemplate<T> (const wchar_t *)' static
| | | | |-ParmVarDecl 0x1afce108098 <col:44, col:59> col:59 _string 'const wchar_t *'
| | | | `-FullComment 0x1afced8f710 <line:129:11, line:132:9>
| | | |   |-ParagraphComment 0x1afced8f580 <line:129:11>
| | | |   | `-TextComment 0x1afced8f558 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced8f5a0 <col:12, col:57> Name="brief"
| | | |   | `-ParagraphComment 0x1afced8f5f0 <col:18, col:57>
| | | |   |   `-TextComment 0x1afced8f5c8 <col:18, col:57> Text=" Create string from utf8 encoded string."
| | | |   |-ParagraphComment 0x1afced8f638 <line:131:11>
| | | |   | `-TextComment 0x1afced8f610 <col:11> Text=" "
| | | |   `-ParamCommandComment 0x1afced8f658 <col:12, line:132:9> [in] implicitly Param="_string" ParamIndex=0
| | | |     `-ParagraphComment 0x1afced8f6d0 <col:1, col:9>
| | | |       `-TextComment 0x1afced8f6a8 <col:1, col:9> Text="         "
| | | |-CXXMethodDecl 0x1afce1084a0 <line:140:9, col:67> col:34 fromUtf32 'StringTemplate<T> (const char32_t *)' static
| | | | |-ParmVarDecl 0x1afce108378 <col:44, col:60> col:60 _string 'const char32_t *'
| | | | `-FullComment 0x1afced8f928 <line:136:11, line:139:9>
| | | |   |-ParagraphComment 0x1afced8f798 <line:136:11>
| | | |   | `-TextComment 0x1afced8f770 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced8f7b8 <col:12, col:58> Name="brief"
| | | |   | `-ParagraphComment 0x1afced8f808 <col:18, col:58>
| | | |   |   `-TextComment 0x1afced8f7e0 <col:18, col:58> Text=" Create string from utf32 encoded string."
| | | |   |-ParagraphComment 0x1afced8f850 <line:138:11>
| | | |   | `-TextComment 0x1afced8f828 <col:11> Text=" "
| | | |   `-ParamCommandComment 0x1afced8f870 <col:12, line:139:9> [in] implicitly Param="_string" ParamIndex=0
| | | |     `-ParagraphComment 0x1afced8f8e8 <col:1, col:9>
| | | |       `-TextComment 0x1afced8f8c0 <col:1, col:9> Text="         "
| | | |-CXXMethodDecl 0x1afce105870 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:147:104> col:40 getLeftTrimed 'StringTemplate<T> (const StringTemplate<T> &) const' inline
| | | | |-ParmVarDecl 0x1afce108708 <col:54, col:93> col:79 _characters 'const StringTemplate<T> &' cinit
| | | | | `-StringLiteral 0x1afcebf1830 <col:93> 'const char [5]' lvalue "\t\n\r "
| | | | |-AlwaysInlineAttr 0x1afce105918 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced8fb48 <./src\Core/Container/String.h:143:11, line:146:9>
| | | |   |-ParagraphComment 0x1afced8f9b0 <line:143:11>
| | | |   | `-TextComment 0x1afced8f988 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced8f9d0 <col:12, col:94> Name="brief"
| | | |   | `-ParagraphComment 0x1afced8fa20 <col:18, col:94>
| | | |   |   `-TextComment 0x1afced8f9f8 <col:18, col:94> Text=" Get copy of this with removed space (or any other character) from beginning."
| | | |   |-ParagraphComment 0x1afced8fa68 <line:145:11>
| | | |   | `-TextComment 0x1afced8fa40 <col:11> Text=" "
| | | |   `-ParamCommandComment 0x1afced8fa88 <col:12, line:146:9> [in] implicitly Param="_characters" ParamIndex=0
| | | |     `-ParagraphComment 0x1afced8fb08 <col:1, col:9>
| | | |       `-TextComment 0x1afced8fae0 <col:1, col:9> Text="         "
| | | |-CXXMethodDecl 0x1afce105a20 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:155:38> col:26 getLength 'u32 () const' inline
| | | | |-AlwaysInlineAttr 0x1afce105ac0 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced8fdd8 <./src\Core/Container/String.h:150:11, line:153:25>
| | | |   |-ParagraphComment 0x1afced8fbd0 <line:150:11>
| | | |   | `-TextComment 0x1afced8fba8 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced8fbf0 <col:12, col:38> Name="brief"
| | | |   | `-ParagraphComment 0x1afced8fc40 <col:18, col:38>
| | | |   |   `-TextComment 0x1afced8fc18 <col:18, col:38> Text=" Count of characters."
| | | |   |-ParagraphComment 0x1afced8fc88 <line:152:11>
| | | |   | `-TextComment 0x1afced8fc60 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced8fca8 <col:12, line:153:11> Name="sa"
| | | |   | `-ParagraphComment 0x1afced8fd20 <line:152:15, line:153:11>
| | | |   |   |-TextComment 0x1afced8fcd0 <line:152:15, col:22> Text=" getSize"
| | | |   |   `-TextComment 0x1afced8fcf0 <line:153:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced8fd40 <col:12, col:25> Name="return"
| | | |     `-ParagraphComment 0x1afced8fd90 <col:19, col:25>
| | | |       `-TextComment 0x1afced8fd68 <col:19, col:25> Text=" length"
| | | |-CXXMethodDecl 0x1afce106090 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:165:201> col:40 getReplaced 'StringTemplate<T> (const StringTemplate<T> &, const StringTemplate<T> &, const u32 &, const u32 &) const' inline
| | | | |-ParmVarDecl 0x1afce105cd8 <col:52, col:77> col:77 _find 'const StringTemplate<T> &'
| | | | |-ParmVarDecl 0x1afce105e38 <col:84, col:139> col:109 _replace 'const StringTemplate<T> &' cinit
| | | | | `-DeclRefExpr 0x1afcebf1918 <col:120, col:139> 'const StringTemplate<T>':'const StringTemplate<T>' lvalue Var 0x1afce10cdc8 'empty' 'const StringTemplate<T>':'const StringTemplate<T>'
| | | | |-ParmVarDecl 0x1afce105eb0 <col:146, col:166> col:157 _start 'const u32 &' cinit
| | | | | `-ExprWithCleanups 0x1afcebf19a0 <col:166> 'const u32':'const unsigned int' lvalue
| | | | |   `-MaterializeTemporaryExpr 0x1afcebf1988 <col:166> 'const u32':'const unsigned int' lvalue
| | | | |     `-ImplicitCastExpr 0x1afcebf1970 <col:166> 'const u32':'const unsigned int' <IntegralCast>
| | | | |       `-IntegerLiteral 0x1afcebf1948 <col:166> 'int' 0
| | | | |-ParmVarDecl 0x1afce105f28 <col:169, col:196> col:180 _end 'const u32 &' cinit
| | | | | `-DeclRefExpr 0x1afcebf19f0 <col:187, col:196> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int'
| | | | |-AlwaysInlineAttr 0x1afce106150 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced901b0 <./src\Core/Container/String.h:158:11, line:163:44>
| | | |   |-ParagraphComment 0x1afced8fe60 <line:158:11>
| | | |   | `-TextComment 0x1afced8fe38 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced8fe80 <col:12, col:107> Name="brief"
| | | |   | `-ParagraphComment 0x1afced8fed0 <col:18, col:107>
| | | |   |   `-TextComment 0x1afced8fea8 <col:18, col:107> Text=" Clone string, find a sub string and replace it with another substring and returns result."
| | | |   |-ParagraphComment 0x1afced8ff18 <line:160:11>
| | | |   | `-TextComment 0x1afced8fef0 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced8ff38 <col:12, line:161:11> [in] implicitly Param="_find" ParamIndex=0
| | | |   | `-ParagraphComment 0x1afced8ffb0 <col:11>
| | | |   |   `-TextComment 0x1afced8ff88 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced8ffd0 <col:12, line:162:11> [in] implicitly Param="_replace" ParamIndex=1
| | | |   | `-ParagraphComment 0x1afced90050 <col:11>
| | | |   |   `-TextComment 0x1afced90028 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced90070 <col:12, line:163:11> [in] implicitly Param="_offset"
| | | |   | `-ParagraphComment 0x1afced900e8 <col:11>
| | | |   |   `-TextComment 0x1afced900c0 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced90108 <col:12, col:44> Name="return"
| | | |     `-ParagraphComment 0x1afced90158 <col:19, col:44>
| | | |       `-TextComment 0x1afced90130 <col:19, col:44> Text=" String copy after replace"
| | | |-CXXMethodDecl 0x1afce106310 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:172:54> col:40 getReversed 'StringTemplate<T> () const' inline
| | | | |-AlwaysInlineAttr 0x1afce1063b0 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced903a0 <./src\Core/Container/String.h:168:11, line:170:34>
| | | |   |-ParagraphComment 0x1afced90238 <line:168:11>
| | | |   | `-TextComment 0x1afced90210 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced90258 <col:12, col:51> Name="brief"
| | | |   | `-ParagraphComment 0x1afced902a8 <col:18, col:51>
| | | |   |   `-TextComment 0x1afced90280 <col:18, col:51> Text=" Get reversed copy of this string."
| | | |   |-ParagraphComment 0x1afced902f0 <line:170:11>
| | | |   | `-TextComment 0x1afced902c8 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced90310 <col:12, col:34> Name="return"
| | | |     `-ParagraphComment 0x1afced90360 <col:19, col:34>
| | | |       `-TextComment 0x1afced90338 <col:19, col:34> Text=" Reversed string"
| | | |-CXXMethodDecl 0x1afce1066b0 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:179:105> col:40 getRightTrimed 'StringTemplate<T> (const StringTemplate<T> &) const' inline
| | | | |-ParmVarDecl 0x1afce1065c8 <col:55, col:94> col:80 _characters 'const StringTemplate<T> &' cinit
| | | | | `-StringLiteral 0x1afcebf1a20 <col:94> 'const char [5]' lvalue "\t\n\r "
| | | | |-AlwaysInlineAttr 0x1afce106758 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced905c0 <./src\Core/Container/String.h:175:11, line:178:9>
| | | |   |-ParagraphComment 0x1afced90428 <line:175:11>
| | | |   | `-TextComment 0x1afced90400 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced90448 <col:12, col:88> Name="brief"
| | | |   | `-ParagraphComment 0x1afced90498 <col:18, col:88>
| | | |   |   `-TextComment 0x1afced90470 <col:18, col:88> Text=" Get copy of this with removed space (or any other character) from end."
| | | |   |-ParagraphComment 0x1afced904e0 <line:177:11>
| | | |   | `-TextComment 0x1afced904b8 <col:11> Text=" "
| | | |   `-ParamCommandComment 0x1afced90500 <col:12, line:178:9> [in] implicitly Param="_characters" ParamIndex=0
| | | |     `-ParagraphComment 0x1afced90580 <col:1, col:9>
| | | |       `-TextComment 0x1afced90558 <col:1, col:9> Text="         "
| | | |-CXXMethodDecl 0x1afce10f910 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:188:36> col:26 getSize 'u32 () const' inline
| | | | |-AlwaysInlineAttr 0x1afce10f9b0 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced908f0 <./src\Core/Container/String.h:182:11, line:186:23>
| | | |   |-ParagraphComment 0x1afced90648 <line:182:11>
| | | |   | `-TextComment 0x1afced90620 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced90668 <col:12, line:183:11> Name="brief"
| | | |   | `-ParagraphComment 0x1afced906e0 <line:182:18, line:183:11>
| | | |   |   |-TextComment 0x1afced90690 <line:182:18, col:37> Text=" Get size of string."
| | | |   |   `-TextComment 0x1afced906b0 <line:183:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced90700 <col:12, col:100> Name="warning"
| | | |   | `-ParagraphComment 0x1afced90750 <col:20, col:100>
| | | |   |   `-TextComment 0x1afced90728 <col:20, col:100> Text=" This is not count of characters. for counting characters use getLength instead.."
| | | |   |-ParagraphComment 0x1afced90798 <line:185:11>
| | | |   | `-TextComment 0x1afced90770 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced907b8 <col:12, line:186:11> Name="sa"
| | | |   | `-ParagraphComment 0x1afced90830 <line:185:15, line:186:11>
| | | |   |   |-TextComment 0x1afced907e0 <line:185:15, col:24> Text=" getLength"
| | | |   |   `-TextComment 0x1afced90800 <line:186:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced90850 <col:12, col:23> Name="return"
| | | |     `-ParagraphComment 0x1afced908a0 <col:19, col:23>
| | | |       `-TextComment 0x1afced90878 <col:19, col:23> Text=" size"
| | | |-CXXMethodDecl 0x1afce10fcb0 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:195:100> col:40 getTrimed 'StringTemplate<T> (const StringTemplate<T> &) const' inline
| | | | |-ParmVarDecl 0x1afce10fbc8 <col:50, col:89> col:75 _characters 'const StringTemplate<T> &' cinit
| | | | | `-StringLiteral 0x1afcebf1a40 <col:89> 'const char [5]' lvalue "\t\n\r "
| | | | |-AlwaysInlineAttr 0x1afce10fd58 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced90b10 <./src\Core/Container/String.h:191:11, line:194:9>
| | | |   |-ParagraphComment 0x1afced90978 <line:191:11>
| | | |   | `-TextComment 0x1afced90950 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced90998 <col:12, col:102> Name="brief"
| | | |   | `-ParagraphComment 0x1afced909e8 <col:18, col:102>
| | | |   |   `-TextComment 0x1afced909c0 <col:18, col:102> Text=" Get copy of this with removed space (or any other character) from beginning and end."
| | | |   |-ParagraphComment 0x1afced90a30 <line:193:11>
| | | |   | `-TextComment 0x1afced90a08 <col:11> Text=" "
| | | |   `-ParamCommandComment 0x1afced90a50 <col:12, line:194:9> [in] implicitly Param="_characters" ParamIndex=0
| | | |     `-ParagraphComment 0x1afced90ad0 <col:1, col:9>
| | | |       `-TextComment 0x1afced90aa8 <col:1, col:9> Text="         "
| | | |-CXXMethodDecl 0x1afce110100 <line:204:9, col:80> col:17 insert 'Michka::StringTemplate::String &(const StringTemplate<T> &, const u32 &)'
| | | | |-ParmVarDecl 0x1afce10ff08 <col:24, col:49> col:49 _string 'const StringTemplate<T> &'
| | | | |-ParmVarDecl 0x1afce10ff80 <col:58, col:79> col:69 _offset 'const u32 &' cinit
| | | | | `-ExprWithCleanups 0x1afcebf1ab8 <col:79> 'const u32':'const unsigned int' lvalue
| | | | |   `-MaterializeTemporaryExpr 0x1afcebf1aa0 <col:79> 'const u32':'const unsigned int' lvalue
| | | | |     `-ImplicitCastExpr 0x1afcebf1a88 <col:79> 'const u32':'const unsigned int' <IntegralCast>
| | | | |       `-IntegerLiteral 0x1afcebf1a60 <col:79> 'int' 0
| | | | `-FullComment 0x1afced90e40 <line:198:11, line:202:23>
| | | |   |-ParagraphComment 0x1afced90b98 <line:198:11>
| | | |   | `-TextComment 0x1afced90b70 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced90bb8 <col:12, col:57> Name="brief"
| | | |   | `-ParagraphComment 0x1afced90c08 <col:18, col:57>
| | | |   |   `-TextComment 0x1afced90be0 <col:18, col:57> Text=" Insert a substring in middle of string."
| | | |   |-ParagraphComment 0x1afced90c50 <line:200:11>
| | | |   | `-TextComment 0x1afced90c28 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced90c70 <col:12, line:201:11> [in] implicitly Param="_string" ParamIndex=0
| | | |   | `-ParagraphComment 0x1afced90ce8 <col:11>
| | | |   |   `-TextComment 0x1afced90cc0 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced90d08 <col:12, line:202:11> [in] implicitly Param="_offset" ParamIndex=1
| | | |   | `-ParagraphComment 0x1afced90d80 <col:11>
| | | |   |   `-TextComment 0x1afced90d58 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced90da0 <col:12, col:23> Name="return"
| | | |     `-ParagraphComment 0x1afced90df0 <col:19, col:23>
| | | |       `-TextComment 0x1afced90dc8 <col:19, col:23> Text=" Self"
| | | |-CXXMethodDecl 0x1afce110230 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:209:37> col:27 isEmpty 'bool () const' inline
| | | | |-AlwaysInlineAttr 0x1afce1102d0 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced90f68 <./src\Core/Container/String.h:207:11, col:40>
| | | |   |-ParagraphComment 0x1afced90ec8 <col:11>
| | | |   | `-TextComment 0x1afced90ea0 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced90ee8 <col:12, col:40> Name="brief"
| | | |     `-ParagraphComment 0x1afced90f38 <col:18, col:40>
| | | |       `-TextComment 0x1afced90f10 <col:18, col:40> Text=" Check string is empty."
| | | |-CXXMethodDecl 0x1afce110378 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:214:40> col:27 isNotEmpty 'bool () const' inline
| | | | |-AlwaysInlineAttr 0x1afce110418 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced91090 <./src\Core/Container/String.h:212:11, col:44>
| | | |   |-ParagraphComment 0x1afced90ff0 <col:11>
| | | |   | `-TextComment 0x1afced90fc8 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced91010 <col:12, col:44> Name="brief"
| | | |     `-ParagraphComment 0x1afced91060 <col:18, col:44>
| | | |       `-TextComment 0x1afced91038 <col:18, col:44> Text=" Check string is not empty."
| | | |-CXXMethodDecl 0x1afce110788 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:221:98> col:41 leftTrim 'StringTemplate<T> &(const StringTemplate<T> &)' inline
| | | | |-ParmVarDecl 0x1afce110628 <col:50, col:89> col:75 _characters 'const StringTemplate<T> &' cinit
| | | | | `-StringLiteral 0x1afcebf1ad0 <col:89> 'const char [5]' lvalue "\t\n\r "
| | | | |-AlwaysInlineAttr 0x1afce110830 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced83230 <./src\Core/Container/String.h:217:11, line:219:23>
| | | |   |-ParagraphComment 0x1afced91118 <line:217:11>
| | | |   | `-TextComment 0x1afced910f0 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced91138 <col:12, col:71> Name="brief"
| | | |   | `-ParagraphComment 0x1afced91188 <col:18, col:71>
| | | |   |   `-TextComment 0x1afced91160 <col:18, col:71> Text=" Remove space (or any other character) from beginning."
| | | |   |-ParagraphComment 0x1afced911d0 <line:219:11>
| | | |   | `-TextComment 0x1afced911a8 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced911f0 <col:12, col:23> Name="return"
| | | |     `-ParagraphComment 0x1afced91240 <col:19, col:23>
| | | |       `-TextComment 0x1afced91218 <col:19, col:23> Text=" Self"
| | | |-CXXMethodDecl 0x1afce10daa0 <line:226:9, col:51> col:34 number 'StringTemplate<T> (bool)' static
| | | | |-ParmVarDecl 0x1afce10d978 <col:41, col:46> col:46 _bool 'bool'
| | | | `-FullComment 0x1afced83358 <line:224:11, col:44>
| | | |   |-ParagraphComment 0x1afced832b8 <col:11>
| | | |   | `-TextComment 0x1afced83290 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced832d8 <col:12, col:44> Name="brief"
| | | |     `-ParagraphComment 0x1afced83328 <col:18, col:44>
| | | |       `-TextComment 0x1afced83300 <col:18, col:44> Text=" Convert boolean to string."
| | | |-CXXMethodDecl 0x1afce10dd50 <line:231:9, col:54> col:34 number 'StringTemplate<T> (float)' static
| | | | |-ParmVarDecl 0x1afce10dc20 <col:41, col:47> col:47 _number 'float'
| | | | `-FullComment 0x1afced83480 <line:229:11, col:49>
| | | |   |-ParagraphComment 0x1afced833e0 <col:11>
| | | |   | `-TextComment 0x1afced833b8 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced83400 <col:12, col:49> Name="brief"
| | | |     `-ParagraphComment 0x1afced83450 <col:18, col:49>
| | | |       `-TextComment 0x1afced83428 <col:18, col:49> Text=" Convert float number to string."
| | | |-CXXMethodDecl 0x1afce10e000 <line:236:9, col:55> col:34 number 'StringTemplate<T> (double)' static
| | | | |-ParmVarDecl 0x1afce10ded0 <col:41, col:48> col:48 _number 'double'
| | | | `-FullComment 0x1afced835a8 <line:234:11, col:50>
| | | |   |-ParagraphComment 0x1afced83508 <col:11>
| | | |   | `-TextComment 0x1afced834e0 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced83528 <col:12, col:50> Name="brief"
| | | |     `-ParagraphComment 0x1afced83578 <col:18, col:50>
| | | |       `-TextComment 0x1afced83550 <col:18, col:50> Text=" Convert double number to string."
| | | |-CXXMethodDecl 0x1afce10e2b0 <line:241:9, col:60> col:34 number 'StringTemplate<T> (long double)' static
| | | | |-ParmVarDecl 0x1afce10e180 <col:41, col:53> col:53 _number 'long double'
| | | | `-FullComment 0x1afced836d0 <line:239:11, col:55>
| | | |   |-ParagraphComment 0x1afced83630 <col:11>
| | | |   | `-TextComment 0x1afced83608 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced83650 <col:12, col:55> Name="brief"
| | | |     `-ParagraphComment 0x1afced836a0 <col:18, col:55>
| | | |       `-TextComment 0x1afced83678 <col:18, col:55> Text=" Convert long double number to string."
| | | |-FunctionTemplateDecl 0x1afce10e780 <line:246:9, line:247:81> col:34 number
| | | | |-TemplateTypeParmDecl 0x1afce10e388 <line:246:18, col:27> col:27 referenced typename depth 1 index 0 NumberType
| | | | |-CXXMethodDecl 0x1afce10e6e0 <line:247:9, col:81> col:34 number 'StringTemplate<T> (NumberType, const u8 &)' static
| | | | | |-ParmVarDecl 0x1afce10e4c8 <col:41, col:52> col:52 _number 'NumberType'
| | | | | |-ParmVarDecl 0x1afce10e5a0 <col:61, col:79> col:71 _base 'const u8 &' cinit
| | | | | | `-ExprWithCleanups 0x1afcebf1b48 <col:79> 'const u8':'const unsigned char' lvalue
| | | | | |   `-MaterializeTemporaryExpr 0x1afcebf1b30 <col:79> 'const u8':'const unsigned char' lvalue
| | | | | |     `-ImplicitCastExpr 0x1afcebf1b18 <col:79> 'const u8':'const unsigned char' <IntegralCast>
| | | | | |       `-IntegerLiteral 0x1afcebf1af0 <col:79> 'int' 10
| | | | | `-FullComment 0x1afced83920 <line:244:11, col:53>
| | | | |   |-ParagraphComment 0x1afced83880 <col:11>
| | | | |   | `-TextComment 0x1afced83858 <col:11> Text=" "
| | | | |   `-BlockCommandComment 0x1afced838a0 <col:12, col:53> Name="brief"
| | | | |     `-ParagraphComment 0x1afced838f0 <col:18, col:53>
| | | | |       `-TextComment 0x1afced838c8 <col:18, col:53> Text=" Convert any integer type to string."
| | | | `-FullComment 0x1afced837f8 <col:11, col:53>
| | | |   |-ParagraphComment 0x1afced83758 <col:11>
| | | |   | `-TextComment 0x1afced83730 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced83778 <col:12, col:53> Name="brief"
| | | |     `-ParagraphComment 0x1afced837c8 <col:18, col:53>
| | | |       `-TextComment 0x1afced837a0 <col:18, col:53> Text=" Convert any integer type to string."
| | | |-CXXMethodDecl 0x1afce108aa8 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:255:80> col:41 prepend 'StringTemplate<T> &(const StringTemplate<T> &)' inline
| | | | |-ParmVarDecl 0x1afce108988 <col:49, col:74> col:74 _other 'const StringTemplate<T> &'
| | | | |-AlwaysInlineAttr 0x1afce108b50 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced83bb0 <./src\Core/Container/String.h:250:11, line:253:23>
| | | |   |-ParagraphComment 0x1afced839a8 <line:250:11>
| | | |   | `-TextComment 0x1afced83980 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced839c8 <col:12, col:50> Name="brief"
| | | |   | `-ParagraphComment 0x1afced83a18 <col:18, col:50>
| | | |   |   `-TextComment 0x1afced839f0 <col:18, col:50> Text=" Prepend a string to this string."
| | | |   |-ParagraphComment 0x1afced83a60 <line:252:11>
| | | |   | `-TextComment 0x1afced83a38 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced83a80 <col:12, line:253:11> [in] implicitly Param="_other" ParamIndex=0
| | | |   | `-ParagraphComment 0x1afced83af8 <col:11>
| | | |   |   `-TextComment 0x1afced83ad0 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced83b18 <col:12, col:23> Name="return"
| | | |     `-ParagraphComment 0x1afced83b68 <col:19, col:23>
| | | |       `-TextComment 0x1afced83b40 <col:19, col:23> Text=" Self"
| | | |-CXXMethodDecl 0x1afce108e68 <line:264:9, col:85> col:28 remove 'StringTemplate<T> &(const u32 &, const u32 &)'
| | | | |-ParmVarDecl 0x1afce108c78 <col:35, col:46> col:46 _start 'const u32 &'
| | | | |-ParmVarDecl 0x1afce108cf0 <col:54, col:82> col:65 _size 'const u32 &' cinit
| | | | | `-DeclRefExpr 0x1afcebf1c10 <col:73, col:82> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int'
| | | | `-FullComment 0x1afced83eb8 <line:258:11, line:262:18>
| | | |   |-ParagraphComment 0x1afced83c38 <line:258:11>
| | | |   | `-TextComment 0x1afced83c10 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced83c58 <col:12, col:61> Name="brief"
| | | |   | `-ParagraphComment 0x1afced83ca8 <col:18, col:61>
| | | |   |   `-TextComment 0x1afced83c80 <col:18, col:61> Text=" Remove part of string for _size characters."
| | | |   |-ParagraphComment 0x1afced83cf0 <line:260:11>
| | | |   | `-TextComment 0x1afced83cc8 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced83d10 <col:12, line:261:11> [in] implicitly Param="_start" ParamIndex=0
| | | |   | `-ParagraphComment 0x1afced83d88 <col:11>
| | | |   |   `-TextComment 0x1afced83d60 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced83da8 <col:12, line:262:11> [in] implicitly Param="_size" ParamIndex=1
| | | |   | `-ParagraphComment 0x1afced83e20 <col:11>
| | | |   |   `-TextComment 0x1afced83df8 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced83e40 <col:12, col:18> Name="return"
| | | |     `-ParagraphComment 0x1afced83e68 <<invalid sloc>>
| | | |-CXXMethodDecl 0x1afce109088 <line:271:9, col:36> col:28 reverse 'StringTemplate<T> &()'
| | | | `-FullComment 0x1afced840a8 <line:267:11, line:269:23>
| | | |   |-ParagraphComment 0x1afced83f40 <line:267:11>
| | | |   | `-TextComment 0x1afced83f18 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced83f60 <col:12, col:33> Name="brief"
| | | |   | `-ParagraphComment 0x1afced83fb0 <col:18, col:33>
| | | |   |   `-TextComment 0x1afced83f88 <col:18, col:33> Text=" Reverse string."
| | | |   |-ParagraphComment 0x1afced83ff8 <line:269:11>
| | | |   | `-TextComment 0x1afced83fd0 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced84018 <col:12, col:23> Name="return"
| | | |     `-ParagraphComment 0x1afced84068 <col:19, col:23>
| | | |       `-TextComment 0x1afced84040 <col:19, col:23> Text=" Self"
| | | |-CXXMethodDecl 0x1afce1096d8 <line:282:9, col:183> col:28 replace 'StringTemplate<T> &(const StringTemplate<T> &, const StringTemplate<T> &, const u32 &, const u32 &)'
| | | | |-ParmVarDecl 0x1afce1092e8 <col:36, col:61> col:61 _find 'const StringTemplate<T> &'
| | | | |-ParmVarDecl 0x1afce109448 <col:68, col:123> col:93 _replace 'const StringTemplate<T> &' cinit
| | | | | `-DeclRefExpr 0x1afcebf1d08 <col:104, col:123> 'const StringTemplate<T>':'const StringTemplate<T>' lvalue Var 0x1afce10cdc8 'empty' 'const StringTemplate<T>':'const StringTemplate<T>'
| | | | |-ParmVarDecl 0x1afce1094c0 <col:130, col:150> col:141 _start 'const u32 &' cinit
| | | | | `-ExprWithCleanups 0x1afcebf1d90 <col:150> 'const u32':'const unsigned int' lvalue
| | | | |   `-MaterializeTemporaryExpr 0x1afcebf1d78 <col:150> 'const u32':'const unsigned int' lvalue
| | | | |     `-ImplicitCastExpr 0x1afcebf1d60 <col:150> 'const u32':'const unsigned int' <IntegralCast>
| | | | |       `-IntegerLiteral 0x1afcebf1d38 <col:150> 'int' 0
| | | | |-ParmVarDecl 0x1afce109538 <col:153, col:180> col:164 _end 'const u32 &' cinit
| | | | | `-DeclRefExpr 0x1afcebf1de0 <col:171, col:180> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int'
| | | | `-FullComment 0x1afced84520 <line:274:11, line:280:23>
| | | |   |-ParagraphComment 0x1afced84130 <line:274:11>
| | | |   | `-TextComment 0x1afced84108 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced84150 <col:12, col:74> Name="brief"
| | | |   | `-ParagraphComment 0x1afced841a0 <col:18, col:74>
| | | |   |   `-TextComment 0x1afced84178 <col:18, col:74> Text=" Find a sub string and replace it with another substring."
| | | |   |-ParagraphComment 0x1afced841e8 <line:276:11>
| | | |   | `-TextComment 0x1afced841c0 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced84208 <col:12, line:277:11> [in] implicitly Param="_find" ParamIndex=0
| | | |   | `-ParagraphComment 0x1afced84280 <col:11>
| | | |   |   `-TextComment 0x1afced84258 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced842a0 <col:12, line:278:11> [in] implicitly Param="_replace" ParamIndex=1
| | | |   | `-ParagraphComment 0x1afced84320 <col:11>
| | | |   |   `-TextComment 0x1afced842f8 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced84340 <col:12, line:279:11> [in] implicitly Param="_start" ParamIndex=2
| | | |   | `-ParagraphComment 0x1afced843b8 <col:11>
| | | |   |   `-TextComment 0x1afced84390 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced843d8 <col:12, line:280:11> [in] implicitly Param="_end" ParamIndex=3
| | | |   | `-ParagraphComment 0x1afced84450 <col:11>
| | | |   |   `-TextComment 0x1afced84428 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced84470 <col:12, col:23> Name="return"
| | | |     `-ParagraphComment 0x1afced844c0 <col:19, col:23>
| | | |       `-TextComment 0x1afced84498 <col:19, col:23> Text=" Self"
| | | |-CXXMethodDecl 0x1afce109a18 <line:289:9, col:47> col:28 resize 'StringTemplate<T> &(u32)'
| | | | |-ParmVarDecl 0x1afce1098b0 <col:35, col:39> col:39 _newSize 'u32':'unsigned int'
| | | | `-FullComment 0x1afced84710 <line:285:11, line:287:23>
| | | |   |-ParagraphComment 0x1afced845a8 <line:285:11>
| | | |   | `-TextComment 0x1afced84580 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced845c8 <col:12, col:39> Name="brief"
| | | |   | `-ParagraphComment 0x1afced84618 <col:18, col:39>
| | | |   |   `-TextComment 0x1afced845f0 <col:18, col:39> Text=" Resize string buffer."
| | | |   |-ParagraphComment 0x1afced84660 <line:287:11>
| | | |   | `-TextComment 0x1afced84638 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced84680 <col:12, col:23> Name="return"
| | | |     `-ParagraphComment 0x1afced846d0 <col:19, col:23>
| | | |       `-TextComment 0x1afced846a8 <col:19, col:23> Text=" Self"
| | | |-CXXMethodDecl 0x1afce109d98 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:296:99> col:41 rightTrim 'StringTemplate<T> &(const StringTemplate<T> &)' inline
| | | | |-ParmVarDecl 0x1afce109c78 <col:51, col:90> col:76 _characters 'const StringTemplate<T> &' cinit
| | | | | `-StringLiteral 0x1afcebf1e10 <col:90> 'const char [5]' lvalue "\t\n\r "
| | | | |-AlwaysInlineAttr 0x1afce109e40 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced84900 <./src\Core/Container/String.h:292:11, line:294:23>
| | | |   |-ParagraphComment 0x1afced84798 <line:292:11>
| | | |   | `-TextComment 0x1afced84770 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced847b8 <col:12, col:65> Name="brief"
| | | |   | `-ParagraphComment 0x1afced84808 <col:18, col:65>
| | | |   |   `-TextComment 0x1afced847e0 <col:18, col:65> Text=" Remove space (or any other character) from end."
| | | |   |-ParagraphComment 0x1afced84850 <line:294:11>
| | | |   | `-TextComment 0x1afced84828 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced84870 <col:12, col:23> Name="return"
| | | |     `-ParagraphComment 0x1afced848c0 <col:19, col:23>
| | | |       `-TextComment 0x1afced84898 <col:19, col:23> Text=" Self"
| | | |-CXXMethodDecl 0x1afce10a190 <line:303:9, col:62> col:35 split 'Vector<StringTemplate<T>> (const T &) const'
| | | | |-ParmVarDecl 0x1afce10a068 <col:41, col:50> col:50 _character 'const T &'
| | | | `-FullComment 0x1afced84b20 <line:299:11, line:302:9>
| | | |   |-ParagraphComment 0x1afced84988 <line:299:11>
| | | |   | `-TextComment 0x1afced84960 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced849a8 <col:12, col:64> Name="brief"
| | | |   | `-ParagraphComment 0x1afced849f8 <col:18, col:64>
| | | |   |   `-TextComment 0x1afced849d0 <col:18, col:64> Text=" Split string to sub string based on character."
| | | |   |-ParagraphComment 0x1afced84a40 <line:301:11>
| | | |   | `-TextComment 0x1afced84a18 <col:11> Text=" "
| | | |   `-ParamCommandComment 0x1afced84a60 <col:12, line:302:9> [in] implicitly Param="_character" ParamIndex=0
| | | |     `-ParagraphComment 0x1afced84ae0 <col:1, col:9>
| | | |       `-TextComment 0x1afced84ab8 <col:1, col:9> Text="         "
| | | |-CXXMethodDecl 0x1afce10a5d0 <line:310:9, col:75> col:35 split 'Vector<StringTemplate<T>> (const StringTemplate<T> &) const'
| | | | |-ParmVarDecl 0x1afce10a4a8 <col:41, col:66> col:66 _string 'const StringTemplate<T> &'
| | | | `-FullComment 0x1afced84d40 <line:306:11, line:309:9>
| | | |   |-ParagraphComment 0x1afced84ba8 <line:306:11>
| | | |   | `-TextComment 0x1afced84b80 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced84bc8 <col:12, col:61> Name="brief"
| | | |   | `-ParagraphComment 0x1afced84c18 <col:18, col:61>
| | | |   |   `-TextComment 0x1afced84bf0 <col:18, col:61> Text=" Split string to sub string based on string."
| | | |   |-ParagraphComment 0x1afced84c60 <line:308:11>
| | | |   | `-TextComment 0x1afced84c38 <col:11> Text=" "
| | | |   `-ParamCommandComment 0x1afced84c80 <col:12, line:309:9> [in] implicitly Param="_character"
| | | |     `-ParagraphComment 0x1afced84d00 <col:1, col:9>
| | | |       `-TextComment 0x1afced84cd8 <col:1, col:9> Text="         "
| | | |-CXXMethodDecl 0x1afce10a7c0 <line:321:9, col:44> col:20 stringSize 'u32 (const T *)' static
| | | | |-ParmVarDecl 0x1afce10a6b8 <col:31, col:40> col:40 _str 'const T *'
| | | | `-FullComment 0x1afced85168 <line:313:11, line:319:27>
| | | |   |-ParagraphComment 0x1afced84dc8 <line:313:11>
| | | |   | `-TextComment 0x1afced84da0 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced84de8 <col:12, col:37> Name="brief"
| | | |   | `-ParagraphComment 0x1afced84e38 <col:18, col:37>
| | | |   |   `-TextComment 0x1afced84e10 <col:18, col:37> Text=" Get size of string."
| | | |   |-ParagraphComment 0x1afced84e80 <line:315:11>
| | | |   | `-TextComment 0x1afced84e58 <col:11> Text=" "
| | | |   |-TParamCommandComment 0x1afced84ea0 <col:12, line:316:11> Param="T"
| | | |   | `-ParagraphComment 0x1afced84f20 <col:11>
| | | |   |   `-TextComment 0x1afced84ef8 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced84f40 <col:12, line:317:11> [in] implicitly Param="_str" ParamIndex=0
| | | |   | `-ParagraphComment 0x1afced84fe0 <line:316:23, line:317:11>
| | | |   |   |-TextComment 0x1afced84f90 <line:316:23, col:29> Text=" string"
| | | |   |   `-TextComment 0x1afced84fb0 <line:317:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced85000 <col:12, col:30> Name="return"
| | | |   | `-ParagraphComment 0x1afced85050 <col:19, col:30>
| | | |   |   `-TextComment 0x1afced85028 <col:19, col:30> Text=" string size"
| | | |   |-ParagraphComment 0x1afced85098 <line:319:11>
| | | |   | `-TextComment 0x1afced85070 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced850b8 <col:12, col:27> Name="sa"
| | | |     `-ParagraphComment 0x1afced85108 <col:15, col:27>
| | | |       `-TextComment 0x1afced850e0 <col:15, col:27> Text=" stringLength"
| | | |-CXXMethodDecl 0x1afce10e990 <line:332:9, col:46> col:20 stringLength 'u32 (const T *)' static
| | | | |-ParmVarDecl 0x1afce10e900 <col:33, col:42> col:42 _str 'const T *'
| | | | `-FullComment 0x1afced95640 <line:324:11, line:330:25>
| | | |   |-ParagraphComment 0x1afced851f0 <line:324:11>
| | | |   | `-TextComment 0x1afced851c8 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced952c0 <col:12, col:46> Name="brief"
| | | |   | `-ParagraphComment 0x1afced95310 <col:18, col:46>
| | | |   |   `-TextComment 0x1afced952e8 <col:18, col:46> Text=" Get string characters count."
| | | |   |-ParagraphComment 0x1afced95358 <line:326:11>
| | | |   | `-TextComment 0x1afced95330 <col:11> Text=" "
| | | |   |-TParamCommandComment 0x1afced95378 <col:12, line:327:11> Param="T"
| | | |   | `-ParagraphComment 0x1afced953f8 <col:11>
| | | |   |   `-TextComment 0x1afced953d0 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced95418 <col:12, line:328:11> [in] implicitly Param="_str" ParamIndex=0
| | | |   | `-ParagraphComment 0x1afced954b8 <line:327:23, line:328:11>
| | | |   |   |-TextComment 0x1afced95468 <line:327:23, col:29> Text=" string"
| | | |   |   `-TextComment 0x1afced95488 <line:328:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced954d8 <col:12, col:32> Name="return"
| | | |   | `-ParagraphComment 0x1afced95528 <col:19, col:32>
| | | |   |   `-TextComment 0x1afced95500 <col:19, col:32> Text=" string length"
| | | |   |-ParagraphComment 0x1afced95570 <line:330:11>
| | | |   | `-TextComment 0x1afced95548 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced95590 <col:12, col:25> Name="sa"
| | | |     `-ParagraphComment 0x1afced955e0 <col:15, col:25>
| | | |       `-TextComment 0x1afced955b8 <col:15, col:25> Text=" stringSize"
| | | |-CXXMethodDecl 0x1afce10ecc0 <line:341:9, col:89> col:27 subString 'StringTemplate<T> (const u32 &, const u32 &) const'
| | | | |-ParmVarDecl 0x1afce10eb08 <col:37, col:48> col:48 _start 'const u32 &'
| | | | |-ParmVarDecl 0x1afce10eb80 <col:56, col:84> col:67 _size 'const u32 &' cinit
| | | | | `-DeclRefExpr 0x1afcebf1e68 <col:75, col:84> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int'
| | | | `-FullComment 0x1afced95948 <line:335:11, line:339:18>
| | | |   |-ParagraphComment 0x1afced956c8 <line:335:11>
| | | |   | `-TextComment 0x1afced956a0 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced956e8 <col:12, col:37> Name="brief"
| | | |   | `-ParagraphComment 0x1afced95738 <col:18, col:37>
| | | |   |   `-TextComment 0x1afced95710 <col:18, col:37> Text=" Get part of string."
| | | |   |-ParagraphComment 0x1afced95780 <line:337:11>
| | | |   | `-TextComment 0x1afced95758 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced957a0 <col:12, line:338:11> [in] implicitly Param="_start" ParamIndex=0
| | | |   | `-ParagraphComment 0x1afced95818 <col:11>
| | | |   |   `-TextComment 0x1afced957f0 <col:11> Text=" "
| | | |   |-ParamCommandComment 0x1afced95838 <col:12, line:339:11> [in] implicitly Param="_size" ParamIndex=1
| | | |   | `-ParagraphComment 0x1afced958b0 <col:11>
| | | |   |   `-TextComment 0x1afced95888 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced958d0 <col:12, col:18> Name="return"
| | | |     `-ParagraphComment 0x1afced958f8 <<invalid sloc>>
| | | |-CXXMethodDecl 0x1afce10eea0 <line:348:9, col:37> col:27 toLower 'StringTemplate<T> () const'
| | | | `-FullComment 0x1afced95b10 <line:344:11, line:346:18>
| | | |   |-ParagraphComment 0x1afced959d0 <line:344:11>
| | | |   | `-TextComment 0x1afced959a8 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced959f0 <col:12, col:39> Name="brief"
| | | |   | `-ParagraphComment 0x1afced95a40 <col:18, col:39>
| | | |   |   `-TextComment 0x1afced95a18 <col:18, col:39> Text=" Convert to lowercase."
| | | |   |-ParagraphComment 0x1afced95a88 <line:346:11>
| | | |   | `-TextComment 0x1afced95a60 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced95aa8 <col:12, col:18> Name="return"
| | | |     `-ParagraphComment 0x1afced95ad0 <<invalid sloc>>
| | | |-FunctionTemplateDecl 0x1afce10f1d0 <line:356:9, line:357:52> col:20 toNumber
| | | | |-TemplateTypeParmDecl 0x1afce10ef70 <line:356:18, col:27> col:27 referenced typename depth 1 index 0 NumberType
| | | | |-CXXMethodDecl 0x1afce10f130 <line:357:9, col:52> col:20 toNumber 'NumberType (const u32 &) const'
| | | | | |-ParmVarDecl 0x1afce10f020 <col:29, col:48> col:40 _base 'const u32 &' cinit
| | | | | | `-ExprWithCleanups 0x1afcebf1ef0 <col:48> 'const u32':'const unsigned int' lvalue
| | | | | |   `-MaterializeTemporaryExpr 0x1afcebf1ed8 <col:48> 'const u32':'const unsigned int' lvalue
| | | | | |     `-ImplicitCastExpr 0x1afcebf1ec0 <col:48> 'const u32':'const unsigned int' <IntegralCast>
| | | | | |       `-IntegerLiteral 0x1afcebf1e98 <col:48> 'int' 10
| | | | | `-FullComment 0x1afced960a8 <line:351:11, line:354:36>
| | | | |   |-ParagraphComment 0x1afced95e68 <line:351:11>
| | | | |   | `-TextComment 0x1afced95e40 <col:11> Text=" "
| | | | |   |-BlockCommandComment 0x1afced95e88 <col:12, col:43> Name="brief"
| | | | |   | `-ParagraphComment 0x1afced95ed8 <col:18, col:43>
| | | | |   |   `-TextComment 0x1afced95eb0 <col:18, col:43> Text=" Convert string to number."
| | | | |   |-ParagraphComment 0x1afced95f20 <line:353:11>
| | | | |   | `-TextComment 0x1afced95ef8 <col:11> Text=" "
| | | | |   |-TParamCommandComment 0x1afced95f40 <col:12, line:354:11> Param="NumberType"
| | | | |   | `-ParagraphComment 0x1afced95fc8 <col:11>
| | | | |   |   `-TextComment 0x1afced95fa0 <col:11> Text=" "
| | | | |   `-ParamCommandComment 0x1afced95fe8 <col:12, col:36> [in] implicitly Param="_base" ParamIndex=0
| | | | |     `-ParagraphComment 0x1afced96060 <col:24, col:36>
| | | | |       `-TextComment 0x1afced96038 <col:24, col:36> Text=" integer base"
| | | | `-FullComment 0x1afced95de0 <line:351:11, line:354:36>
| | | |   |-ParagraphComment 0x1afced95b98 <line:351:11>
| | | |   | `-TextComment 0x1afced95b70 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced95bb8 <col:12, col:43> Name="brief"
| | | |   | `-ParagraphComment 0x1afced95c08 <col:18, col:43>
| | | |   |   `-TextComment 0x1afced95be0 <col:18, col:43> Text=" Convert string to number."
| | | |   |-ParagraphComment 0x1afced95c50 <line:353:11>
| | | |   | `-TextComment 0x1afced95c28 <col:11> Text=" "
| | | |   |-TParamCommandComment 0x1afced95c70 <col:12, line:354:11> Param="NumberType" Position=<0>
| | | |   | `-ParagraphComment 0x1afced95d00 <col:11>
| | | |   |   `-TextComment 0x1afced95cd8 <col:11> Text=" "
| | | |   `-ParamCommandComment 0x1afced95d20 <col:12, col:36> [in] implicitly Param="_base" ParamIndex=0
| | | |     `-ParagraphComment 0x1afced95d98 <col:24, col:36>
| | | |       `-TextComment 0x1afced95d70 <col:24, col:36> Text=" integer base"
| | | |-CXXMethodDecl 0x1afce10f360 <line:364:9, col:37> col:27 toUpper 'StringTemplate<T> () const'
| | | | `-FullComment 0x1afced96270 <line:360:11, line:362:18>
| | | |   |-ParagraphComment 0x1afced96130 <line:360:11>
| | | |   | `-TextComment 0x1afced96108 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced96150 <col:12, col:40> Name="brief"
| | | |   | `-ParagraphComment 0x1afced961a0 <col:18, col:40>
| | | |   |   `-TextComment 0x1afced96178 <col:18, col:40> Text=" Convert to upper case."
| | | |   |-ParagraphComment 0x1afced961e8 <line:362:11>
| | | |   | `-TextComment 0x1afced961c0 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced96208 <col:12, col:18> Name="return"
| | | |     `-ParagraphComment 0x1afced96230 <<invalid sloc>>
| | | |-CXXMethodDecl 0x1afce10f560 <line:371:9, col:39> col:30 toUtf8 'StringTemplate<char> () const'
| | | | `-FullComment 0x1afced96438 <line:367:11, line:369:18>
| | | |   |-ParagraphComment 0x1afced962f8 <line:367:11>
| | | |   | `-TextComment 0x1afced962d0 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced96318 <col:12, col:49> Name="brief"
| | | |   | `-ParagraphComment 0x1afced96368 <col:18, col:49>
| | | |   |   `-TextComment 0x1afced96340 <col:18, col:49> Text=" Convert to utf8 encoded string."
| | | |   |-ParagraphComment 0x1afced963b0 <line:369:11>
| | | |   | `-TextComment 0x1afced96388 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced963d0 <col:12, col:18> Name="return"
| | | |     `-ParagraphComment 0x1afced963f8 <<invalid sloc>>
| | | |-CXXMethodDecl 0x1afce10f760 <line:378:9, col:43> col:33 toUtf16 'StringTemplate<wchar_t> () const'
| | | | `-FullComment 0x1afced96600 <line:374:11, line:376:18>
| | | |   |-ParagraphComment 0x1afced964c0 <line:374:11>
| | | |   | `-TextComment 0x1afced96498 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced964e0 <col:12, col:50> Name="brief"
| | | |   | `-ParagraphComment 0x1afced96530 <col:18, col:50>
| | | |   |   `-TextComment 0x1afced96508 <col:18, col:50> Text=" Convert to utf16 encoded string."
| | | |   |-ParagraphComment 0x1afced96578 <line:376:11>
| | | |   | `-TextComment 0x1afced96550 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced96598 <col:12, col:18> Name="return"
| | | |     `-ParagraphComment 0x1afced965c0 <<invalid sloc>>
| | | |-CXXMethodDecl 0x1afce110990 <line:385:9, col:44> col:34 toUtf32 'StringTemplate<char32_t> () const'
| | | | `-FullComment 0x1afced967c8 <line:381:11, line:383:18>
| | | |   |-ParagraphComment 0x1afced96688 <line:381:11>
| | | |   | `-TextComment 0x1afced96660 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced966a8 <col:12, col:50> Name="brief"
| | | |   | `-ParagraphComment 0x1afced966f8 <col:18, col:50>
| | | |   |   `-TextComment 0x1afced966d0 <col:18, col:50> Text=" Convert to utf32 encoded string."
| | | |   |-ParagraphComment 0x1afced96740 <line:383:11>
| | | |   | `-TextComment 0x1afced96718 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced96760 <col:12, col:18> Name="return"
| | | |     `-ParagraphComment 0x1afced96788 <<invalid sloc>>
| | | |-CXXMethodDecl 0x1afce110d08 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:392:94> col:41 trim 'StringTemplate<T> &(const StringTemplate<T> &)' inline
| | | | |-ParmVarDecl 0x1afce110be8 <col:46, col:85> col:71 _characters 'const StringTemplate<T> &' cinit
| | | | | `-StringLiteral 0x1afcebf1f80 <col:85> 'const char [5]' lvalue "\t\n\r "
| | | | |-AlwaysInlineAttr 0x1afce110db0 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced969b8 <./src\Core/Container/String.h:388:11, line:390:23>
| | | |   |-ParagraphComment 0x1afced96850 <line:388:11>
| | | |   | `-TextComment 0x1afced96828 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced96870 <col:12, col:79> Name="brief"
| | | |   | `-ParagraphComment 0x1afced968c0 <col:18, col:79>
| | | |   |   `-TextComment 0x1afced96898 <col:18, col:79> Text=" Remove space (or any other character) from beginning and end."
| | | |   |-ParagraphComment 0x1afced96908 <line:390:11>
| | | |   | `-TextComment 0x1afced968e0 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced96928 <col:12, col:23> Name="return"
| | | |     `-ParagraphComment 0x1afced96978 <col:19, col:23>
| | | |       `-TextComment 0x1afced96950 <col:19, col:23> Text=" Self"
| | | |-FunctionTemplateDecl 0x1afce111188 <line:394:9, line:395:54> col:28 operator=
| | | | |-TemplateTypeParmDecl 0x1afce110e08 <line:394:18, col:27> col:27 referenced typename depth 1 index 0 T2
| | | | `-CXXMethodDecl 0x1afce1110e8 <line:395:9, col:54> col:28 operator= 'StringTemplate<T> &(const T2 *)'
| | | |   `-ParmVarDecl 0x1afce110f80 <col:40, col:50> col:50 _str 'const T2 *'
| | | |-CXXMethodDecl 0x1afce1114d8 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:396:87> col:41 operator= 'StringTemplate<T> &(const StringTemplate<char> &)' inline
| | | | |-ParmVarDecl 0x1afce111378 <col:53, col:81> col:81 _other 'const StringTemplate<char> &'
| | | | `-AlwaysInlineAttr 0x1afce111580 <./src\Core/Defines.h:54:25> __forceinline
| | | |-CXXMethodDecl 0x1afce111930 <col:25, ./src\Core/Container/String.h:397:90> col:41 operator= 'StringTemplate<T> &(const StringTemplate<wchar_t> &)' inline
| | | | |-ParmVarDecl 0x1afce111768 <col:53, col:84> col:84 _other 'const StringTemplate<wchar_t> &'
| | | | `-AlwaysInlineAttr 0x1afce1119d8 <./src\Core/Defines.h:54:25> __forceinline
| | | |-CXXMethodDecl 0x1afce111d18 <col:25, ./src\Core/Container/String.h:398:91> col:41 operator= 'StringTemplate<T> &(const StringTemplate<char32_t> &)' inline
| | | | |-ParmVarDecl 0x1afce111bb8 <col:53, col:85> col:85 _other 'const StringTemplate<char32_t> &'
| | | | `-AlwaysInlineAttr 0x1afce111dc0 <./src\Core/Defines.h:54:25> __forceinline
| | | |-CXXMethodDecl 0x1afce112108 <col:25, ./src\Core/Container/String.h:399:79> col:41 operator= 'StringTemplate<T> &(StringTemplate<T> &&)' inline
| | | | |-ParmVarDecl 0x1afce111fa8 <col:53, col:73> col:73 _other 'StringTemplate<T> &&'
| | | | `-AlwaysInlineAttr 0x1afce1121b0 <./src\Core/Defines.h:54:25> __forceinline
| | | |-CXXMethodDecl 0x1afce112480 <col:25, ./src\Core/Container/String.h:401:85> col:40 operator+ 'StringTemplate<T> (const StringTemplate<T> &) const' inline
| | | | |-ParmVarDecl 0x1afce112398 <col:52, col:77> col:77 _other 'const StringTemplate<T> &'
| | | | `-AlwaysInlineAttr 0x1afce112528 <./src\Core/Defines.h:54:25> __forceinline
| | | |-CXXMethodDecl 0x1afce112828 <col:25, ./src\Core/Container/String.h:402:85> col:41 operator+= 'StringTemplate<T> &(const StringTemplate<T> &)' inline
| | | | |-ParmVarDecl 0x1afce112708 <col:54, col:79> col:79 _other 'const StringTemplate<T> &'
| | | | `-AlwaysInlineAttr 0x1afce1128d0 <./src\Core/Defines.h:54:25> __forceinline
| | | |-FunctionTemplateDecl 0x1afce10bb60 <./src\Core/Container/String.h:405:9, line:406:43> col:14 operator==
| | | | |-TemplateTypeParmDecl 0x1afce10b8d0 <line:405:18, col:27> col:27 referenced typename depth 1 index 0 T2
| | | | `-CXXMethodDecl 0x1afce10bac0 <line:406:9, col:43> col:14 operator== 'bool (const T2 *) const'
| | | |   `-ParmVarDecl 0x1afce10b9b0 <col:27, col:37> col:37 _str 'const T2 *'
| | | |-FunctionTemplateDecl 0x1afce10be10 <line:407:9, line:408:56> col:27 operator!=
| | | | |-TemplateTypeParmDecl 0x1afce10bbc0 <line:407:18, col:27> col:27 referenced typename depth 1 index 0 T2
| | | | `-CXXMethodDecl 0x1afce10bd70 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:408:56> col:27 operator!= 'bool (const T2 *) const' inline
| | | |   |-ParmVarDecl 0x1afce10bca0 <col:40, col:50> col:50 _str 'const T2 *'
| | | |   `-AlwaysInlineAttr 0x1afce10be70 <./src\Core/Defines.h:54:25> __forceinline
| | | |-FunctionTemplateDecl 0x1afce10c290 <./src\Core/Container/String.h:409:9, line:410:72> col:27 operator==
| | | | |-TemplateTypeParmDecl 0x1afce10bec8 <line:409:18, col:27> col:27 referenced typename depth 1 index 0 T2
| | | | `-CXXMethodDecl 0x1afce10c1f0 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:410:72> col:27 operator== 'bool (const StringTemplate<T2> &) const' inline
| | | |   |-ParmVarDecl 0x1afce10c0e8 <col:40, col:66> col:66 _str 'const StringTemplate<T2> &'
| | | |   `-AlwaysInlineAttr 0x1afce10c2f0 <./src\Core/Defines.h:54:25> __forceinline
| | | |-FunctionTemplateDecl 0x1afce10c650 <./src\Core/Container/String.h:411:9, line:412:72> col:27 operator!=
| | | | |-TemplateTypeParmDecl 0x1afce10c348 <line:411:18, col:27> col:27 referenced typename depth 1 index 0 T2
| | | | `-CXXMethodDecl 0x1afce10c5b0 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:412:72> col:27 operator!= 'bool (const StringTemplate<T2> &) const' inline
| | | |   |-ParmVarDecl 0x1afce10c4e8 <col:40, col:66> col:66 _str 'const StringTemplate<T2> &'
| | | |   `-AlwaysInlineAttr 0x1afce10c6b0 <./src\Core/Defines.h:54:25> __forceinline
| | | |-CXXMethodDecl 0x1afce10c8e0 <col:25, ./src\Core/Container/String.h:414:55> col:25 operator[] 'T &(const u32 &)' inline
| | | | |-ParmVarDecl 0x1afce10c718 <col:38, col:49> col:49 _index 'const u32 &'
| | | | `-AlwaysInlineAttr 0x1afce10c988 <./src\Core/Defines.h:54:25> __forceinline
| | | |-CXXMethodDecl 0x1afce10cb00 <col:25, ./src\Core/Container/String.h:415:56> col:24 operator[] 'T (const u32 &) const' inline
| | | | |-ParmVarDecl 0x1afce10c9f0 <col:37, col:48> col:48 _index 'const u32 &'
| | | | `-AlwaysInlineAttr 0x1afce10cba8 <./src\Core/Defines.h:54:25> __forceinline
| | | |-AccessSpecDecl 0x1afce10cc30 <./src\Core/Container/String.h:416:5, col:11> col:5 public
| | | |-VarDecl 0x1afce10cc70 <line:420:9, col:26> col:26 notFound 'const u32':'const unsigned int' static
| | | | `-FullComment 0x1afced96ae0 <line:418:11, col:53>
| | | |   |-ParagraphComment 0x1afced96a40 <col:11>
| | | |   | `-TextComment 0x1afced96a18 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced96a60 <col:12, col:53> Name="brief"
| | | |     `-ParagraphComment 0x1afced96ab0 <col:18, col:53>
| | | |       `-TextComment 0x1afced96a88 <col:18, col:53> Text=" Not found index for find functions."
| | | |-VarDecl 0x1afce10cdc8 <line:425:9, col:40> col:40 referenced empty 'const StringTemplate<T>':'const StringTemplate<T>' static
| | | | `-FullComment 0x1afced96c08 <line:423:11, col:33>
| | | |   |-ParagraphComment 0x1afced96b68 <col:11>
| | | |   | `-TextComment 0x1afced96b40 <col:11> Text=" "
| | | |   `-BlockCommandComment 0x1afced96b88 <col:12, col:33> Name="brief"
| | | |     `-ParagraphComment 0x1afced96bd8 <col:18, col:33>
| | | |       `-TextComment 0x1afced96bb0 <col:18, col:33> Text=" An empty string"
| | | |-AccessSpecDecl 0x1afce10ce30 <line:426:5, col:12> col:5 private
| | | |-CXXRecordDecl 0x1afce10ce60 <line:427:9, line:430:9> line:427:16 referenced struct Utf8Character definition
| | | | |-DefinitionData aggregate standard_layout trivially_copyable pod trivial literal
| | | | | |-DefaultConstructor exists trivial needs_implicit
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-CXXRecordDecl 0x1afce10cf80 <col:9, col:16> col:16 implicit struct Utf8Character
| | | | `-FieldDecl 0x1afce10d078 <line:429:13, col:29> col:18 character 'char [7]'
| | | |-CXXRecordDecl 0x1afce10d0e8 <line:432:9, line:435:9> line:432:16 referenced struct Utf16Character definition
| | | | |-DefinitionData aggregate standard_layout trivially_copyable pod trivial literal
| | | | | |-DefaultConstructor exists trivial needs_implicit
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-CXXRecordDecl 0x1afce10d210 <col:9, col:16> col:16 implicit struct Utf16Character
| | | | `-FieldDecl 0x1afce10d350 <line:434:13, col:32> col:21 character 'wchar_t [3]'
| | | |-CXXMethodDecl 0x1afce10d510 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:442:68> col:43 utf8Encode 'Michka::StringTemplate::Utf8Character (u32)' static inline
| | | | |-ParmVarDecl 0x1afce10d400 <col:54, col:58> col:58 _character 'u32':'unsigned int'
| | | | |-AlwaysInlineAttr 0x1afce10d5b8 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced96e28 <./src\Core/Container/String.h:438:11, line:441:9>
| | | |   |-ParagraphComment 0x1afced96c90 <line:438:11>
| | | |   | `-TextComment 0x1afced96c68 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced96cb0 <col:12, col:45> Name="brief"
| | | |   | `-ParagraphComment 0x1afced96d00 <col:18, col:45>
| | | |   |   `-TextComment 0x1afced96cd8 <col:18, col:45> Text=" Encode a character to UTF8."
| | | |   |-ParagraphComment 0x1afced96d48 <line:440:11>
| | | |   | `-TextComment 0x1afced96d20 <col:11> Text=" "
| | | |   `-ParamCommandComment 0x1afced96d68 <col:12, line:441:9> [in] implicitly Param="_character" ParamIndex=0
| | | |     `-ParagraphComment 0x1afced96de8 <col:1, col:9>
| | | |       `-TextComment 0x1afced96dc0 <col:1, col:9> Text="         "
| | | |-CXXMethodDecl 0x1afce10d760 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:449:66> col:33 utf8Decode 'u32 (const char *)' static inline
| | | | |-ParmVarDecl 0x1afce10d658 <col:44, col:56> col:56 _character 'const char *'
| | | | |-AlwaysInlineAttr 0x1afce10d808 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced97048 <./src\Core/Container/String.h:445:11, line:448:9>
| | | |   |-ParagraphComment 0x1afced96eb0 <line:445:11>
| | | |   | `-TextComment 0x1afced96e88 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced96ed0 <col:12, col:50> Name="brief"
| | | |   | `-ParagraphComment 0x1afced96f20 <col:18, col:50>
| | | |   |   `-TextComment 0x1afced96ef8 <col:18, col:50> Text=" Decode a UTF8 encoded character."
| | | |   |-ParagraphComment 0x1afced96f68 <line:447:11>
| | | |   | `-TextComment 0x1afced96f40 <col:11> Text=" "
| | | |   `-ParamCommandComment 0x1afced96f88 <col:12, line:448:9> [in] implicitly Param="_character" ParamIndex=0
| | | |     `-ParagraphComment 0x1afced97008 <col:1, col:9>
| | | |       `-TextComment 0x1afced96fe0 <col:1, col:9> Text="         "
| | | |-CXXMethodDecl 0x1afcebf1250 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:456:70> col:44 utf16Encode 'Michka::StringTemplate::Utf16Character (u32)' static inline
| | | | |-ParmVarDecl 0x1afcebf1140 <col:56, col:60> col:60 _character 'u32':'unsigned int'
| | | | |-AlwaysInlineAttr 0x1afcebf12f8 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced97268 <./src\Core/Container/String.h:452:11, line:455:9>
| | | |   |-ParagraphComment 0x1afced970d0 <line:452:11>
| | | |   | `-TextComment 0x1afced970a8 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced970f0 <col:12, col:46> Name="brief"
| | | |   | `-ParagraphComment 0x1afced97140 <col:18, col:46>
| | | |   |   `-TextComment 0x1afced97118 <col:18, col:46> Text=" Encode a character to UTF16."
| | | |   |-ParagraphComment 0x1afced97188 <line:454:11>
| | | |   | `-TextComment 0x1afced97160 <col:11> Text=" "
| | | |   `-ParamCommandComment 0x1afced971a8 <col:12, line:455:9> [in] implicitly Param="_character" ParamIndex=0
| | | |     `-ParagraphComment 0x1afced97228 <col:1, col:9>
| | | |       `-TextComment 0x1afced97200 <col:1, col:9> Text="         "
| | | |-CXXMethodDecl 0x1afcebf14a0 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:463:70> col:33 utf16Decode 'u32 (const wchar_t *)' static inline
| | | | |-ParmVarDecl 0x1afcebf1398 <col:45, col:60> col:60 _character 'const wchar_t *'
| | | | |-AlwaysInlineAttr 0x1afcebf1548 <./src\Core/Defines.h:54:25> __forceinline
| | | | `-FullComment 0x1afced934a8 <./src\Core/Container/String.h:459:11, line:462:9>
| | | |   |-ParagraphComment 0x1afced93310 <line:459:11>
| | | |   | `-TextComment 0x1afced932e8 <col:11> Text=" "
| | | |   |-BlockCommandComment 0x1afced93330 <col:12, col:50> Name="brief"
| | | |   | `-ParagraphComment 0x1afced93380 <col:18, col:50>
| | | |   |   `-TextComment 0x1afced93358 <col:18, col:50> Text=" Decode a UTF8 encoded character."
| | | |   |-ParagraphComment 0x1afced933c8 <line:461:11>
| | | |   | `-TextComment 0x1afced933a0 <col:11> Text=" "
| | | |   `-ParamCommandComment 0x1afced933e8 <col:12, line:462:9> [in] implicitly Param="_character" ParamIndex=0
| | | |     `-ParagraphComment 0x1afced93468 <col:1, col:9>
| | | |       `-TextComment 0x1afced93440 <col:1, col:9> Text="         "
| | | |-AccessSpecDecl 0x1afcebf15a0 <line:464:5, col:12> col:5 private
| | | `-FieldDecl 0x1afcebf15e0 <line:465:9, col:20> col:12 mData 'T *'
| | |   `-CXXNullPtrLiteralExpr 0x1afcebf1fa0 <col:20> 'nullptr_t'
| | |-ClassTemplateSpecialization 0x1afce07e060 'StringTemplate'
| | |-ClassTemplateSpecialization 0x1afce07e280 'StringTemplate'
| | `-ClassTemplateSpecialization 0x1afce0b9548 'StringTemplate'
| |-FunctionTemplateDecl 0x1afcebf0560 <line:468:5, line:469:99> col:37 operator+
| | |-TemplateTypeParmDecl 0x1afcebf1fb0 <line:468:14, col:23> col:23 referenced typename depth 0 index 0 T
| | |-TemplateTypeParmDecl 0x1afcebf2030 <col:26, col:35> col:35 referenced typename depth 0 index 1 T2
| | `-FunctionDecl 0x1afcebf04c0 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.h:469:99> col:37 operator+ 'StringTemplate<T2> (const T *, const StringTemplate<T2> &)' inline
| |   |-ParmVarDecl 0x1afcebf01f0 <col:49, col:58> col:58 _first 'const T *'
| |   |-ParmVarDecl 0x1afcebf0388 <col:66, col:92> col:92 _second 'const StringTemplate<T2> &'
| |   `-AlwaysInlineAttr 0x1afcebf05c8 <./src\Core/Defines.h:54:25> __forceinline
| |-TypedefDecl 0x1afcebf0758 prev 0x1afce07e218 <./src\Core/Container/String.h:471:5, col:34> col:34 String8 'StringTemplate<char>':'Michka::StringTemplate<char>'
| | `-TemplateSpecializationType 0x1afcebf06b0 'StringTemplate<char>' sugar StringTemplate
| |   |-TemplateArgument type 'char'
| |   | `-BuiltinType 0x1afcc6e38e0 'char'
| |   `-RecordType 0x1afce07e140 'Michka::StringTemplate<char>'
| |     `-ClassTemplateSpecialization 0x1afce07e060 'StringTemplate'
| |-TypedefDecl 0x1afcebf0868 prev 0x1afce0b94e0 <line:472:5, col:37> col:37 referenced String 'StringTemplate<wchar_t>':'Michka::StringTemplate<wchar_t>'
| | `-TemplateSpecializationType 0x1afcebf07c0 'StringTemplate<wchar_t>' sugar StringTemplate
| |   |-TemplateArgument type 'wchar_t'
| |   | `-BuiltinType 0x1afcc6e3e20 'wchar_t'
| |   `-RecordType 0x1afce07e360 'Michka::StringTemplate<wchar_t>'
| |     `-ClassTemplateSpecialization 0x1afce07e280 'StringTemplate'
| `-TypedefDecl 0x1afcebf0978 prev 0x1afce0b9708 <line:473:5, col:38> col:38 String32 'StringTemplate<char32_t>':'Michka::StringTemplate<char32_t>'
|   `-TemplateSpecializationType 0x1afcebf08d0 'StringTemplate<char32_t>' sugar StringTemplate
|     |-TemplateArgument type 'char32_t'
|     | `-BuiltinType 0x1afcc6e3e80 'char32_t'
|     `-RecordType 0x1afce0b9630 'Michka::StringTemplate<char32_t>'
|       `-ClassTemplateSpecialization 0x1afce0b9548 'StringTemplate'
|-NamespaceDecl 0x1afcebf0a90 prev 0x1afce104610 <./src\Core/Container/Vector.h:34:1, line:411:1> line:34:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| `-ClassTemplateDecl 0x1afcebf0c30 prev 0x1afce1047b0 <line:36:5, line:410:5> line:37:11 Vector
|   |-TemplateTypeParmDecl 0x1afcebf0b00 <line:36:14, col:23> col:23 referenced typename depth 0 index 0 T
|   `-CXXRecordDecl 0x1afcebf0ba0 prev 0x1afce104720 <line:37:5, line:410:5> line:37:11 class Vector definition
|     |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
|     | |-DefaultConstructor exists non_trivial user_provided
|     | |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
|     | |-MoveConstructor exists non_trivial user_declared
|     | |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
|     | |-MoveAssignment exists non_trivial user_declared
|     | `-Destructor non_trivial user_declared
|     |-CXXRecordDecl 0x1afcebf0cf0 <col:5, col:11> col:11 implicit referenced class Vector
|     |-AccessSpecDecl 0x1afcebf0d80 <./src\Core/Helpers.h:304:5, col:11> col:5 public
|     |-TypedefDecl 0x1afcebf0dd8 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
|     | |-BuiltinType 0x1afcc6e38c0 'bool'
|     | `-AnnotateAttr 0x1afcebf0e30 <line:271:39, col:60> ""
|     |-CXXMethodDecl 0x1afcebf0ef8 <line:273:5, col:45> col:31 classFileName 'const char *()' static inline
|     | `-<<<NULL>>>
|     |-CXXMethodDecl 0x1afcebf0fc0 <<scratch space>:14:1, ./src\Core/Helpers.h:277:62> <scratch space>:14:1 invalid __MICHKA_STRUCT_GENERATED_BODY_39 'int ()'
|     |-FriendDecl 0x1afcebef3d0 <./src\Core/Container/Vector.h:41:9, line:42:22> col:22
|     | `-ClassTemplateDecl 0x1afcebef1b0 parent 0x1afcebf0a90 <line:41:9, line:42:22> col:22 Vector
|     |   |-TemplateTypeParmDecl 0x1afcebf1060 <line:41:18, col:24> col:24 class depth 1 index 0 U
|     |   `-CXXRecordDecl 0x1afcebef120 parent 0x1afcebf0a90 <line:42:16, col:22> col:22 class Vector
|     |-AccessSpecDecl 0x1afcebef428 <line:43:5, col:11> col:5 public
|     |-TypedefDecl 0x1afcebef4a0 <line:44:9, col:20> col:20 referenced Iterator 'T *'
|     | `-PointerType 0x1afcebef460 'T *' dependent
|     |   `-TemplateTypeParmType 0x1afcebf0b50 'T' dependent depth 0 index 0
|     |     `-TemplateTypeParm 0x1afcebf0b00 'T'
|     |-TypedefDecl 0x1afcebef540 <line:45:9, col:26> col:26 referenced ConstIterator 'const T *'
|     | `-PointerType 0x1afcebef500 'const T *' dependent
|     |   `-QualType 0x1afcebf0b51 'const T' const
|     |     `-TemplateTypeParmType 0x1afcebf0b50 'T' dependent depth 0 index 0
|     |       `-TemplateTypeParm 0x1afcebf0b00 'T'
|     |-AccessSpecDecl 0x1afcebef598 <line:46:5, col:11> col:5 public
|     |-CXXConstructorDecl 0x1afcebef600 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:47:29> col:22 Vector<T> 'void ()' inline
|     | `-AlwaysInlineAttr 0x1afcebef6a8 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXConstructorDecl 0x1afcebef7f0 <col:25, ./src\Core/Container/Vector.h:48:67> col:22 invalid Vector<T> 'void (const int &)' inline
|     | |-ParmVarDecl 0x1afcebef728 <col:29, col:61> col:61 invalid _array 'const int &'
|     | `-AlwaysInlineAttr 0x1afcebef8a0 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXConstructorDecl 0x1afcebefb30 <col:25, ./src\Core/Container/Vector.h:49:52> col:22 Vector<T> 'void (const Vector<T> &)' inline
|     | |-ParmVarDecl 0x1afcebefa28 <col:29, col:46> col:46 _other 'const Vector<T> &'
|     | `-AlwaysInlineAttr 0x1afcebefbe0 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXConstructorDecl 0x1afcebefe70 <col:25, ./src\Core/Container/Vector.h:50:47> col:22 Vector<T> 'void (Vector<T> &&)' inline
|     | |-ParmVarDecl 0x1afcebefd68 <col:29, col:41> col:41 _other 'Vector<T> &&'
|     | `-AlwaysInlineAttr 0x1afcebeff20 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXDestructorDecl 0x1afcebeffc0 <col:25, ./src\Core/Container/Vector.h:51:30> col:22 ~Vector<T> 'void ()' inline
|     | `-AlwaysInlineAttr 0x1afcebf0070 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXMethodDecl 0x1afcebee190 <col:25, ./src\Core/Container/Vector.h:56:37> col:31 begin 'Michka::Vector::Iterator ()' inline
|     | |-AlwaysInlineAttr 0x1afcebee230 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced935d0 <./src\Core/Container/Vector.h:54:11, col:45>
|     |   |-ParagraphComment 0x1afced93530 <col:11>
|     |   | `-TextComment 0x1afced93508 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced93550 <col:12, col:45> Name="brief"
|     |     `-ParagraphComment 0x1afced935a0 <col:18, col:45>
|     |       `-TextComment 0x1afced93578 <col:18, col:45> Text=" Iterator to begin of array."
|     |-CXXMethodDecl 0x1afcebee370 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:61:44> col:36 begin 'Michka::Vector::ConstIterator () const' inline
|     | |-AlwaysInlineAttr 0x1afcebee410 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced936f8 <./src\Core/Container/Vector.h:59:11, col:59>
|     |   |-ParagraphComment 0x1afced93658 <col:11>
|     |   | `-TextComment 0x1afced93630 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced93678 <col:12, col:59> Name="brief"
|     |     `-ParagraphComment 0x1afced936c8 <col:18, col:59>
|     |       `-TextComment 0x1afced936a0 <col:18, col:59> Text=" Iterator to begin of array for constants."
|     |-CXXMethodDecl 0x1afcebee638 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:68:39> col:33 clear 'Vector<T> &()' inline
|     | |-AlwaysInlineAttr 0x1afcebee6d8 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced938e8 <./src\Core/Container/Vector.h:64:11, line:66:23>
|     |   |-ParagraphComment 0x1afced93780 <line:64:11>
|     |   | `-TextComment 0x1afced93758 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afced937a0 <col:12, col:31> Name="brief"
|     |   | `-ParagraphComment 0x1afced937f0 <col:18, col:31>
|     |   |   `-TextComment 0x1afced937c8 <col:18, col:31> Text=" Clear vector."
|     |   |-ParagraphComment 0x1afced93838 <line:66:11>
|     |   | `-TextComment 0x1afced93810 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced93858 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afced938a8 <col:19, col:23>
|     |       `-TextComment 0x1afced93880 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebee780 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:73:35> col:31 end 'Michka::Vector::Iterator ()' inline
|     | |-AlwaysInlineAttr 0x1afcebee820 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced93a10 <./src\Core/Container/Vector.h:71:11, col:43>
|     |   |-ParagraphComment 0x1afced93970 <col:11>
|     |   | `-TextComment 0x1afced93948 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced93990 <col:12, col:43> Name="brief"
|     |     `-ParagraphComment 0x1afced939e0 <col:18, col:43>
|     |       `-TextComment 0x1afced939b8 <col:18, col:43> Text=" Iterator to end of array."
|     |-CXXMethodDecl 0x1afcebee8c8 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:78:42> col:36 end 'Michka::Vector::ConstIterator () const' inline
|     | |-AlwaysInlineAttr 0x1afcebee968 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced93b38 <./src\Core/Container/Vector.h:76:11, col:57>
|     |   |-ParagraphComment 0x1afced93a98 <col:11>
|     |   | `-TextComment 0x1afced93a70 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced93ab8 <col:12, col:57> Name="brief"
|     |     `-ParagraphComment 0x1afced93b08 <col:18, col:57>
|     |       `-TextComment 0x1afced93ae0 <col:18, col:57> Text=" Iterator to end of array for constants."
|     |-CXXMethodDecl 0x1afcebeed48 <line:86:9, col:73> col:20 invalid filter 'Vector<T> &(const int &)'
|     | |-ParmVarDecl 0x1afcebeebe8 <col:27, col:64> col:64 invalid _callback 'const int &'
|     | `-FullComment 0x1afced93dd0 <line:81:11, line:84:23>
|     |   |-ParagraphComment 0x1afced93bc0 <line:81:11>
|     |   | `-TextComment 0x1afced93b98 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afced93be0 <col:12, col:52> Name="brief"
|     |   | `-ParagraphComment 0x1afced93c30 <col:18, col:52>
|     |   |   `-TextComment 0x1afced93c08 <col:18, col:52> Text=" Filter vector items by a callback."
|     |   |-ParagraphComment 0x1afced93c78 <line:83:11>
|     |   | `-TextComment 0x1afced93c50 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced93c98 <col:12, line:84:11> [in] implicitly Param="_callback" ParamIndex=0
|     |   | `-ParagraphComment 0x1afced93d18 <col:11>
|     |   |   `-TextComment 0x1afced93cf0 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced93d38 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afced93d88 <col:19, col:23>
|     |       `-TextComment 0x1afced93d60 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebeeed0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:91:31> col:25 first 'T &()' inline
|     | |-AlwaysInlineAttr 0x1afcebeef70 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced93ef8 <./src\Core/Container/Vector.h:89:11, col:33>
|     |   |-ParagraphComment 0x1afced93e58 <col:11>
|     |   | `-TextComment 0x1afced93e30 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced93e78 <col:12, col:33> Name="brief"
|     |     `-ParagraphComment 0x1afced93ec8 <col:18, col:33>
|     |       `-TextComment 0x1afced93ea0 <col:18, col:33> Text=" Get first item."
|     |-CXXMethodDecl 0x1afcebef050 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:92:32> col:24 first 'T () const' inline
|     | `-AlwaysInlineAttr 0x1afcebf3160 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXMethodDecl 0x1afcebf3208 <col:25, ./src\Core/Container/Vector.h:97:40> col:26 getCapacity 'u32 () const' inline
|     | |-AlwaysInlineAttr 0x1afcebf32a8 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced94020 <./src\Core/Container/Vector.h:95:11, col:41>
|     |   |-ParagraphComment 0x1afced93f80 <col:11>
|     |   | `-TextComment 0x1afced93f58 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced93fa0 <col:12, col:41> Name="brief"
|     |     `-ParagraphComment 0x1afced93ff0 <col:18, col:41>
|     |       `-TextComment 0x1afced93fc8 <col:18, col:41> Text=" Get capacity of vector."
|     |-CXXMethodDecl 0x1afcebf3350 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:102:36> col:26 getSize 'u32 () const' inline
|     | |-AlwaysInlineAttr 0x1afcebf33f0 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced94148 <./src\Core/Container/Vector.h:100:11, col:47>
|     |   |-ParagraphComment 0x1afced940a8 <col:11>
|     |   | `-TextComment 0x1afced94080 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced940c8 <col:12, col:47> Name="brief"
|     |     `-ParagraphComment 0x1afced94118 <col:18, col:47>
|     |       `-TextComment 0x1afced940f0 <col:18, col:47> Text=" Get count of items in vector."
|     |-CXXMethodDecl 0x1afcebf36f0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:110:92> col:32 invalid getFiltered 'Vector<T> (const int &) const' inline
|     | |-ParmVarDecl 0x1afcebf35c0 <col:44, col:81> col:81 invalid _callback 'const int &'
|     | |-AlwaysInlineAttr 0x1afcebf3798 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced943e0 <./src\Core/Container/Vector.h:105:11, line:108:34>
|     |   |-ParagraphComment 0x1afced941d0 <line:105:11>
|     |   | `-TextComment 0x1afced941a8 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afced941f0 <col:12, col:60> Name="brief"
|     |   | `-ParagraphComment 0x1afced94240 <col:18, col:60>
|     |   |   `-TextComment 0x1afced94218 <col:18, col:60> Text=" Get filtered vector by a compare callback."
|     |   |-ParagraphComment 0x1afced94288 <line:107:11>
|     |   | `-TextComment 0x1afced94260 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced942a8 <col:12, line:108:11> [in] implicitly Param="_callback" ParamIndex=0
|     |   | `-ParagraphComment 0x1afced94328 <col:11>
|     |   |   `-TextComment 0x1afced94300 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced94348 <col:12, col:34> Name="return"
|     |     `-ParagraphComment 0x1afced94398 <col:19, col:34>
|     |       `-TextComment 0x1afced94370 <col:19, col:34> Text=" Filtered Vector"
|     |-CXXMethodDecl 0x1afcebf3950 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:117:46> col:32 getReversed 'Vector<T> () const' inline
|     | |-AlwaysInlineAttr 0x1afcebf39f0 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced945d0 <./src\Core/Container/Vector.h:113:11, line:115:34>
|     |   |-ParagraphComment 0x1afced94468 <line:113:11>
|     |   | `-TextComment 0x1afced94440 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afced94488 <col:12, col:50> Name="brief"
|     |   | `-ParagraphComment 0x1afced944d8 <col:18, col:50>
|     |   |   `-TextComment 0x1afced944b0 <col:18, col:50> Text=" Get reversed copy of the vector."
|     |   |-ParagraphComment 0x1afced94520 <line:115:11>
|     |   | `-TextComment 0x1afced944f8 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced94540 <col:12, col:34> Name="return"
|     |     `-ParagraphComment 0x1afced94590 <col:19, col:34>
|     |       `-TextComment 0x1afced94568 <col:19, col:34> Text=" Reversed Vector"
|     |-CXXMethodDecl 0x1afcebf3c40 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:125:102> col:32 getSorted 'Vector<T> (const Michka::SortDirection &) const' inline
|     | |-ParmVarDecl 0x1afcebf3b18 <col:42, col:91> col:63 _direction 'const Michka::SortDirection &' cinit
|     | | `-ExprWithCleanups 0x1afcebf7030 <col:76, col:91> 'const Michka::SortDirection' lvalue
|     | |   `-MaterializeTemporaryExpr 0x1afcebf7018 <col:76, col:91> 'const Michka::SortDirection' lvalue
|     | |     `-ImplicitCastExpr 0x1afcebf7000 <col:76, col:91> 'const Michka::SortDirection' <NoOp>
|     | |       `-DeclRefExpr 0x1afcebf6fd0 <col:76, col:91> 'Michka::SortDirection' EnumConstant 0x1afce0f38e8 'ascending' 'Michka::SortDirection'
|     | |-AlwaysInlineAttr 0x1afcebf3ce8 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced94868 <./src\Core/Container/Vector.h:120:11, line:123:32>
|     |   |-ParagraphComment 0x1afced94658 <line:120:11>
|     |   | `-TextComment 0x1afced94630 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afced94678 <col:12, col:49> Name="brief"
|     |   | `-ParagraphComment 0x1afced946c8 <col:18, col:49>
|     |   |   `-TextComment 0x1afced946a0 <col:18, col:49> Text=" Get sorted copy of this vector."
|     |   |-ParagraphComment 0x1afced94710 <line:122:11>
|     |   | `-TextComment 0x1afced946e8 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced94730 <col:12, line:123:11> [in] implicitly Param="_direction" ParamIndex=0
|     |   | `-ParagraphComment 0x1afced947b0 <col:11>
|     |   |   `-TextComment 0x1afced94788 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced947d0 <col:12, col:32> Name="return"
|     |     `-ParagraphComment 0x1afced94820 <col:19, col:32>
|     |       `-TextComment 0x1afced947f8 <col:19, col:32> Text=" Sorted Vector"
|     |-CXXMethodDecl 0x1afcebf40a0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:133:100> col:32 invalid getSorted 'Vector<T> (const int &) const' inline
|     | |-ParmVarDecl 0x1afcebf3fb8 <col:42, col:89> col:89 invalid _callback 'const int &'
|     | |-AlwaysInlineAttr 0x1afcebec0f0 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced94b00 <./src\Core/Container/Vector.h:128:11, line:131:32>
|     |   |-ParagraphComment 0x1afced948f0 <line:128:11>
|     |   | `-TextComment 0x1afced948c8 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afced94910 <col:12, col:70> Name="brief"
|     |   | `-ParagraphComment 0x1afced94960 <col:18, col:70>
|     |   |   `-TextComment 0x1afced94938 <col:18, col:70> Text=" Get sorted copy of this vector with custom callback."
|     |   |-ParagraphComment 0x1afced949a8 <line:130:11>
|     |   | `-TextComment 0x1afced94980 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced949c8 <col:12, line:131:11> [in] implicitly Param="_callback" ParamIndex=0
|     |   | `-ParagraphComment 0x1afced94a48 <col:11>
|     |   |   `-TextComment 0x1afced94a20 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced94a68 <col:12, col:32> Name="return"
|     |     `-ParagraphComment 0x1afced94ab8 <col:19, col:32>
|     |       `-TextComment 0x1afced94a90 <col:19, col:32> Text=" Sorted Vector"
|     |-CXXMethodDecl 0x1afcebec2b0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:141:42> col:32 getUnique 'Vector<T> ()' inline
|     | |-AlwaysInlineAttr 0x1afcebec350 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced94d90 <./src\Core/Container/Vector.h:136:11, line:139:23>
|     |   |-ParagraphComment 0x1afced94b88 <line:136:11>
|     |   | `-TextComment 0x1afced94b60 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afced94ba8 <col:12, col:49> Name="brief"
|     |   | `-ParagraphComment 0x1afced94bf8 <col:18, col:49>
|     |   |   `-TextComment 0x1afced94bd0 <col:18, col:49> Text=" Get unique copy of this vector."
|     |   |-ParagraphComment 0x1afced94c40 <line:138:11>
|     |   | `-TextComment 0x1afced94c18 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced94c60 <col:12, line:139:11> [in] implicitly Param="_what"
|     |   | `-ParagraphComment 0x1afced94cd8 <col:11>
|     |   |   `-TextComment 0x1afced94cb0 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced94cf8 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afced94d48 <col:19, col:23>
|     |       `-TextComment 0x1afced94d20 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebec6d0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:149:98> col:32 invalid getUnique 'Vector<T> (const int &)' inline
|     | |-ParmVarDecl 0x1afcebec5a0 <col:42, col:89> col:89 invalid _callback 'const int &'
|     | |-AlwaysInlineAttr 0x1afcebec778 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced95028 <./src\Core/Container/Vector.h:144:11, line:147:23>
|     |   |-ParagraphComment 0x1afced94e18 <line:144:11>
|     |   | `-TextComment 0x1afced94df0 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afced94e38 <col:12, col:49> Name="brief"
|     |   | `-ParagraphComment 0x1afced94e88 <col:18, col:49>
|     |   |   `-TextComment 0x1afced94e60 <col:18, col:49> Text=" Get unique copy of this vector."
|     |   |-ParagraphComment 0x1afced94ed0 <line:146:11>
|     |   | `-TextComment 0x1afced94ea8 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced94ef0 <col:12, line:147:11> [in] implicitly Param="_callback" ParamIndex=0
|     |   | `-ParagraphComment 0x1afced94f70 <col:11>
|     |   |   `-TextComment 0x1afced94f48 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced94f90 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afced94fe0 <col:19, col:23>
|     |       `-TextComment 0x1afced94fb8 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebec980 <line:156:9, col:56> col:16 implode 'Michka::String (const Michka::String &) const'
|     | |-ParmVarDecl 0x1afcebec870 <col:24, col:49> col:38 invalid _seperator 'const Michka::String &' cinit
|     | | `-OpaqueValueExpr 0x1afcebf70f0 <col:49> 'const Michka::String':'const Michka::StringTemplate<wchar_t>'
|     | `-FullComment 0x1afced95248 <line:152:11, line:155:9>
|     |   |-ParagraphComment 0x1afced950b0 <line:152:11>
|     |   | `-TextComment 0x1afced95088 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afced950d0 <col:12, col:51> Name="brief"
|     |   | `-ParagraphComment 0x1afced95120 <col:18, col:51>
|     |   |   `-TextComment 0x1afced950f8 <col:18, col:51> Text=" Join vector elements as a string."
|     |   |-ParagraphComment 0x1afced95168 <line:154:11>
|     |   | `-TextComment 0x1afced95140 <col:11> Text=" "
|     |   `-ParamCommandComment 0x1afced95188 <col:12, line:155:9> [in] implicitly Param="_seperator" ParamIndex=0
|     |     `-ParagraphComment 0x1afced95208 <col:1, col:9>
|     |       `-TextComment 0x1afced951e0 <col:1, col:9> Text="         "
|     |-CXXMethodDecl 0x1afcebecc00 <line:165:9, col:58> col:13 indexOf 'u32 (const T &, const u32) const'
|     | |-ParmVarDecl 0x1afcebeca68 <col:21, col:30> col:30 _what 'const T &'
|     | |-ParmVarDecl 0x1afcebecae0 <col:37, col:55> col:47 _from 'const u32':'const unsigned int' cinit
|     | | `-ImplicitCastExpr 0x1afcebf7130 <col:55> 'u32':'unsigned int' <IntegralCast>
|     | |   `-IntegerLiteral 0x1afcebf7108 <col:55> 'int' 0
|     | `-FullComment 0x1afced975a0 <line:159:11, line:163:61>
|     |   |-ParagraphComment 0x1afced972f8 <line:159:11>
|     |   | `-TextComment 0x1afced972d0 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afced97318 <col:12, col:60> Name="brief"
|     |   | `-ParagraphComment 0x1afced97368 <col:18, col:60>
|     |   |   `-TextComment 0x1afced97340 <col:18, col:60> Text=" Find index of a value with offset of from."
|     |   |-ParagraphComment 0x1afced973b0 <line:161:11>
|     |   | `-TextComment 0x1afced97388 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced973d0 <col:12, line:162:11> [in] implicitly Param="_what" ParamIndex=0
|     |   | `-ParagraphComment 0x1afced97448 <col:11>
|     |   |   `-TextComment 0x1afced97420 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced97468 <col:12, line:163:11> [in] implicitly Param="_from" ParamIndex=1
|     |   | `-ParagraphComment 0x1afced974e0 <col:11>
|     |   |   `-TextComment 0x1afced974b8 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced97500 <col:12, col:61> Name="return"
|     |     `-ParagraphComment 0x1afced97550 <col:19, col:61>
|     |       `-TextComment 0x1afced97528 <col:19, col:61> Text=" index of value. notFound if nothing found."
|     |-CXXMethodDecl 0x1afcebecf30 <line:174:9, col:90> col:13 invalid indexOf 'u32 (const int &, const u32) const'
|     | |-ParmVarDecl 0x1afcebecd98 <col:21, col:58> col:58 invalid _callback 'const int &'
|     | |-ParmVarDecl 0x1afcebece10 <col:69, col:87> col:79 _from 'const u32':'const unsigned int' cinit
|     | | `-ImplicitCastExpr 0x1afcebf7170 <col:87> 'u32':'unsigned int' <IntegralCast>
|     | |   `-IntegerLiteral 0x1afcebf7148 <col:87> 'int' 0
|     | `-FullComment 0x1afced978d8 <line:168:11, line:172:61>
|     |   |-ParagraphComment 0x1afced97628 <line:168:11>
|     |   | `-TextComment 0x1afced97600 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afced97648 <col:12, col:83> Name="brief"
|     |   | `-ParagraphComment 0x1afced97698 <col:18, col:83>
|     |   |   `-TextComment 0x1afced97670 <col:18, col:83> Text=" Find index of a value with offset of from with custom a callback."
|     |   |-ParagraphComment 0x1afced976e0 <line:170:11>
|     |   | `-TextComment 0x1afced976b8 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced97700 <col:12, line:171:11> [in] implicitly Param="_callback" ParamIndex=0
|     |   | `-ParagraphComment 0x1afced97780 <col:11>
|     |   |   `-TextComment 0x1afced97758 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced977a0 <col:12, line:172:11> [in] implicitly Param="_from" ParamIndex=1
|     |   | `-ParagraphComment 0x1afced97818 <col:11>
|     |   |   `-TextComment 0x1afced977f0 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced97838 <col:12, col:61> Name="return"
|     |     `-ParagraphComment 0x1afced97888 <col:19, col:61>
|     |       `-TextComment 0x1afced97860 <col:19, col:61> Text=" index of value. notFound if nothing found."
|     |-FunctionTemplateDecl 0x1afcebf7680 <line:185:9, line:186:119> col:13 invalid indexOf
|     | |-TemplateTypeParmDecl 0x1afcebed010 <line:185:18, col:27> col:27 referenced typename depth 1 index 0 T2
|     | |-CXXMethodDecl 0x1afcebf75e0 <line:186:9, col:119> col:13 invalid indexOf 'u32 (const int &, const T2 &, const u32) const'
|     | | |-ParmVarDecl 0x1afcebf73b8 <col:21, col:69> col:69 invalid _callback 'const int &'
|     | | |-ParmVarDecl 0x1afcebf7430 <col:81, col:91> col:91 _what 'const T2 &'
|     | | |-ParmVarDecl 0x1afcebf74a8 <col:98, col:116> col:108 _from 'const u32':'const unsigned int' cinit
|     | | | `-ImplicitCastExpr 0x1afcebfe238 <col:116> 'u32':'unsigned int' <IntegralCast>
|     | | |   `-IntegerLiteral 0x1afcebfe210 <col:116> 'int' 0
|     | | `-FullComment 0x1afced98258 <line:177:11, line:183:61>
|     | |   |-ParagraphComment 0x1afced97e60 <line:177:11>
|     | |   | `-TextComment 0x1afced97e38 <col:11> Text=" "
|     | |   |-BlockCommandComment 0x1afced97e80 <col:12, col:92> Name="brief"
|     | |   | `-ParagraphComment 0x1afced97ed0 <col:18, col:92>
|     | |   |   `-TextComment 0x1afced97ea8 <col:18, col:92> Text=" Find index of a value with offset of from with custom comparison function."
|     | |   |-ParagraphComment 0x1afced97f18 <line:179:11>
|     | |   | `-TextComment 0x1afced97ef0 <col:11> Text=" "
|     | |   |-TParamCommandComment 0x1afced97f38 <col:12, line:180:11> Param="T2"
|     | |   | `-ParagraphComment 0x1afced97fb8 <col:11>
|     | |   |   `-TextComment 0x1afced97f90 <col:11> Text=" "
|     | |   |-ParamCommandComment 0x1afced97fd8 <col:12, line:181:11> [in] implicitly Param="_callback" ParamIndex=0
|     | |   | `-ParagraphComment 0x1afced98058 <col:11>
|     | |   |   `-TextComment 0x1afced98030 <col:11> Text=" "
|     | |   |-ParamCommandComment 0x1afced98078 <col:12, line:182:11> [in] implicitly Param="_what" ParamIndex=1
|     | |   | `-ParagraphComment 0x1afced980f0 <col:11>
|     | |   |   `-TextComment 0x1afced980c8 <col:11> Text=" "
|     | |   |-ParamCommandComment 0x1afced98110 <col:12, line:183:11> [in] implicitly Param="_from" ParamIndex=2
|     | |   | `-ParagraphComment 0x1afced98188 <col:11>
|     | |   |   `-TextComment 0x1afced98160 <col:11> Text=" "
|     | |   `-BlockCommandComment 0x1afced981a8 <col:12, col:61> Name="return"
|     | |     `-ParagraphComment 0x1afced981f8 <col:19, col:61>
|     | |       `-TextComment 0x1afced981d0 <col:19, col:61> Text=" index of value. notFound if nothing found."
|     | `-FullComment 0x1afced97dd8 <line:177:11, line:183:61>
|     |   |-ParagraphComment 0x1afced979d8 <line:177:11>
|     |   | `-TextComment 0x1afced979b0 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afced979f8 <col:12, col:92> Name="brief"
|     |   | `-ParagraphComment 0x1afced97a48 <col:18, col:92>
|     |   |   `-TextComment 0x1afced97a20 <col:18, col:92> Text=" Find index of a value with offset of from with custom comparison function."
|     |   |-ParagraphComment 0x1afced97a90 <line:179:11>
|     |   | `-TextComment 0x1afced97a68 <col:11> Text=" "
|     |   |-TParamCommandComment 0x1afced97ab0 <col:12, line:180:11> Param="T2" Position=<0>
|     |   | `-ParagraphComment 0x1afced97b38 <col:11>
|     |   |   `-TextComment 0x1afced97b10 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced97b58 <col:12, line:181:11> [in] implicitly Param="_callback" ParamIndex=0
|     |   | `-ParagraphComment 0x1afced97bd8 <col:11>
|     |   |   `-TextComment 0x1afced97bb0 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced97bf8 <col:12, line:182:11> [in] implicitly Param="_what" ParamIndex=1
|     |   | `-ParagraphComment 0x1afced97c70 <col:11>
|     |   |   `-TextComment 0x1afced97c48 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced97c90 <col:12, line:183:11> [in] implicitly Param="_from" ParamIndex=2
|     |   | `-ParagraphComment 0x1afced97d08 <col:11>
|     |   |   `-TextComment 0x1afced97ce0 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced97d28 <col:12, col:61> Name="return"
|     |     `-ParagraphComment 0x1afced97d78 <col:19, col:61>
|     |       `-TextComment 0x1afced97d50 <col:19, col:61> Text=" index of value. notFound if nothing found."
|     |-CXXMethodDecl 0x1afcebf79a8 <line:195:9, col:60> col:20 insert 'Vector<T> &(const u32 &, const T &)'
|     | |-ParmVarDecl 0x1afcebf77b8 <col:27, col:38> col:38 _index 'const u32 &'
|     | |-ParmVarDecl 0x1afcebf7830 <col:46, col:55> col:55 _item 'const T &'
|     | `-FullComment 0x1afced98588 <line:189:11, line:193:23>
|     |   |-ParagraphComment 0x1afced982e0 <line:189:11>
|     |   | `-TextComment 0x1afced982b8 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afced98300 <col:12, col:52> Name="brief"
|     |   | `-ParagraphComment 0x1afced98350 <col:18, col:52>
|     |   |   `-TextComment 0x1afced98328 <col:18, col:52> Text=" Insert new item in specifed index."
|     |   |-ParagraphComment 0x1afced98398 <line:191:11>
|     |   | `-TextComment 0x1afced98370 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced983b8 <col:12, line:192:11> [in] implicitly Param="_index" ParamIndex=0
|     |   | `-ParagraphComment 0x1afced98430 <col:11>
|     |   |   `-TextComment 0x1afced98408 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced98450 <col:12, line:193:11> [in] implicitly Param="_item" ParamIndex=1
|     |   | `-ParagraphComment 0x1afced984c8 <col:11>
|     |   |   `-TextComment 0x1afced984a0 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced984e8 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afced98538 <col:19, col:23>
|     |       `-TextComment 0x1afced98510 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebf7d48 <line:196:9, col:55> col:20 insert 'Vector<T> &(const u32 &, T &&)'
|     | |-ParmVarDecl 0x1afcebf7af8 <col:27, col:38> col:38 _index 'const u32 &'
|     | `-ParmVarDecl 0x1afcebf7bd0 <col:46, col:50> col:50 _item 'T &&'
|     |-CXXMethodDecl 0x1afcebf81b0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:205:82> col:33 insert 'Vector<T> &(const u32 &, const Vector<T> &)' inline
|     | |-ParmVarDecl 0x1afcebf7ec8 <col:40, col:51> col:51 _index 'const u32 &'
|     | |-ParmVarDecl 0x1afcebf8028 <col:59, col:76> col:76 _items 'const Vector<T> &'
|     | |-AlwaysInlineAttr 0x1afcebf8260 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced988b8 <./src\Core/Container/Vector.h:199:11, line:203:23>
|     |   |-ParagraphComment 0x1afced98610 <line:199:11>
|     |   | `-TextComment 0x1afced985e8 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afced98630 <col:12, col:58> Name="brief"
|     |   | `-ParagraphComment 0x1afced98680 <col:18, col:58>
|     |   |   `-TextComment 0x1afced98658 <col:18, col:58> Text=" Insert multiple items in specifed index."
|     |   |-ParagraphComment 0x1afced986c8 <line:201:11>
|     |   | `-TextComment 0x1afced986a0 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced986e8 <col:12, line:202:11> [in] implicitly Param="_index" ParamIndex=0
|     |   | `-ParagraphComment 0x1afced98760 <col:11>
|     |   |   `-TextComment 0x1afced98738 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced98780 <col:12, line:203:11> [in] implicitly Param="_items" ParamIndex=1
|     |   | `-ParagraphComment 0x1afced987f8 <col:11>
|     |   |   `-TextComment 0x1afced987d0 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced98818 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afced98868 <col:19, col:23>
|     |       `-TextComment 0x1afced98840 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebf8558 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:206:97> col:33 invalid insert 'Vector<T> &(const u32 &, const int &)' inline
|     | |-ParmVarDecl 0x1afcebf8358 <col:40, col:51> col:51 _index 'const u32 &'
|     | |-ParmVarDecl 0x1afcebf83e8 <col:59, col:91> col:91 invalid _items 'const int &'
|     | `-AlwaysInlineAttr 0x1afcebf8608 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXMethodDecl 0x1afcebf8978 <./src\Core/Container/Vector.h:207:9, col:79> col:20 insert 'Vector<T> &(const u32 &, const T *, const u32 &)'
|     | |-ParmVarDecl 0x1afcebf86f8 <col:27, col:38> col:38 _index 'const u32 &'
|     | |-ParmVarDecl 0x1afcebf8770 <col:46, col:55> col:55 _items 'const T *'
|     | `-ParmVarDecl 0x1afcebf87e8 <col:63, col:74> col:74 _size 'const u32 &'
|     |-CXXMethodDecl 0x1afcebf8a80 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:212:37> col:27 isEmpty 'bool () const' inline
|     | |-AlwaysInlineAttr 0x1afcebf8b20 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced989e0 <./src\Core/Container/Vector.h:210:11, col:40>
|     |   |-ParagraphComment 0x1afced98940 <col:11>
|     |   | `-TextComment 0x1afced98918 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced98960 <col:12, col:40> Name="brief"
|     |     `-ParagraphComment 0x1afced989b0 <col:18, col:40>
|     |       `-TextComment 0x1afced98988 <col:18, col:40> Text=" Check vector is empty."
|     |-CXXMethodDecl 0x1afcebf8bc8 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:217:40> col:27 isNotEmpty 'bool () const' inline
|     | |-AlwaysInlineAttr 0x1afcebf8c68 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced98b08 <./src\Core/Container/Vector.h:215:11, col:44>
|     |   |-ParagraphComment 0x1afced98a68 <col:11>
|     |   | `-TextComment 0x1afced98a40 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced98a88 <col:12, col:44> Name="brief"
|     |     `-ParagraphComment 0x1afced98ad8 <col:18, col:44>
|     |       `-TextComment 0x1afced98ab0 <col:18, col:44> Text=" Check vector is not empty."
|     |-CXXMethodDecl 0x1afcebf8d10 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:222:30> col:25 last 'T &()' inline
|     | |-AlwaysInlineAttr 0x1afcebf8db0 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afced98c30 <./src\Core/Container/Vector.h:220:11, col:32>
|     |   |-ParagraphComment 0x1afced98b90 <col:11>
|     |   | `-TextComment 0x1afced98b68 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced98bb0 <col:12, col:32> Name="brief"
|     |     `-ParagraphComment 0x1afced98c00 <col:18, col:32>
|     |       `-TextComment 0x1afced98bd8 <col:18, col:32> Text=" Get last item."
|     |-CXXMethodDecl 0x1afcebf8e28 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:223:31> col:24 last 'T () const' inline
|     | `-AlwaysInlineAttr 0x1afcebf8ec8 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXMethodDecl 0x1afcebf9070 <./src\Core/Container/Vector.h:232:9, col:73> col:13 lastIndexOf 'u32 (const T &, const u32) const'
|     | |-ParmVarDecl 0x1afcebf8f60 <col:25, col:34> col:34 _what 'const T &'
|     | |-ParmVarDecl 0x1afcebf8fd8 <col:41, col:68> col:51 _from 'const u32':'const unsigned int' cinit
|     | | `-ImplicitCastExpr 0x1afcebfe2e8 <col:59, col:68> 'unsigned int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x1afcebfe2b8 <col:59, col:68> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int' non_odr_use_constant
|     | `-FullComment 0x1afced98f60 <line:226:11, line:230:61>
|     |   |-ParagraphComment 0x1afced98cb8 <line:226:11>
|     |   | `-TextComment 0x1afced98c90 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afced98cd8 <col:12, col:82> Name="brief"
|     |   | `-ParagraphComment 0x1afced98d28 <col:18, col:82>
|     |   |   `-TextComment 0x1afced98d00 <col:18, col:82> Text=" Find index of a value with offset of from but in reversed order."
|     |   |-ParagraphComment 0x1afced98d70 <line:228:11>
|     |   | `-TextComment 0x1afced98d48 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced98d90 <col:12, line:229:11> [in] implicitly Param="_what" ParamIndex=0
|     |   | `-ParagraphComment 0x1afced98e08 <col:11>
|     |   |   `-TextComment 0x1afced98de0 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced98e28 <col:12, line:230:11> [in] implicitly Param="_from" ParamIndex=1
|     |   | `-ParagraphComment 0x1afced98ea0 <col:11>
|     |   |   `-TextComment 0x1afced98e78 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced98ec0 <col:12, col:61> Name="return"
|     |     `-ParagraphComment 0x1afced98f10 <col:19, col:61>
|     |       `-TextComment 0x1afced98ee8 <col:19, col:61> Text=" index of value. notFound if nothing found."
|     |-CXXMethodDecl 0x1afcebfa388 <line:241:9, col:105> col:13 invalid lastIndexOf 'u32 (const int &, const u32) const'
|     | |-ParmVarDecl 0x1afcebfa278 <col:25, col:62> col:62 invalid _callback 'const int &'
|     | |-ParmVarDecl 0x1afcebfa2f0 <col:73, col:100> col:83 _from 'const u32':'const unsigned int' cinit
|     | | `-ImplicitCastExpr 0x1afcebfe398 <col:91, col:100> 'unsigned int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x1afcebfe368 <col:91, col:100> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int' non_odr_use_constant
|     | `-FullComment 0x1afced99298 <line:235:11, line:239:61>
|     |   |-ParagraphComment 0x1afced98fe8 <line:235:11>
|     |   | `-TextComment 0x1afced98fc0 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afced99008 <col:12, col:105> Name="brief"
|     |   | `-ParagraphComment 0x1afced99058 <col:18, col:105>
|     |   |   `-TextComment 0x1afced99030 <col:18, col:105> Text=" Find index of a value with offset of from with custom a callback but in reversed order."
|     |   |-ParagraphComment 0x1afced990a0 <line:237:11>
|     |   | `-TextComment 0x1afced99078 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced990c0 <col:12, line:238:11> [in] implicitly Param="_callback" ParamIndex=0
|     |   | `-ParagraphComment 0x1afced99140 <col:11>
|     |   |   `-TextComment 0x1afced99118 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afced99160 <col:12, line:239:11> [in] implicitly Param="_from" ParamIndex=1
|     |   | `-ParagraphComment 0x1afced991d8 <col:11>
|     |   |   `-TextComment 0x1afced991b0 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afced991f8 <col:12, col:61> Name="return"
|     |     `-ParagraphComment 0x1afced99248 <col:19, col:61>
|     |       `-TextComment 0x1afced99220 <col:19, col:61> Text=" index of value. notFound if nothing found."
|     |-FunctionTemplateDecl 0x1afcebfa940 <line:252:9, line:253:134> col:13 invalid lastIndexOf
|     | |-TemplateTypeParmDecl 0x1afcebfa468 <line:252:18, col:27> col:27 referenced typename depth 1 index 0 T2
|     | |-CXXMethodDecl 0x1afcebfa8a0 <line:253:9, col:134> col:13 invalid lastIndexOf 'u32 (const int &, const T2 &, const u32) const'
|     | | |-ParmVarDecl 0x1afcebfa6c8 <col:25, col:73> col:73 invalid _callback 'const int &'
|     | | |-ParmVarDecl 0x1afcebfa740 <col:85, col:95> col:95 _what 'const T2 &'
|     | | |-ParmVarDecl 0x1afcebfa7b8 <col:102, col:129> col:112 _from 'const u32':'const unsigned int' cinit
|     | | | `-ImplicitCastExpr 0x1afcebfe448 <col:120, col:129> 'unsigned int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x1afcebfe418 <col:120, col:129> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int' non_odr_use_constant
|     | | `-FullComment 0x1afcede6a58 <line:244:11, line:250:61>
|     | |   |-ParagraphComment 0x1afcede6660 <line:244:11>
|     | |   | `-TextComment 0x1afcede6638 <col:11> Text=" "
|     | |   |-BlockCommandComment 0x1afcede6680 <col:12, col:114> Name="brief"
|     | |   | `-ParagraphComment 0x1afcede66d0 <col:18, col:114>
|     | |   |   `-TextComment 0x1afcede66a8 <col:18, col:114> Text=" Find index of a value with offset of from with custom comparison function but in reversed order."
|     | |   |-ParagraphComment 0x1afcede6718 <line:246:11>
|     | |   | `-TextComment 0x1afcede66f0 <col:11> Text=" "
|     | |   |-TParamCommandComment 0x1afcede6738 <col:12, line:247:11> Param="T2"
|     | |   | `-ParagraphComment 0x1afcede67b8 <col:11>
|     | |   |   `-TextComment 0x1afcede6790 <col:11> Text=" "
|     | |   |-ParamCommandComment 0x1afcede67d8 <col:12, line:248:11> [in] implicitly Param="_callback" ParamIndex=0
|     | |   | `-ParagraphComment 0x1afcede6858 <col:11>
|     | |   |   `-TextComment 0x1afcede6830 <col:11> Text=" "
|     | |   |-ParamCommandComment 0x1afcede6878 <col:12, line:249:11> [in] implicitly Param="_what" ParamIndex=1
|     | |   | `-ParagraphComment 0x1afcede68f0 <col:11>
|     | |   |   `-TextComment 0x1afcede68c8 <col:11> Text=" "
|     | |   |-ParamCommandComment 0x1afcede6910 <col:12, line:250:11> [in] implicitly Param="_from" ParamIndex=2
|     | |   | `-ParagraphComment 0x1afcede6988 <col:11>
|     | |   |   `-TextComment 0x1afcede6960 <col:11> Text=" "
|     | |   `-BlockCommandComment 0x1afcede69a8 <col:12, col:61> Name="return"
|     | |     `-ParagraphComment 0x1afcede69f8 <col:19, col:61>
|     | |       `-TextComment 0x1afcede69d0 <col:19, col:61> Text=" index of value. notFound if nothing found."
|     | `-FullComment 0x1afcede65d8 <line:244:11, line:250:61>
|     |   |-ParagraphComment 0x1afcede61d8 <line:244:11>
|     |   | `-TextComment 0x1afcede61b0 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede61f8 <col:12, col:114> Name="brief"
|     |   | `-ParagraphComment 0x1afcede6248 <col:18, col:114>
|     |   |   `-TextComment 0x1afcede6220 <col:18, col:114> Text=" Find index of a value with offset of from with custom comparison function but in reversed order."
|     |   |-ParagraphComment 0x1afcede6290 <line:246:11>
|     |   | `-TextComment 0x1afcede6268 <col:11> Text=" "
|     |   |-TParamCommandComment 0x1afcede62b0 <col:12, line:247:11> Param="T2" Position=<0>
|     |   | `-ParagraphComment 0x1afcede6338 <col:11>
|     |   |   `-TextComment 0x1afcede6310 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afcede6358 <col:12, line:248:11> [in] implicitly Param="_callback" ParamIndex=0
|     |   | `-ParagraphComment 0x1afcede63d8 <col:11>
|     |   |   `-TextComment 0x1afcede63b0 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afcede63f8 <col:12, line:249:11> [in] implicitly Param="_what" ParamIndex=1
|     |   | `-ParagraphComment 0x1afcede6470 <col:11>
|     |   |   `-TextComment 0x1afcede6448 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afcede6490 <col:12, line:250:11> [in] implicitly Param="_from" ParamIndex=2
|     |   | `-ParagraphComment 0x1afcede6508 <col:11>
|     |   |   `-TextComment 0x1afcede64e0 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afcede6528 <col:12, col:61> Name="return"
|     |     `-ParagraphComment 0x1afcede6578 <col:19, col:61>
|     |       `-TextComment 0x1afcede6550 <col:19, col:61> Text=" index of value. notFound if nothing found."
|     |-CXXMethodDecl 0x1afcebfaa60 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:260:32> col:24 popBack 'T ()' inline
|     | |-AlwaysInlineAttr 0x1afcebfab00 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afcede6c48 <./src\Core/Container/Vector.h:256:11, line:258:34>
|     |   |-ParagraphComment 0x1afcede6ae0 <line:256:11>
|     |   | `-TextComment 0x1afcede6ab8 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede6b00 <col:12, col:53> Name="brief"
|     |   | `-ParagraphComment 0x1afcede6b50 <col:18, col:53>
|     |   |   `-TextComment 0x1afcede6b28 <col:18, col:53> Text=" Get last item value then remove it."
|     |   |-ParagraphComment 0x1afcede6b98 <line:258:11>
|     |   | `-TextComment 0x1afcede6b70 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afcede6bb8 <col:12, col:34> Name="return"
|     |     `-ParagraphComment 0x1afcede6c08 <col:19, col:34>
|     |       `-TextComment 0x1afcede6be0 <col:19, col:34> Text=" Last Item Value"
|     |-CXXMethodDecl 0x1afcebfaba8 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:267:33> col:24 popFront 'T ()' inline
|     | |-AlwaysInlineAttr 0x1afcebfac48 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afcede6e38 <./src\Core/Container/Vector.h:263:11, line:265:35>
|     |   |-ParagraphComment 0x1afcede6cd0 <line:263:11>
|     |   | `-TextComment 0x1afcede6ca8 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede6cf0 <col:12, col:54> Name="brief"
|     |   | `-ParagraphComment 0x1afcede6d40 <col:18, col:54>
|     |   |   `-TextComment 0x1afcede6d18 <col:18, col:54> Text=" Get first item value then remove it."
|     |   |-ParagraphComment 0x1afcede6d88 <line:265:11>
|     |   | `-TextComment 0x1afcede6d60 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afcede6da8 <col:12, col:35> Name="return"
|     |     `-ParagraphComment 0x1afcede6df8 <col:19, col:35>
|     |       `-TextComment 0x1afcede6dd0 <col:19, col:35> Text=" First Item Value"
|     |-CXXMethodDecl 0x1afcebfaec8 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:275:56> col:33 pushBack 'Vector<T> &(const T &)' inline
|     | |-ParmVarDecl 0x1afcebfad68 <col:42, col:51> col:51 _item 'const T &'
|     | |-AlwaysInlineAttr 0x1afcebfaf70 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afcede70c8 <./src\Core/Container/Vector.h:270:11, line:273:23>
|     |   |-ParagraphComment 0x1afcede6ec0 <line:270:11>
|     |   | `-TextComment 0x1afcede6e98 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede6ee0 <col:12, col:48> Name="brief"
|     |   | `-ParagraphComment 0x1afcede6f30 <col:18, col:48>
|     |   |   `-TextComment 0x1afcede6f08 <col:18, col:48> Text=" Add new item to end of vector."
|     |   |-ParagraphComment 0x1afcede6f78 <line:272:11>
|     |   | `-TextComment 0x1afcede6f50 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afcede6f98 <col:12, line:273:11> [in] implicitly Param="_item" ParamIndex=0
|     |   | `-ParagraphComment 0x1afcede7010 <col:11>
|     |   |   `-TextComment 0x1afcede6fe8 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afcede7030 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afcede7080 <col:19, col:23>
|     |       `-TextComment 0x1afcede7058 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebfb1e0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:276:51> col:33 pushBack 'Vector<T> &(T &&)' inline
|     | |-ParmVarDecl 0x1afcebfb068 <col:42, col:46> col:46 _item 'T &&'
|     | `-AlwaysInlineAttr 0x1afcebfb288 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXMethodDecl 0x1afcebfb4c8 <col:25, ./src\Core/Container/Vector.h:284:57> col:33 pushFront 'Vector<T> &(const T &)' inline
|     | |-ParmVarDecl 0x1afcebfb3a8 <col:43, col:52> col:52 _item 'const T &'
|     | |-AlwaysInlineAttr 0x1afcebfb570 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afcede7358 <./src\Core/Container/Vector.h:279:11, line:282:23>
|     |   |-ParagraphComment 0x1afcede7150 <line:279:11>
|     |   | `-TextComment 0x1afcede7128 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede7170 <col:12, col:50> Name="brief"
|     |   | `-ParagraphComment 0x1afcede71c0 <col:18, col:50>
|     |   |   `-TextComment 0x1afcede7198 <col:18, col:50> Text=" Add new item to begin of vector."
|     |   |-ParagraphComment 0x1afcede7208 <line:281:11>
|     |   | `-TextComment 0x1afcede71e0 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afcede7228 <col:12, line:282:11> [in] implicitly Param="_item" ParamIndex=0
|     |   | `-ParagraphComment 0x1afcede72a0 <col:11>
|     |   |   `-TextComment 0x1afcede7278 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afcede72c0 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afcede7310 <col:19, col:23>
|     |       `-TextComment 0x1afcede72e8 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebfb788 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:285:52> col:33 pushFront 'Vector<T> &(T &&)' inline
|     | |-ParmVarDecl 0x1afcebfb668 <col:43, col:47> col:47 _item 'T &&'
|     | `-AlwaysInlineAttr 0x1afcebfb830 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXMethodDecl 0x1afcebfbb48 <./src\Core/Container/Vector.h:294:9, col:67> col:20 remove 'Vector<T> &(const u32 &, const u32 &)'
|     | |-ParmVarDecl 0x1afcebfb958 <col:27, col:38> col:38 _index 'const u32 &'
|     | |-ParmVarDecl 0x1afcebfb9d0 <col:46, col:66> col:57 _count 'const u32 &' cinit
|     | | `-ExprWithCleanups 0x1afcebfe4b8 <col:66> 'const u32':'const unsigned int' lvalue
|     | |   `-MaterializeTemporaryExpr 0x1afcebfe4a0 <col:66> 'const u32':'const unsigned int' lvalue
|     | |     `-ImplicitCastExpr 0x1afcebfe488 <col:66> 'const u32':'const unsigned int' <IntegralCast>
|     | |       `-IntegerLiteral 0x1afcebfe460 <col:66> 'int' 1
|     | `-FullComment 0x1afcede7688 <line:288:11, line:292:23>
|     |   |-ParagraphComment 0x1afcede73e0 <line:288:11>
|     |   | `-TextComment 0x1afcede73b8 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede7400 <col:12, col:43> Name="brief"
|     |   | `-ParagraphComment 0x1afcede7450 <col:18, col:43>
|     |   |   `-TextComment 0x1afcede7428 <col:18, col:43> Text=" Remove items from vector."
|     |   |-ParagraphComment 0x1afcede7498 <line:290:11>
|     |   | `-TextComment 0x1afcede7470 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afcede74b8 <col:12, line:291:11> [in] implicitly Param="_index" ParamIndex=0
|     |   | `-ParagraphComment 0x1afcede7530 <col:11>
|     |   |   `-TextComment 0x1afcede7508 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afcede7550 <col:12, line:292:11> [in] implicitly Param="_count" ParamIndex=1
|     |   | `-ParagraphComment 0x1afcede75c8 <col:11>
|     |   |   `-TextComment 0x1afcede75a0 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afcede75e8 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afcede7638 <col:19, col:23>
|     |       `-TextComment 0x1afcede7610 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebfbe28 <line:301:9, col:50> col:20 resize 'Vector<T> &(const u32 &)'
|     | |-ParmVarDecl 0x1afcebfbcc8 <col:27, col:38> col:38 _newCapacity 'const u32 &'
|     | `-FullComment 0x1afcede7878 <line:297:11, line:299:23>
|     |   |-ParagraphComment 0x1afcede7710 <line:297:11>
|     |   | `-TextComment 0x1afcede76e8 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede7730 <col:12, col:44> Name="brief"
|     |   | `-ParagraphComment 0x1afcede7780 <col:18, col:44>
|     |   |   `-TextComment 0x1afcede7758 <col:18, col:44> Text=" Resize capacity of vector."
|     |   |-ParagraphComment 0x1afcede77c8 <line:299:11>
|     |   | `-TextComment 0x1afcede77a0 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afcede77e8 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afcede7838 <col:19, col:23>
|     |       `-TextComment 0x1afcede7810 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebfc038 <line:308:9, col:28> col:20 reverse 'Vector<T> &()'
|     | `-FullComment 0x1afcede7a68 <line:304:11, line:306:23>
|     |   |-ParagraphComment 0x1afcede7900 <line:304:11>
|     |   | `-TextComment 0x1afcede78d8 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede7920 <col:12, col:37> Name="brief"
|     |   | `-ParagraphComment 0x1afcede7970 <col:18, col:37>
|     |   |   `-TextComment 0x1afcede7948 <col:18, col:37> Text=" Reverse the vector."
|     |   |-ParagraphComment 0x1afcede79b8 <line:306:11>
|     |   | `-TextComment 0x1afcede7990 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afcede79d8 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afcede7a28 <col:19, col:23>
|     |       `-TextComment 0x1afcede7a00 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebfc358 <line:316:9, col:83> col:20 sort 'Vector<T> &(const Michka::SortDirection &)'
|     | |-ParmVarDecl 0x1afcebfc1f0 <col:25, col:74> col:46 _direction 'const Michka::SortDirection &' cinit
|     | | `-ExprWithCleanups 0x1afcebfe568 <col:59, col:74> 'const Michka::SortDirection' lvalue
|     | |   `-MaterializeTemporaryExpr 0x1afcebfe550 <col:59, col:74> 'const Michka::SortDirection' lvalue
|     | |     `-ImplicitCastExpr 0x1afcebfe538 <col:59, col:74> 'const Michka::SortDirection' <NoOp>
|     | |       `-DeclRefExpr 0x1afcebfe508 <col:59, col:74> 'Michka::SortDirection' EnumConstant 0x1afce0f38e8 'ascending' 'Michka::SortDirection'
|     | `-FullComment 0x1afcede7d00 <line:311:11, line:314:23>
|     |   |-ParagraphComment 0x1afcede7af0 <line:311:11>
|     |   | `-TextComment 0x1afcede7ac8 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede7b10 <col:12, col:30> Name="brief"
|     |   | `-ParagraphComment 0x1afcede7b60 <col:18, col:30>
|     |   |   `-TextComment 0x1afcede7b38 <col:18, col:30> Text=" Sort vector."
|     |   |-ParagraphComment 0x1afcede7ba8 <line:313:11>
|     |   | `-TextComment 0x1afcede7b80 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afcede7bc8 <col:12, line:314:11> [in] implicitly Param="_direction" ParamIndex=0
|     |   | `-ParagraphComment 0x1afcede7c48 <col:11>
|     |   |   `-TextComment 0x1afcede7c20 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afcede7c68 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afcede7cb8 <col:19, col:23>
|     |       `-TextComment 0x1afcede7c90 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebfc718 <line:324:9, col:81> col:20 invalid sort 'Vector<T> &(const int &)'
|     | |-ParmVarDecl 0x1afcebfc5f0 <col:25, col:72> col:72 invalid _callback 'const int &'
|     | `-FullComment 0x1afcede7f98 <line:319:11, line:322:23>
|     |   |-ParagraphComment 0x1afcede7d88 <line:319:11>
|     |   | `-TextComment 0x1afcede7d60 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede7da8 <col:12, col:53> Name="brief"
|     |   | `-ParagraphComment 0x1afcede7df8 <col:18, col:53>
|     |   |   `-TextComment 0x1afcede7dd0 <col:18, col:53> Text=" Sort vector with a custom callback."
|     |   |-ParagraphComment 0x1afcede7e40 <line:321:11>
|     |   | `-TextComment 0x1afcede7e18 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afcede7e60 <col:12, line:322:11> [in] implicitly Param="_callback" ParamIndex=0
|     |   | `-ParagraphComment 0x1afcede7ee0 <col:11>
|     |   |   `-TextComment 0x1afcede7eb8 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afcede7f00 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afcede7f50 <col:19, col:23>
|     |       `-TextComment 0x1afcede7f28 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebfca38 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:333:76> col:33 swap 'Vector<T> &(const u32 &, const u32 &)' inline
|     | |-ParmVarDecl 0x1afcebfc888 <col:38, col:49> col:49 _index1 'const u32 &'
|     | |-ParmVarDecl 0x1afcebfc900 <col:58, col:69> col:69 _index2 'const u32 &'
|     | |-AlwaysInlineAttr 0x1afcebfcae8 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afcede82e0 <./src\Core/Container/Vector.h:327:11, line:331:23>
|     |   |-ParagraphComment 0x1afcede8020 <line:327:11>
|     |   | `-TextComment 0x1afcede7ff8 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede8040 <col:12, col:54> Name="brief"
|     |   | `-ParagraphComment 0x1afcede8090 <col:18, col:54>
|     |   |   `-TextComment 0x1afcede8068 <col:18, col:54> Text=" Swap two values at specific indexes."
|     |   |-ParagraphComment 0x1afcede80d8 <line:329:11>
|     |   | `-TextComment 0x1afcede80b0 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afcede8110 <col:12, line:330:11> [in] implicitly Param="_index1" ParamIndex=0
|     |   | `-ParagraphComment 0x1afcede8188 <col:11>
|     |   |   `-TextComment 0x1afcede8160 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afcede81a8 <col:12, line:331:11> [in] implicitly Param="_index2" ParamIndex=1
|     |   | `-ParagraphComment 0x1afcede8220 <col:11>
|     |   |   `-TextComment 0x1afcede81f8 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afcede8240 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afcede8290 <col:19, col:23>
|     |       `-TextComment 0x1afcede8268 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebfce58 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:341:55> col:33 swap 'Vector<T> &(Vector<T> &)' inline
|     | |-ParmVarDecl 0x1afcebfccf8 <col:38, col:49> col:49 _other 'Vector<T> &'
|     | |-AlwaysInlineAttr 0x1afcebfcf00 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afcede8570 <./src\Core/Container/Vector.h:336:11, line:339:23>
|     |   |-ParagraphComment 0x1afcede8368 <line:336:11>
|     |   | `-TextComment 0x1afcede8340 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede8388 <col:12, col:65> Name="brief"
|     |   | `-ParagraphComment 0x1afcede83d8 <col:18, col:65>
|     |   |   `-TextComment 0x1afcede83b0 <col:18, col:65> Text=" Swap values of this vector with another vector."
|     |   |-ParagraphComment 0x1afcede8420 <line:338:11>
|     |   | `-TextComment 0x1afcede83f8 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afcede8440 <col:12, line:339:11> [in] implicitly Param="_other" ParamIndex=0
|     |   | `-ParagraphComment 0x1afcede84b8 <col:11>
|     |   |   `-TextComment 0x1afcede8490 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afcede84d8 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afcede8528 <col:19, col:23>
|     |       `-TextComment 0x1afcede8500 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebfd0a0 <line:348:9, col:33> col:11 take 'T (const u32 &)'
|     | |-ParmVarDecl 0x1afcebfcf98 <col:16, col:27> col:27 _index 'const u32 &'
|     | `-FullComment 0x1afcede8788 <line:344:11, line:347:9>
|     |   |-ParagraphComment 0x1afcede85f8 <line:344:11>
|     |   | `-TextComment 0x1afcede85d0 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede8618 <col:12, col:65> Name="brief"
|     |   | `-ParagraphComment 0x1afcede8668 <col:18, col:65>
|     |   |   `-TextComment 0x1afcede8640 <col:18, col:65> Text=" Get value of specific index and then remove it."
|     |   |-ParagraphComment 0x1afcede86b0 <line:346:11>
|     |   | `-TextComment 0x1afcede8688 <col:11> Text=" "
|     |   `-ParamCommandComment 0x1afcede86d0 <col:12, line:347:9> [in] implicitly Param="_index" ParamIndex=0
|     |     `-ParagraphComment 0x1afcede8748 <col:1, col:9>
|     |       `-TextComment 0x1afcede8720 <col:1, col:9> Text="         "
|     |-CXXMethodDecl 0x1afcebf5180 <line:355:9, col:27> col:16 toString 'Michka::String () const'
|     | `-FullComment 0x1afcede8978 <line:351:11, line:353:25>
|     |   |-ParagraphComment 0x1afcede8810 <line:351:11>
|     |   | `-TextComment 0x1afcede87e8 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede8830 <col:12, col:39> Name="brief"
|     |   | `-ParagraphComment 0x1afcede8880 <col:18, col:39>
|     |   |   `-TextComment 0x1afcede8858 <col:18, col:39> Text=" Get values as string."
|     |   |-ParagraphComment 0x1afcede88c8 <line:353:11>
|     |   | `-TextComment 0x1afcede88a0 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afcede88e8 <col:12, col:25> Name="return"
|     |     `-ParagraphComment 0x1afcede8938 <col:19, col:25>
|     |       `-TextComment 0x1afcede8910 <col:19, col:25> Text=" String"
|     |-CXXMethodDecl 0x1afcebf5388 <line:363:9, col:27> col:20 unique 'Vector<T> &()'
|     | `-FullComment 0x1afcede8c08 <line:358:11, line:361:23>
|     |   |-ParagraphComment 0x1afcede8a00 <line:358:11>
|     |   | `-TextComment 0x1afcede89d8 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede8a20 <col:12, col:62> Name="brief"
|     |   | `-ParagraphComment 0x1afcede8a70 <col:18, col:62>
|     |   |   `-TextComment 0x1afcede8a48 <col:18, col:62> Text=" Make each item unique and remove duplicates."
|     |   |-ParagraphComment 0x1afcede8ab8 <line:360:11>
|     |   | `-TextComment 0x1afcede8a90 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afcede8ad8 <col:12, line:361:11> [in] implicitly Param="_what"
|     |   | `-ParagraphComment 0x1afcede8b50 <col:11>
|     |   |   `-TextComment 0x1afcede8b28 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afcede8b70 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afcede8bc0 <col:19, col:23>
|     |       `-TextComment 0x1afcede8b98 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebf5748 <line:371:9, col:83> col:20 invalid unique 'Vector<T> &(const int &)'
|     | |-ParmVarDecl 0x1afcebf5620 <col:27, col:74> col:74 invalid _callback 'const int &'
|     | `-FullComment 0x1afcede8ea0 <line:366:11, line:369:23>
|     |   |-ParagraphComment 0x1afcede8c90 <line:366:11>
|     |   | `-TextComment 0x1afcede8c68 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede8cb0 <col:12, col:62> Name="brief"
|     |   | `-ParagraphComment 0x1afcede8d00 <col:18, col:62>
|     |   |   `-TextComment 0x1afcede8cd8 <col:18, col:62> Text=" Make each item unique and remove duplicates."
|     |   |-ParagraphComment 0x1afcede8d48 <line:368:11>
|     |   | `-TextComment 0x1afcede8d20 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afcede8d68 <col:12, line:369:11> [in] implicitly Param="_callback" ParamIndex=0
|     |   | `-ParagraphComment 0x1afcede8de8 <col:11>
|     |   |   `-TextComment 0x1afcede8dc0 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afcede8e08 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afcede8e58 <col:19, col:23>
|     |       `-TextComment 0x1afcede8e30 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebf59c8 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:374:83> col:33 invalid operator= 'Vector<T> &(const int &)' inline
|     | |-ParmVarDecl 0x1afcebf58a0 <col:45, col:77> col:77 invalid _array 'const int &'
|     | `-AlwaysInlineAttr 0x1afcebf5a70 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXMethodDecl 0x1afcebf5db8 <col:25, ./src\Core/Container/Vector.h:375:68> col:33 operator= 'Vector<T> &(const Vector<T> &)' inline
|     | |-ParmVarDecl 0x1afcebf5c58 <col:45, col:62> col:62 _other 'const Vector<T> &'
|     | `-AlwaysInlineAttr 0x1afcebf5e60 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXMethodDecl 0x1afcebfd250 <./src\Core/Container/Vector.h:376:9, col:50> col:20 operator= 'Vector<T> &(Vector<T> &&)'
|     | `-ParmVarDecl 0x1afcebf6048 <col:32, col:44> col:44 _other 'Vector<T> &&'
|     |-CXXMethodDecl 0x1afcebfd3d0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:378:55> col:25 operator[] 'T &(const u32 &)' inline
|     | |-ParmVarDecl 0x1afcebfd308 <col:38, col:49> col:49 _index 'const u32 &'
|     | `-AlwaysInlineAttr 0x1afcebfd478 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXMethodDecl 0x1afcebfd5b0 <col:25, ./src\Core/Container/Vector.h:379:56> col:24 operator[] 'T (const u32 &) const' inline
|     | |-ParmVarDecl 0x1afcebfd4e0 <col:37, col:48> col:48 _index 'const u32 &'
|     | `-AlwaysInlineAttr 0x1afcebfd658 <./src\Core/Defines.h:54:25> __forceinline
|     |-FunctionTemplateDecl 0x1afcebfda70 <./src\Core/Container/Vector.h:381:9, line:382:53> col:14 operator==
|     | |-TemplateTypeParmDecl 0x1afcebfd6b0 <line:381:18, col:27> col:27 referenced typename depth 1 index 0 T2
|     | `-CXXMethodDecl 0x1afcebfd9d0 <line:382:9, col:53> col:14 operator== 'bool (const Vector<T2> &) const'
|     |   `-ParmVarDecl 0x1afcebfd8c8 <col:27, col:45> col:45 _other 'const Vector<T2> &'
|     |-FunctionTemplateDecl 0x1afcebfddd0 <line:384:9, line:385:66> col:27 operator!=
|     | |-TemplateTypeParmDecl 0x1afcebfdad0 <line:384:18, col:27> col:27 referenced typename depth 1 index 0 T2
|     | `-CXXMethodDecl 0x1afcebfdd30 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:385:66> col:27 operator!= 'bool (const Vector<T2> &) const' inline
|     |   |-ParmVarDecl 0x1afcebfdc68 <col:40, col:58> col:58 _other 'const Vector<T2> &'
|     |   `-AlwaysInlineAttr 0x1afcebfde30 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXMethodDecl 0x1afcebfe138 <col:25, ./src\Core/Container/Vector.h:387:69> col:33 operator+= 'Vector<T> &(const Vector<T> &)' inline
|     | |-ParmVarDecl 0x1afcebfe018 <col:46, col:63> col:63 _other 'const Vector<T> &'
|     | `-AlwaysInlineAttr 0x1afcebf6190 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXMethodDecl 0x1afcebf64a0 <col:25, ./src\Core/Container/Vector.h:388:69> col:32 operator+ 'Vector<T> (const Vector<T> &) const' inline
|     | |-ParmVarDecl 0x1afcebf6378 <col:44, col:61> col:61 _other 'const Vector<T> &'
|     | `-AlwaysInlineAttr 0x1afcebf6548 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXMethodDecl 0x1afcebf6788 <col:25, ./src\Core/Container/Vector.h:397:60> col:33 operator<< 'Vector<T> &(const T &)' inline
|     | |-ParmVarDecl 0x1afcebf6668 <col:46, col:55> col:55 _item 'const T &'
|     | |-AlwaysInlineAttr 0x1afcebf6830 <./src\Core/Defines.h:54:25> __forceinline
|     | `-FullComment 0x1afcede91d0 <./src\Core/Container/Vector.h:391:11, line:395:23>
|     |   |-ParagraphComment 0x1afcede8f28 <line:391:11>
|     |   | `-TextComment 0x1afcede8f00 <col:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede8f48 <col:12, line:392:11> Name="brief"
|     |   | `-ParagraphComment 0x1afcede8fc0 <line:391:18, line:392:11>
|     |   |   |-TextComment 0x1afcede8f70 <line:391:18, col:33> Text=" Same push back."
|     |   |   `-TextComment 0x1afcede8f90 <line:392:11> Text=" "
|     |   |-BlockCommandComment 0x1afcede8fe0 <col:12, col:23> Name="sa"
|     |   | `-ParagraphComment 0x1afcede9030 <col:15, col:23>
|     |   |   `-TextComment 0x1afcede9008 <col:15, col:23> Text=" pushBack"
|     |   |-ParagraphComment 0x1afcede9078 <line:394:11>
|     |   | `-TextComment 0x1afcede9050 <col:11> Text=" "
|     |   |-ParamCommandComment 0x1afcede9098 <col:12, line:395:11> [in] implicitly Param="_item" ParamIndex=0
|     |   | `-ParagraphComment 0x1afcede9110 <col:11>
|     |   |   `-TextComment 0x1afcede90e8 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afcede9130 <col:12, col:23> Name="return"
|     |     `-ParagraphComment 0x1afcede9180 <col:19, col:23>
|     |       `-TextComment 0x1afcede9158 <col:19, col:23> Text=" Self"
|     |-CXXMethodDecl 0x1afcebf6a48 <./src\Core/Defines.h:54:25, ./src\Core/Container/Vector.h:398:55> col:33 operator<< 'Vector<T> &(T &&)' inline
|     | |-ParmVarDecl 0x1afcebf6928 <col:46, col:50> col:50 _item 'T &&'
|     | `-AlwaysInlineAttr 0x1afcebf6af0 <./src\Core/Defines.h:54:25> __forceinline
|     |-AccessSpecDecl 0x1afcebf6b78 <./src\Core/Container/Vector.h:399:5, col:11> col:5 public
|     |-VarDecl 0x1afcebf6bb8 <line:403:9, col:46> col:26 notFound 'const u32':'const unsigned int' static cinit
|     | |-ImplicitCastExpr 0x1afcebf6cb8 <col:37, col:46> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x1afcebf6c88 <col:37, col:46> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int' non_odr_use_constant
|     | `-FullComment 0x1afcede92f8 <line:401:11, col:55>
|     |   |-ParagraphComment 0x1afcede9258 <col:11>
|     |   | `-TextComment 0x1afcede9230 <col:11> Text=" "
|     |   `-BlockCommandComment 0x1afcede9278 <col:12, col:55> Name="brief"
|     |     `-ParagraphComment 0x1afcede92c8 <col:18, col:55>
|     |       `-TextComment 0x1afcede92a0 <col:18, col:55> Text=" Not found index for search functions."
|     |-AccessSpecDecl 0x1afcebf6d18 <line:405:5, col:14> col:5 protected
|     |-FieldDecl 0x1afcebf6d58 <line:406:9, col:34> col:26 mData 'T *'
|     | `-CXXNullPtrLiteralExpr 0x1afcebfe580 <col:34> 'nullptr_t'
|     |-FieldDecl 0x1afcebf6dc0 <line:407:9, col:34> col:26 mSize 'u32':'unsigned int'
|     | `-ImplicitCastExpr 0x1afcebfe5b8 <col:34> 'u32':'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1afcebfe590 <col:34> 'int' 0
|     |-FieldDecl 0x1afcebf6e28 <line:408:9, col:38> col:26 mCapacity 'u32':'unsigned int'
|     | `-ImplicitCastExpr 0x1afcebfe5f8 <col:38> 'u32':'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x1afcebfe5d0 <col:38> 'int' 0
|     `-VarDecl 0x1afcebf6e90 <line:409:9, col:41> col:26 capacityStep 'const u32':'const unsigned int' static cinit
|       `-ImplicitCastExpr 0x1afcebf6f20 <col:41> 'const u32':'const unsigned int' <IntegralCast>
|         `-IntegerLiteral 0x1afcebf6ef8 <col:41> 'int' 8
|-NamespaceDecl 0x1afcebfe6a0 prev 0x1afcebf0a90 <./src\Core/Container/Vector.inl:31:1, line:709:1> line:31:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| |-CXXConstructorDecl 0x1afcebfe930 parent 0x1afcebf0ba0 prev 0x1afcebef600 <line:33:5, line:34:36> col:29 Vector<T> 'void ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcebfea20 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afcebfee18 parent 0x1afcebf0ba0 <./src\Core/Container/Vector.inl:39:5, line:40:74> col:29 invalid Vector<T> 'void (const int &)' inline
| | |-ParmVarDecl 0x1afcebfed88 <col:36, col:68> col:68 invalid _array 'const int &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcebfef10 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afcec03430 parent 0x1afcebf0ba0 prev 0x1afcebefb30 <./src\Core/Container/Vector.inl:45:5, line:46:59> col:29 Vector<T> 'void (const Vector<T> &)' inline
| | |-ParmVarDecl 0x1afcec03368 <col:36, col:53> col:53 _other 'const Vector<T> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec03528 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afcec039f0 parent 0x1afcebf0ba0 prev 0x1afcebefe70 <./src\Core/Container/Vector.inl:51:5, line:52:54> col:29 Vector<T> 'void (Vector<T> &&)' inline
| | |-ParmVarDecl 0x1afcec03928 <col:36, col:48> col:48 _other 'Vector<T> &&'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec03ae8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXDestructorDecl 0x1afcec03d70 parent 0x1afcebf0ba0 prev 0x1afcebeffc0 <./src\Core/Container/Vector.inl:57:5, line:58:37> col:29 ~Vector<T> 'void ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec03e68 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec043d0 parent 0x1afcebf0ba0 prev 0x1afcebee190 <./src\Core/Container/Vector.inl:63:5, line:64:64> col:58 begin 'typename Vector<T>::Iterator ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec044b8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec049d0 parent 0x1afcebf0ba0 prev 0x1afcebee370 <./src\Core/Container/Vector.inl:69:5, line:70:71> col:63 begin 'typename Vector<T>::ConstIterator () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec04ab8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec04ed8 parent 0x1afcebf0ba0 prev 0x1afcebee638 <./src\Core/Container/Vector.inl:75:5, line:76:46> col:40 clear 'Vector<T> &()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec04fc0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec054b0 parent 0x1afcebf0ba0 prev 0x1afcebee780 <./src\Core/Container/Vector.inl:95:5, line:96:62> col:58 end 'typename Vector<T>::Iterator ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec05598 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec05a70 parent 0x1afcebf0ba0 prev 0x1afcebee8c8 <./src\Core/Container/Vector.inl:101:5, line:102:69> col:63 end 'typename Vector<T>::ConstIterator () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec05b58 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec06118 parent 0x1afcebf0ba0 <./src\Core/Container/Vector.inl:107:5, line:108:80> col:27 invalid filter 'Vector<T> &(const int &)'
| | |-ParmVarDecl 0x1afcec05f68 <col:34, col:71> col:71 invalid _callback 'const int &'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec00480 parent 0x1afcebf0ba0 prev 0x1afcebeeed0 <line:115:5, line:116:38> col:32 first 'T &()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec00568 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec00830 parent 0x1afcebf0ba0 prev 0x1afcebef050 <./src\Core/Container/Vector.inl:121:5, line:122:39> col:31 first 'T () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec00918 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec00b90 parent 0x1afcebf0ba0 prev 0x1afcebf3350 <./src\Core/Container/Vector.inl:127:5, line:128:43> col:33 getSize 'u32 () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec00c78 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec00ef0 parent 0x1afcebf0ba0 prev 0x1afcebf3208 <./src\Core/Container/Vector.inl:133:5, line:134:47> col:33 getCapacity 'u32 () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec00fd8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcebff560 parent 0x1afcebf0ba0 <./src\Core/Container/Vector.inl:139:5, line:140:99> col:39 invalid getFiltered 'Vector<T> (const int &) const' inline
| | |-ParmVarDecl 0x1afcebff3e8 <col:51, col:88> col:88 invalid _callback 'const int &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcebff650 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcebffa40 parent 0x1afcebf0ba0 prev 0x1afcebf3950 <./src\Core/Container/Vector.inl:161:5, line:162:53> col:39 getReversed 'Vector<T> () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcebffb28 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcebfffa0 parent 0x1afcebf0ba0 prev 0x1afcebf3c40 <./src\Core/Container/Vector.inl:170:5, line:171:82> col:39 getSorted 'Vector<T> (const Michka::SortDirection &) const' inline
| | |-ParmVarDecl 0x1afcebffe20 <col:49, col:70> col:70 _direction 'const Michka::SortDirection &' cinit
| | | `-ExprWithCleanups 0x1afcebf7030 <./src\Core/Container/Vector.h:125:76, col:91> 'const Michka::SortDirection' lvalue
| | |   `-MaterializeTemporaryExpr 0x1afcebf7018 <col:76, col:91> 'const Michka::SortDirection' lvalue
| | |     `-ImplicitCastExpr 0x1afcebf7000 <col:76, col:91> 'const Michka::SortDirection' <NoOp>
| | |       `-DeclRefExpr 0x1afcebf6fd0 <col:76, col:91> 'Michka::SortDirection' EnumConstant 0x1afce0f38e8 'ascending' 'Michka::SortDirection'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec00090 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec016c0 parent 0x1afcebf0ba0 <./src\Core/Container/Vector.inl:179:5, line:180:107> col:39 invalid getSorted 'Vector<T> (const int &) const' inline
| | |-ParmVarDecl 0x1afcec01548 <col:49, col:96> col:96 invalid _callback 'const int &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec017b0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec01ba0 parent 0x1afcebf0ba0 prev 0x1afcebec2b0 <./src\Core/Container/Vector.inl:188:5, line:189:49> col:39 getUnique 'Vector<T> ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec01c88 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec09340 parent 0x1afcebf0ba0 <./src\Core/Container/Vector.inl:197:5, line:198:105> col:39 invalid getUnique 'Vector<T> (const int &)' inline
| | |-ParmVarDecl 0x1afcec02118 <col:49, col:96> col:96 invalid _callback 'const int &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec09430 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec09730 parent 0x1afcebf0ba0 prev 0x1afcebec980 <./src\Core/Container/Vector.inl:206:5, line:207:57> col:23 implode 'Michka::String (const Michka::String &) const'
| | |-ParmVarDecl 0x1afcec096a0 <col:31, col:45> col:45 _seperator 'const Michka::String &' cinit
| | | `-OpaqueValueExpr 0x1afcebf70f0 <./src\Core/Container/Vector.h:156:49> 'const Michka::String':'const Michka::StringTemplate<wchar_t>'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec09bb0 parent 0x1afcebf0ba0 prev 0x1afcebecc00 <./src\Core/Container/Vector.inl:242:5, line:243:61> col:20 indexOf 'u32 (const T &, const u32) const'
| | |-ParmVarDecl 0x1afcec09a60 <col:28, col:37> col:37 _what 'const T &'
| | |-ParmVarDecl 0x1afcec09ad8 <col:44, col:54> col:54 _from 'const u32':'const unsigned int' cinit
| | | `-ImplicitCastExpr 0x1afcebf7130 <./src\Core/Container/Vector.h:165:55> 'u32':'unsigned int' <IntegralCast>
| | |   `-IntegerLiteral 0x1afcebf7108 <col:55> 'int' 0
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec0a0e8 parent 0x1afcebf0ba0 <./src\Core/Container/Vector.inl:258:5, line:259:93> col:20 invalid indexOf 'u32 (const int &, const u32) const'
| | |-ParmVarDecl 0x1afcec09fd8 <col:28, col:65> col:65 invalid _callback 'const int &'
| | |-ParmVarDecl 0x1afcec0a050 <col:76, col:86> col:86 _from 'const u32':'const unsigned int'
| | `-<<<NULL>>>
| |-FunctionTemplateDecl 0x1afcec08950 parent 0x1afcebf0ba0 <line:273:5, line:274:122> col:20 invalid indexOf
| | |-TemplateTypeParmDecl 0x1afcec082b0 <line:273:14, col:23> col:23 referenced typename depth 1 index 0 T2
| | `-CXXMethodDecl 0x1afcec08870 parent 0x1afcebf0ba0 <line:272:5, line:274:122> col:20 invalid indexOf 'u32 (const int &, const T2 &, const u32) const'
| |   |-ParmVarDecl 0x1afcec08698 <col:28, col:76> col:76 invalid _callback 'const int &'
| |   |-ParmVarDecl 0x1afcec08710 <col:88, col:98> col:98 _what 'const T2 &'
| |   |-ParmVarDecl 0x1afcec08788 <col:105, col:115> col:115 _from 'const u32':'const unsigned int'
| |   `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec08ef8 parent 0x1afcebf0ba0 prev 0x1afcebf79a8 <line:287:5, line:288:67> col:27 insert 'Vector<T> &(const u32 &, const T &)'
| | |-ParmVarDecl 0x1afcec08c80 <col:34, col:45> col:45 _index 'const u32 &'
| | |-ParmVarDecl 0x1afcec08d30 <col:53, col:62> col:62 _item 'const T &'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec07518 parent 0x1afcebf0ba0 prev 0x1afcebf7d48 <line:310:5, line:311:62> col:27 insert 'Vector<T> &(const u32 &, T &&)'
| | |-ParmVarDecl 0x1afcec072a0 <col:34, col:45> col:45 _index 'const u32 &'
| | |-ParmVarDecl 0x1afcec07350 <col:53, col:57> col:57 _item 'T &&'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec07bd8 parent 0x1afcebf0ba0 prev 0x1afcebf81b0 <line:332:5, line:333:89> col:40 insert 'Vector<T> &(const u32 &, const Vector<T> &)' inline
| | |-ParmVarDecl 0x1afcec078b0 <col:47, col:58> col:58 _index 'const u32 &'
| | |-ParmVarDecl 0x1afcec07a18 <col:66, col:83> col:83 _items 'const Vector<T> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec07cd0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec02250 parent 0x1afcebf0ba0 <./src\Core/Container/Vector.inl:338:5, line:339:104> col:40 invalid insert 'Vector<T> &(const u32 &, const int &)' inline
| | |-ParmVarDecl 0x1afcec07fd0 <col:47, col:58> col:58 _index 'const u32 &'
| | |-ParmVarDecl 0x1afcec08060 <col:66, col:98> col:98 invalid _items 'const int &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec02348 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec02938 parent 0x1afcebf0ba0 prev 0x1afcebf8978 <./src\Core/Container/Vector.inl:344:5, line:345:86> col:27 insert 'Vector<T> &(const u32 &, const T *, const u32 &)'
| | |-ParmVarDecl 0x1afcec02640 <col:34, col:45> col:45 _index 'const u32 &'
| | |-ParmVarDecl 0x1afcec026f0 <col:53, col:62> col:62 _items 'const T *'
| | |-ParmVarDecl 0x1afcec02768 <col:70, col:81> col:81 _size 'const u32 &'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec02c60 parent 0x1afcebf0ba0 prev 0x1afcebf8a80 <line:369:5, line:370:44> col:34 isEmpty 'bool () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec02d48 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec02fc0 parent 0x1afcebf0ba0 prev 0x1afcebf8bc8 <./src\Core/Container/Vector.inl:375:5, line:376:47> col:34 isNotEmpty 'bool () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec030a8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec0a420 parent 0x1afcebf0ba0 prev 0x1afcebf8d10 <./src\Core/Container/Vector.inl:381:5, line:382:37> col:32 last 'T &()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec0a508 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec0a7d0 parent 0x1afcebf0ba0 prev 0x1afcebf8e28 <./src\Core/Container/Vector.inl:387:5, line:388:38> col:31 last 'T () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec0a8b8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec0aca0 parent 0x1afcebf0ba0 prev 0x1afcebf9070 <./src\Core/Container/Vector.inl:393:5, line:394:65> col:20 lastIndexOf 'u32 (const T &, const u32) const'
| | |-ParmVarDecl 0x1afcec0ab50 <col:32, col:41> col:41 _what 'const T &'
| | |-ParmVarDecl 0x1afcec0abc8 <col:48, col:58> col:58 _from 'const u32':'const unsigned int' cinit
| | | `-ImplicitCastExpr 0x1afcebfe2e8 <./src\Core/Container/Vector.h:232:59, col:68> 'unsigned int' <LValueToRValue>
| | |   `-DeclRefExpr 0x1afcebfe2b8 <col:59, col:68> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int' non_odr_use_constant
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec0b1d8 parent 0x1afcebf0ba0 <./src\Core/Container/Vector.inl:409:5, line:410:97> col:20 invalid lastIndexOf 'u32 (const int &, const u32) const'
| | |-ParmVarDecl 0x1afcec0b0c8 <col:32, col:69> col:69 invalid _callback 'const int &'
| | |-ParmVarDecl 0x1afcec0b140 <col:80, col:90> col:90 _from 'const u32':'const unsigned int'
| | `-<<<NULL>>>
| |-FunctionTemplateDecl 0x1afcec28620 parent 0x1afcebf0ba0 <line:424:5, line:425:126> col:20 invalid lastIndexOf
| | |-TemplateTypeParmDecl 0x1afcec27f80 <line:424:14, col:23> col:23 referenced typename depth 1 index 0 T2
| | `-CXXMethodDecl 0x1afcec28540 parent 0x1afcebf0ba0 <line:423:5, line:425:126> col:20 invalid lastIndexOf 'u32 (const int &, const T2 &, const u32) const'
| |   |-ParmVarDecl 0x1afcec28368 <col:32, col:80> col:80 invalid _callback 'const int &'
| |   |-ParmVarDecl 0x1afcec283e0 <col:92, col:102> col:102 _what 'const T2 &'
| |   |-ParmVarDecl 0x1afcec28458 <col:109, col:119> col:119 _from 'const u32':'const unsigned int'
| |   `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec28920 parent 0x1afcebf0ba0 prev 0x1afcebfaa60 <line:438:5, line:439:39> col:31 popBack 'T ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec28a08 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec28cd0 parent 0x1afcebf0ba0 prev 0x1afcebfaba8 <./src\Core/Container/Vector.inl:444:5, line:445:40> col:31 popFront 'T ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec28db8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec2b2e8 parent 0x1afcebf0ba0 prev 0x1afcebfaec8 <./src\Core/Container/Vector.inl:450:5, line:451:63> col:40 pushBack 'Vector<T> &(const T &)' inline
| | |-ParmVarDecl 0x1afcec2b130 <col:49, col:58> col:58 _item 'const T &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec2b3d8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec2b8b8 parent 0x1afcebf0ba0 prev 0x1afcebfb1e0 <./src\Core/Container/Vector.inl:456:5, line:457:58> col:40 pushBack 'Vector<T> &(T &&)' inline
| | |-ParmVarDecl 0x1afcec2b700 <col:49, col:53> col:53 _item 'T &&'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec2b9a8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec28ef0 parent 0x1afcebf0ba0 prev 0x1afcebfb4c8 <./src\Core/Container/Vector.inl:462:5, line:463:64> col:40 pushFront 'Vector<T> &(const T &)' inline
| | |-ParmVarDecl 0x1afcec2bcd0 <col:50, col:59> col:59 _item 'const T &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec28fe0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec29518 parent 0x1afcebf0ba0 prev 0x1afcebfbb48 <./src\Core/Container/Vector.inl:468:5, line:469:70> col:27 remove 'Vector<T> &(const u32 &, const u32 &)'
| | |-ParmVarDecl 0x1afcec292e0 <col:34, col:45> col:45 _index 'const u32 &'
| | |-ParmVarDecl 0x1afcec29358 <col:53, col:64> col:64 _count 'const u32 &' cinit
| | | `-ExprWithCleanups 0x1afcebfe4b8 <./src\Core/Container/Vector.h:294:66> 'const u32':'const unsigned int' lvalue
| | |   `-MaterializeTemporaryExpr 0x1afcebfe4a0 <col:66> 'const u32':'const unsigned int' lvalue
| | |     `-ImplicitCastExpr 0x1afcebfe488 <col:66> 'const u32':'const unsigned int' <IntegralCast>
| | |       `-IntegerLiteral 0x1afcebfe460 <col:66> 'int' 1
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec29a98 parent 0x1afcebf0ba0 prev 0x1afcebfb788 <./src\Core/Container/Vector.inl:488:5, line:489:59> col:40 pushFront 'Vector<T> &(T &&)' inline
| | |-ParmVarDecl 0x1afcec298e0 <col:50, col:54> col:54 _item 'T &&'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec29b88 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec23fe8 parent 0x1afcebf0ba0 prev 0x1afcebfbe28 <./src\Core/Container/Vector.inl:494:5, line:495:57> col:27 resize 'Vector<T> &(const u32 &)'
| | |-ParmVarDecl 0x1afcec29e80 <col:34, col:45> col:45 _newCapacity 'const u32 &'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec244a8 parent 0x1afcebf0ba0 prev 0x1afcebfc038 <line:514:5, line:515:35> col:27 reverse 'Vector<T> &()'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec249e8 parent 0x1afcebf0ba0 prev 0x1afcebfc358 <line:526:5, line:527:63> col:27 sort 'Vector<T> &(const Michka::SortDirection &)'
| | |-ParmVarDecl 0x1afcec24830 <col:32, col:53> col:53 _direction 'const Michka::SortDirection &' cinit
| | | `-ExprWithCleanups 0x1afcebfe568 <./src\Core/Container/Vector.h:316:59, col:74> 'const Michka::SortDirection' lvalue
| | |   `-MaterializeTemporaryExpr 0x1afcebfe550 <col:59, col:74> 'const Michka::SortDirection' lvalue
| | |     `-ImplicitCastExpr 0x1afcebfe538 <col:59, col:74> 'const Michka::SortDirection' <NoOp>
| | |       `-DeclRefExpr 0x1afcebfe508 <col:59, col:74> 'Michka::SortDirection' EnumConstant 0x1afce0f38e8 'ascending' 'Michka::SortDirection'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec250e8 parent 0x1afcebf0ba0 <./src\Core/Container/Vector.inl:534:5, line:535:88> col:27 invalid sort 'Vector<T> &(const int &)'
| | |-ParmVarDecl 0x1afcec24f38 <col:32, col:79> col:79 invalid _callback 'const int &'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec256b8 parent 0x1afcebf0ba0 prev 0x1afcebfca38 <line:542:5, line:543:83> col:40 swap 'Vector<T> &(const u32 &, const u32 &)' inline
| | |-ParmVarDecl 0x1afcec25480 <col:45, col:56> col:56 _index1 'const u32 &'
| | |-ParmVarDecl 0x1afcec254f8 <col:65, col:76> col:76 _index2 'const u32 &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec257b0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec25d48 parent 0x1afcebf0ba0 prev 0x1afcebfce58 <./src\Core/Container/Vector.inl:550:5, line:551:62> col:40 swap 'Vector<T> &(Vector<T> &)' inline
| | |-ParmVarDecl 0x1afcec25b98 <col:45, col:56> col:56 _other 'Vector<T> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec25e38 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec2c220 parent 0x1afcebf0ba0 prev 0x1afcebfd0a0 <./src\Core/Container/Vector.inl:560:5, line:561:40> col:18 take 'T (const u32 &)'
| | |-ParmVarDecl 0x1afcec2c130 <col:23, col:34> col:34 _index 'const u32 &'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec2c530 parent 0x1afcebf0ba0 prev 0x1afcebf5180 <line:569:5, line:570:34> col:23 toString 'Michka::String () const'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec2c9e8 parent 0x1afcebf0ba0 prev 0x1afcebf5388 <line:584:5, line:585:34> col:27 unique 'Vector<T> &()'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec26078 parent 0x1afcebf0ba0 <line:599:5, line:600:90> col:27 invalid unique 'Vector<T> &(const int &)'
| | |-ParmVarDecl 0x1afcec25ec0 <col:34, col:81> col:81 invalid _callback 'const int &'
| | `-<<<NULL>>>
| |-FunctionTemplateDecl 0x1afcec266b0 parent 0x1afcebf0ba0 prev 0x1afcebfda70 <line:615:5, line:616:60> col:21 operator==
| | |-TemplateTypeParmDecl 0x1afcec26210 <line:615:14, col:23> col:23 referenced typename depth 1 index 0 T2
| | `-CXXMethodDecl 0x1afcec265d0 parent 0x1afcebf0ba0 prev 0x1afcebfd9d0 <line:614:5, line:616:60> col:21 operator== 'bool (const Vector<T2> &) const'
| |   |-ParmVarDecl 0x1afcec26508 <col:34, col:52> col:52 _other 'const Vector<T2> &'
| |   `-<<<NULL>>>
| |-FunctionTemplateDecl 0x1afcec26ce0 parent 0x1afcebf0ba0 prev 0x1afcebfddd0 <line:634:5, line:635:73> col:34 operator!=
| | |-TemplateTypeParmDecl 0x1afcec26840 <line:634:14, col:23> col:23 referenced typename depth 1 index 0 T2
| | `-CXXMethodDecl 0x1afcec26c00 parent 0x1afcebf0ba0 prev 0x1afcebfdd30 <line:633:5, line:635:73> col:34 operator!= 'bool (const Vector<T2> &) const' inline
| |   |-ParmVarDecl 0x1afcec26b38 <col:47, col:65> col:65 _other 'const Vector<T2> &'
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afcec26d58 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec27388 parent 0x1afcebf0ba0 prev 0x1afcebfe138 <./src\Core/Container/Vector.inl:640:5, line:641:76> col:40 operator+= 'Vector<T> &(const Vector<T> &)' inline
| | |-ParmVarDecl 0x1afcec271d8 <col:53, col:70> col:70 _other 'const Vector<T> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec27478 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec279d0 parent 0x1afcebf0ba0 prev 0x1afcebf64a0 <./src\Core/Container/Vector.inl:648:5, line:649:76> col:39 operator+ 'Vector<T> (const Vector<T> &) const' inline
| | |-ParmVarDecl 0x1afcec27858 <col:51, col:68> col:68 _other 'const Vector<T> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec27ac0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec35068 parent 0x1afcebf0ba0 <./src\Core/Container/Vector.inl:657:5, line:658:90> col:40 invalid operator= 'Vector<T> &(const int &)' inline
| | |-ParmVarDecl 0x1afcec27dd8 <col:52, col:84> col:84 invalid _array 'const int &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec35158 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec356e8 parent 0x1afcebf0ba0 prev 0x1afcebf5db8 <./src\Core/Container/Vector.inl:665:5, line:666:75> col:40 operator= 'Vector<T> &(const Vector<T> &)' inline
| | |-ParmVarDecl 0x1afcec35538 <col:52, col:69> col:69 _other 'const Vector<T> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec357d8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec35d68 parent 0x1afcebf0ba0 prev 0x1afcebfd250 <./src\Core/Container/Vector.inl:673:5, line:674:57> col:27 operator= 'Vector<T> &(Vector<T> &&)'
| | |-ParmVarDecl 0x1afcec35bb8 <col:39, col:51> col:51 _other 'Vector<T> &&'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec2f100 parent 0x1afcebf0ba0 prev 0x1afcebfd5b0 <line:686:5, line:687:63> col:31 operator[] 'T (const u32 &) const' inline
| | |-ParmVarDecl 0x1afcec2f010 <col:44, col:55> col:55 _index 'const u32 &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec2f1f0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec2f580 parent 0x1afcebf0ba0 prev 0x1afcebfd3d0 <./src\Core/Container/Vector.inl:692:5, line:693:62> col:32 operator[] 'T &(const u32 &)' inline
| | |-ParmVarDecl 0x1afcec2f460 <col:45, col:56> col:56 _index 'const u32 &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec2f670 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec2fb58 parent 0x1afcebf0ba0 prev 0x1afcebf6788 <./src\Core/Container/Vector.inl:698:5, line:699:67> col:40 operator<< 'Vector<T> &(const T &)' inline
| | |-ParmVarDecl 0x1afcec2f9a0 <col:53, col:62> col:62 _item 'const T &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec2fc48 <./src\Core/Defines.h:54:25> __forceinline
| `-CXXMethodDecl 0x1afcec2e138 parent 0x1afcebf0ba0 prev 0x1afcebf6a48 <./src\Core/Container/Vector.inl:704:5, line:705:62> col:40 operator<< 'Vector<T> &(T &&)' inline
|   |-ParmVarDecl 0x1afcec2df80 <col:53, col:57> col:57 _item 'T &&'
|   |-<<<NULL>>>
|   `-AlwaysInlineAttr 0x1afcec2e228 <./src\Core/Defines.h:54:25> __forceinline
|-NamespaceDecl 0x1afcec2e2e0 prev 0x1afcebfe6a0 <./src\Core/Exception/Exception.h:32:1, line:44:1> line:32:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| `-CXXRecordDecl 0x1afcec2e350 <line:34:5, line:43:5> line:34:11 class Exception definition
|   |-DefinitionData polymorphic literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit
|   | |-CopyAssignment simple non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial
|   | `-Destructor simple irrelevant trivial
|   |-CXXRecordDecl 0x1afcec2e470 <col:5, col:11> col:11 implicit class Exception
|   |-AccessSpecDecl 0x1afcec2e500 <line:36:5, col:11> col:5 public
|   |-CXXMethodDecl 0x1afcec2e5b8 <line:39:9, line:42:9> line:39:29 getMessage 'const char *() const' virtual
|   | `-CompoundStmt 0x1afcec2ebc8 <line:40:9, line:42:9>
|   |   `-ReturnStmt 0x1afcec2ebb8 <line:41:13, col:25>
|   |     `-RecoveryExpr 0x1afcec2eb90 <col:20, col:25> '<dependent type>' contains-errors lvalue
|   |       `-UnresolvedLookupExpr 0x1afcec2eb50 <col:20> '<overloaded function type>' lvalue (ADL) = 'what' empty
|   |-CXXMethodDecl 0x1afcec2e6c0 <line:34:11> col:11 implicit constexpr operator= 'Michka::Exception &(const Michka::Exception &)' inline default noexcept-unevaluated 0x1afcec2e6c0
|   | `-ParmVarDecl 0x1afcec2e7e0 <col:11> col:11 'const Michka::Exception &'
|   |-CXXMethodDecl 0x1afcec2e880 <col:11> col:11 implicit constexpr operator= 'Michka::Exception &(Michka::Exception &&)' inline default noexcept-unevaluated 0x1afcec2e880
|   | `-ParmVarDecl 0x1afcec2e9a0 <col:11> col:11 'Michka::Exception &&'
|   `-CXXDestructorDecl 0x1afcec2ea28 <col:11> col:11 implicit ~Exception 'void ()' inline default trivial noexcept-unevaluated 0x1afcec2ea28
|-NamespaceDecl 0x1afcec2ec10 prev 0x1afcec2e2e0 <./src\Core/Container/String.inl:33:1, line:995:1> line:33:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| |-VarDecl 0x1afcec38088 parent 0x1afce101a80 prev 0x1afce10cdc8 <line:35:5, line:36:48> col:48 empty 'const StringTemplate<T>':'const StringTemplate<T>'
| |-VarDecl 0x1afcec38350 parent 0x1afce101a80 prev 0x1afce10cc70 <line:38:5, line:39:54> col:34 notFound 'const u32':'const unsigned int' cinit
| | `-ImplicitCastExpr 0x1afcec38498 <col:45, col:54> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x1afcec38468 <col:45, col:54> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int' non_odr_use_constant
| |-CXXConstructorDecl 0x1afcec38720 parent 0x1afce101a80 prev 0x1afce102560 <line:41:5, line:42:52> col:37 StringTemplate<T> 'void ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec38810 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afcec38de8 parent 0x1afce101a80 prev 0x1afce102948 <./src\Core/Container/String.inl:48:5, line:49:66> col:37 StringTemplate<T>
| | |-TemplateTypeParmDecl 0x1afcec38940 <line:48:14, col:23> col:23 referenced typename depth 1 index 0 T2
| | `-CXXConstructorDecl 0x1afcec38d00 parent 0x1afce101a80 prev 0x1afce1028a0 <line:47:5, line:49:66> col:37 StringTemplate<T> 'void (const T2 *)' inline
| |   |-ParmVarDecl 0x1afcec38c30 <col:52, col:62> col:62 _str 'const T2 *'
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afcec38e60 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afcec36380 parent 0x1afce101a80 prev 0x1afce102c30 <./src\Core/Container/String.inl:54:5, line:55:86> col:37 StringTemplate<T> 'void (const StringTemplate<char> &)' inline
| | |-ParmVarDecl 0x1afcec362b8 <col:52, col:80> col:80 _other 'const StringTemplate<char> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec36478 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afcec36940 parent 0x1afce101a80 prev 0x1afce102f70 <./src\Core/Container/String.inl:60:5, line:61:89> col:37 StringTemplate<T> 'void (const StringTemplate<wchar_t> &)' inline
| | |-ParmVarDecl 0x1afcec36878 <col:52, col:83> col:83 _other 'const StringTemplate<wchar_t> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec36a38 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afcec36f00 parent 0x1afce101a80 prev 0x1afce1032b0 <./src\Core/Container/String.inl:66:5, line:67:90> col:37 StringTemplate<T> 'void (const StringTemplate<char32_t> &)' inline
| | |-ParmVarDecl 0x1afcec36e38 <col:52, col:84> col:84 _other 'const StringTemplate<char32_t> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec31fc0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afcec32490 parent 0x1afce101a80 prev 0x1afce1035f0 <./src\Core/Container/String.inl:72:5, line:73:78> col:37 StringTemplate<T> 'void (StringTemplate<T> &&)' inline
| | |-ParmVarDecl 0x1afcec323c8 <col:52, col:72> col:72 _other 'StringTemplate<T> &&'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec32588 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXDestructorDecl 0x1afcec32810 parent 0x1afce101a80 prev 0x1afce103740 <./src\Core/Container/String.inl:78:5, line:79:53> col:37 ~StringTemplate<T> 'void ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec32908 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec32d28 parent 0x1afce101a80 prev 0x1afce104a58 <./src\Core/Container/String.inl:84:5, line:85:62> col:56 clear 'StringTemplate<T> &()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec32e10 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec31350 parent 0x1afce101a80 prev 0x1afce104c30 <./src\Core/Container/String.inl:95:5, line:96:67> col:61 begin 'typename StringTemplate<T>::Iterator ()'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec31900 parent 0x1afce101a80 prev 0x1afce104db0 <line:101:5, line:102:74> col:66 begin 'typename StringTemplate<T>::ConstIterator () const'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec31c90 parent 0x1afce101a80 prev 0x1afce104ed0 <line:107:5, line:108:40> col:33 cstr 'const T *() const'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec3a2c0 parent 0x1afce101a80 prev 0x1afce104fc0 <line:118:5, line:119:65> col:61 end 'typename StringTemplate<T>::Iterator ()'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec3a830 parent 0x1afce101a80 prev 0x1afce105080 <line:124:5, line:125:72> col:66 end 'typename StringTemplate<T>::ConstIterator () const'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec3acb0 parent 0x1afce101a80 prev 0x1afce105320 <line:130:5, line:131:87> col:41 find 'u32 (const T &, const u32 &) const' inline
| | |-ParmVarDecl 0x1afcec3ab60 <col:46, col:55> col:55 _character 'const T &'
| | |-ParmVarDecl 0x1afcec3abd8 <col:67, col:78> col:78 _offset 'const u32 &' cinit
| | | `-ExprWithCleanups 0x1afcebf1690 <./src\Core/Container/String.h:92:60> 'const u32':'const unsigned int' lvalue
| | |   `-MaterializeTemporaryExpr 0x1afcebf1678 <col:60> 'const u32':'const unsigned int' lvalue
| | |     `-ImplicitCastExpr 0x1afcebf1660 <col:60> 'const u32':'const unsigned int' <IntegralCast>
| | |       `-IntegerLiteral 0x1afcebf1638 <col:60> 'int' 0
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec3ada8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec33120 parent 0x1afce101a80 prev 0x1afce105520 <./src\Core/Container/String.inl:145:5, line:146:78> col:28 findLast 'u32 (const T &, const u32 &) const'
| | |-ParmVarDecl 0x1afcec32fd0 <col:37, col:46> col:46 _character 'const T &'
| | |-ParmVarDecl 0x1afcec33048 <col:58, col:69> col:69 _offset 'const u32 &' cinit
| | | `-DeclRefExpr 0x1afcebf1728 <./src\Core/Container/String.h:101:64, col:73> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec33670 parent 0x1afce101a80 prev 0x1afce107900 <./src\Core/Container/String.inl:169:5, line:170:87> col:28 find 'u32 (const StringTemplate<T> &, const u32 &) const'
| | |-ParmVarDecl 0x1afcec33518 <col:33, col:58> col:58 _string 'const StringTemplate<T> &'
| | |-ParmVarDecl 0x1afcec33590 <col:67, col:78> col:78 _offset 'const u32 &' cinit
| | | `-ExprWithCleanups 0x1afcebf17b0 <./src\Core/Container/String.h:110:73> 'const u32':'const unsigned int' lvalue
| | |   `-MaterializeTemporaryExpr 0x1afcebf1798 <col:73> 'const u32':'const unsigned int' lvalue
| | |     `-ImplicitCastExpr 0x1afcebf1780 <col:73> 'const u32':'const unsigned int' <IntegralCast>
| | |       `-IntegerLiteral 0x1afcebf1758 <col:73> 'int' 0
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec33bc0 parent 0x1afce101a80 prev 0x1afce107c30 <./src\Core/Container/String.inl:195:5, line:196:91> col:28 findLast 'u32 (const StringTemplate<T> &, const u32 &) const'
| | |-ParmVarDecl 0x1afcec33a68 <col:37, col:62> col:62 _string 'const StringTemplate<T> &'
| | |-ParmVarDecl 0x1afcec33ae0 <col:71, col:82> col:82 _offset 'const u32 &' cinit
| | | `-DeclRefExpr 0x1afcebf1800 <./src\Core/Container/String.h:119:77, col:86> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec39250 parent 0x1afce101a80 prev 0x1afce105870 <./src\Core/Container/String.inl:220:5, line:221:107> col:55 getLeftTrimed 'StringTemplate<T> (const StringTemplate<T> &) const' inline
| | |-ParmVarDecl 0x1afcec390d8 <col:69, col:94> col:94 _characters 'const StringTemplate<T> &' cinit
| | | `-StringLiteral 0x1afcebf1830 <./src\Core/Container/String.h:147:93> 'const char [5]' lvalue "\t\n\r "
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec39340 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec395c0 parent 0x1afce101a80 prev 0x1afce105a20 <./src\Core/Container/String.inl:229:5, line:230:53> col:41 getLength 'u32 () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec396a8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec39e80 parent 0x1afce101a80 prev 0x1afce106090 <./src\Core/Container/String.inl:235:5, line:236:170> col:55 getReplaced 'StringTemplate<T> (const StringTemplate<T> &, const StringTemplate<T> &, const u32 &, const u32 &) const' inline
| | |-ParmVarDecl 0x1afcec39a88 <col:67, col:92> col:92 _find 'const StringTemplate<T> &'
| | |-ParmVarDecl 0x1afcec39be8 <col:99, col:124> col:124 _replace 'const StringTemplate<T> &' cinit
| | | `-DeclRefExpr 0x1afcebf1918 <./src\Core/Container/String.h:165:120, col:139> 'const StringTemplate<T>':'const StringTemplate<T>' lvalue Var 0x1afce10cdc8 'empty' 'const StringTemplate<T>':'const StringTemplate<T>'
| | |-ParmVarDecl 0x1afcec39c60 <./src\Core/Container/String.inl:236:134, col:145> col:145 _start 'const u32 &' cinit
| | | `-ExprWithCleanups 0x1afcebf19a0 <./src\Core/Container/String.h:165:166> 'const u32':'const unsigned int' lvalue
| | |   `-MaterializeTemporaryExpr 0x1afcebf1988 <col:166> 'const u32':'const unsigned int' lvalue
| | |     `-ImplicitCastExpr 0x1afcebf1970 <col:166> 'const u32':'const unsigned int' <IntegralCast>
| | |       `-IntegerLiteral 0x1afcebf1948 <col:166> 'int' 0
| | |-ParmVarDecl 0x1afcec39cd8 <./src\Core/Container/String.inl:236:153, col:164> col:164 _end 'const u32 &' cinit
| | | `-DeclRefExpr 0x1afcebf19f0 <./src\Core/Container/String.h:165:187, col:196> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec39f88 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec3b230 parent 0x1afce101a80 prev 0x1afce10f910 <./src\Core/Container/String.inl:244:5, line:245:51> col:41 getSize 'u32 () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec3b318 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec3b870 parent 0x1afce101a80 prev 0x1afce10fcb0 <./src\Core/Container/String.inl:250:5, line:251:103> col:55 getTrimed 'StringTemplate<T> (const StringTemplate<T> &) const' inline
| | |-ParmVarDecl 0x1afcec3b6f8 <col:65, col:90> col:90 _characters 'const StringTemplate<T> &' cinit
| | | `-StringLiteral 0x1afcebf1a40 <./src\Core/Container/String.h:195:89> 'const char [5]' lvalue "\t\n\r "
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec3b960 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec3bd50 parent 0x1afce101a80 prev 0x1afce106310 <./src\Core/Container/String.inl:259:5, line:260:76> col:62 getReversed 'StringTemplate<T> () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec3be38 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec3c3e0 parent 0x1afce101a80 prev 0x1afce1066b0 <./src\Core/Container/String.inl:266:5, line:267:108> col:55 getRightTrimed 'StringTemplate<T> (const StringTemplate<T> &) const' inline
| | |-ParmVarDecl 0x1afcec3c268 <col:70, col:95> col:95 _characters 'const StringTemplate<T> &' cinit
| | | `-StringLiteral 0x1afcebf1a20 <./src\Core/Container/String.h:179:94> 'const char [5]' lvalue "\t\n\r "
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec3c4d0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec3c9b0 parent 0x1afce101a80 prev 0x1afce110100 <./src\Core/Container/String.inl:275:5, line:276:91> col:32 insert 'Michka::String &(const StringTemplate<T> &, const u32 &)'
| | |-ParmVarDecl 0x1afcec3c828 <col:39, col:64> col:64 _string 'const StringTemplate<T> &'
| | |-ParmVarDecl 0x1afcec3c8a0 <col:73, col:84> col:84 _offset 'const u32 &' cinit
| | | `-ExprWithCleanups 0x1afcebf1ab8 <./src\Core/Container/String.h:204:79> 'const u32':'const unsigned int' lvalue
| | |   `-MaterializeTemporaryExpr 0x1afcebf1aa0 <col:79> 'const u32':'const unsigned int' lvalue
| | |     `-ImplicitCastExpr 0x1afcebf1a88 <col:79> 'const u32':'const unsigned int' <IntegralCast>
| | |       `-IntegerLiteral 0x1afcebf1a60 <col:79> 'int' 0
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec3ccd0 parent 0x1afce101a80 prev 0x1afce110230 <./src\Core/Container/String.inl:300:5, line:301:52> col:42 isEmpty 'bool () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec3cdb8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec420a0 parent 0x1afce101a80 prev 0x1afce110378 <./src\Core/Container/String.inl:306:5, line:307:55> col:42 isNotEmpty 'bool () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec42188 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec42718 parent 0x1afce101a80 prev 0x1afce110788 <./src\Core/Container/String.inl:312:5, line:313:101> col:56 leftTrim 'StringTemplate<T> &(const StringTemplate<T> &)' inline
| | |-ParmVarDecl 0x1afcec42568 <col:65, col:90> col:90 _characters 'const StringTemplate<T> &' cinit
| | | `-StringLiteral 0x1afcebf1ad0 <./src\Core/Container/String.h:221:89> 'const char [5]' lvalue "\t\n\r "
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec42808 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afcec42e80 parent 0x1afce101a80 prev 0x1afce10e780 <./src\Core/Container/String.inl:327:5, line:328:84> col:42 number
| | |-TemplateTypeParmDecl 0x1afcec42900 <line:327:14, col:23> col:23 referenced typename depth 1 index 0 NumberType
| | `-CXXMethodDecl 0x1afcec42da0 parent 0x1afce101a80 prev 0x1afce10e6e0 <line:326:5, line:328:84> col:42 number 'StringTemplate<T> (NumberType, const u8 &)'
| |   |-ParmVarDecl 0x1afcec42ba0 <col:49, col:60> col:60 _number 'NumberType'
| |   |-ParmVarDecl 0x1afcec42c18 <col:69, col:79> col:79 _base 'const u8 &' cinit
| |   | `-ExprWithCleanups 0x1afcebf1b48 <./src\Core/Container/String.h:247:79> 'const u8':'const unsigned char' lvalue
| |   |   `-MaterializeTemporaryExpr 0x1afcebf1b30 <col:79> 'const u8':'const unsigned char' lvalue
| |   |     `-ImplicitCastExpr 0x1afcebf1b18 <col:79> 'const u8':'const unsigned char' <IntegralCast>
| |   |       `-IntegerLiteral 0x1afcebf1af0 <col:79> 'int' 10
| |   `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec41350 parent 0x1afce101a80 prev 0x1afce10daa0 <./src\Core/Container/String.inl:359:5, line:360:59> col:42 number 'StringTemplate<T> (bool)'
| | |-ParmVarDecl 0x1afcec411d0 <col:49, col:54> col:54 _bool 'bool'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec41860 parent 0x1afce101a80 prev 0x1afce10dd50 <line:365:5, line:366:62> col:42 number 'StringTemplate<T> (float)'
| | |-ParmVarDecl 0x1afcec416e8 <col:49, col:55> col:55 _number 'float'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec41d70 parent 0x1afce101a80 prev 0x1afce10e000 <line:373:5, line:374:63> col:42 number 'StringTemplate<T> (double)'
| | |-ParmVarDecl 0x1afcec41bf8 <col:49, col:56> col:56 _number 'double'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec3d260 parent 0x1afce101a80 prev 0x1afce10e2b0 <line:381:5, line:382:68> col:42 number 'StringTemplate<T> (long double)'
| | |-ParmVarDecl 0x1afcec3d0e8 <col:49, col:61> col:61 _number 'long double'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec3d888 parent 0x1afce101a80 prev 0x1afce108aa8 <line:389:5, line:390:95> col:56 prepend 'StringTemplate<T> &(const StringTemplate<T> &)' inline
| | |-ParmVarDecl 0x1afcec3d6d8 <col:64, col:89> col:89 _other 'const StringTemplate<T> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec3d978 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec3dea8 parent 0x1afce101a80 prev 0x1afce108e68 <./src\Core/Container/String.inl:396:5, line:397:85> col:43 remove 'StringTemplate<T> &(const u32 &, const u32 &)'
| | |-ParmVarDecl 0x1afcec3dc70 <col:50, col:61> col:61 _start 'const u32 &'
| | |-ParmVarDecl 0x1afcec3dce8 <col:69, col:80> col:80 _size 'const u32 &' cinit
| | | `-DeclRefExpr 0x1afcebf1c10 <./src\Core/Container/String.h:264:73, col:82> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec3e388 parent 0x1afce101a80 prev 0x1afce109088 <./src\Core/Container/String.inl:412:5, line:413:51> col:43 reverse 'StringTemplate<T> &()'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec3ec58 parent 0x1afce101a80 prev 0x1afce1096d8 <line:425:5, line:426:152> col:43 replace 'StringTemplate<T> &(const StringTemplate<T> &, const StringTemplate<T> &, const u32 &, const u32 &)'
| | |-ParmVarDecl 0x1afcec3e828 <col:51, col:76> col:76 _find 'const StringTemplate<T> &'
| | |-ParmVarDecl 0x1afcec3e988 <col:83, col:108> col:108 _replace 'const StringTemplate<T> &' cinit
| | | `-DeclRefExpr 0x1afcebf1d08 <./src\Core/Container/String.h:282:104, col:123> 'const StringTemplate<T>':'const StringTemplate<T>' lvalue Var 0x1afce10cdc8 'empty' 'const StringTemplate<T>':'const StringTemplate<T>'
| | |-ParmVarDecl 0x1afcec3ea00 <./src\Core/Container/String.inl:426:118, col:129> col:129 _start 'const u32 &' cinit
| | | `-ExprWithCleanups 0x1afcebf1d90 <./src\Core/Container/String.h:282:150> 'const u32':'const unsigned int' lvalue
| | |   `-MaterializeTemporaryExpr 0x1afcebf1d78 <col:150> 'const u32':'const unsigned int' lvalue
| | |     `-ImplicitCastExpr 0x1afcebf1d60 <col:150> 'const u32':'const unsigned int' <IntegralCast>
| | |       `-IntegerLiteral 0x1afcebf1d38 <col:150> 'int' 0
| | |-ParmVarDecl 0x1afcec3ea78 <./src\Core/Container/String.inl:426:137, col:148> col:148 _end 'const u32 &' cinit
| | | `-DeclRefExpr 0x1afcebf1de0 <./src\Core/Container/String.h:282:171, col:180> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec40218 parent 0x1afce101a80 prev 0x1afce109a18 <./src\Core/Container/String.inl:460:5, line:461:62> col:43 resize 'StringTemplate<T> &(u32)'
| | |-ParmVarDecl 0x1afcec40060 <col:50, col:54> col:54 _newSize 'u32':'unsigned int'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec40848 parent 0x1afce101a80 prev 0x1afce109d98 <line:483:5, line:484:102> col:56 rightTrim 'StringTemplate<T> &(const StringTemplate<T> &)' inline
| | |-ParmVarDecl 0x1afcec40698 <col:66, col:91> col:91 _characters 'const StringTemplate<T> &' cinit
| | | `-StringLiteral 0x1afcebf1e10 <./src\Core/Container/String.h:296:90> 'const char [5]' lvalue "\t\n\r "
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec40938 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec40f60 parent 0x1afce101a80 prev 0x1afce10a190 <./src\Core/Container/String.inl:497:5, line:498:77> col:50 split 'Vector<StringTemplate<T>> (const T &) const'
| | |-ParmVarDecl 0x1afcec40d60 <col:56, col:65> col:65 _character 'const T &'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec5d440 parent 0x1afce101a80 prev 0x1afce10a5d0 <line:517:5, line:518:90> col:50 split 'Vector<StringTemplate<T>> (const StringTemplate<T> &) const'
| | |-ParmVarDecl 0x1afcec5d248 <col:56, col:81> col:81 _string 'const StringTemplate<T> &'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec5d9d0 parent 0x1afce101a80 prev 0x1afce10ecc0 <line:548:5, line:549:89> col:42 subString 'StringTemplate<T> (const u32 &, const u32 &) const'
| | |-ParmVarDecl 0x1afcec5d7d0 <col:52, col:63> col:63 _start 'const u32 &'
| | |-ParmVarDecl 0x1afcec5d848 <col:71, col:82> col:82 _size 'const u32 &' cinit
| | | `-DeclRefExpr 0x1afcebf1e68 <./src\Core/Container/String.h:341:75, col:84> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec5de90 parent 0x1afce101a80 prev 0x1afce10eea0 <./src\Core/Container/String.inl:563:5, line:564:52> col:42 toLower 'StringTemplate<T> () const'
| | `-<<<NULL>>>
| |-FunctionTemplateDecl 0x1afcec5e400 parent 0x1afce101a80 prev 0x1afce10f1d0 <line:576:5, line:577:61> col:35 toNumber
| | |-TemplateTypeParmDecl 0x1afcec5e020 <line:576:14, col:23> col:23 referenced typename depth 1 index 0 NumberType
| | `-CXXMethodDecl 0x1afcec5e320 parent 0x1afce101a80 prev 0x1afce10f130 <line:575:5, line:577:61> col:35 toNumber 'NumberType (const u32 &) const'
| |   |-ParmVarDecl 0x1afcec5e230 <col:44, col:55> col:55 _base 'const u32 &' cinit
| |   | `-ExprWithCleanups 0x1afcebf1ef0 <./src\Core/Container/String.h:357:48> 'const u32':'const unsigned int' lvalue
| |   |   `-MaterializeTemporaryExpr 0x1afcebf1ed8 <col:48> 'const u32':'const unsigned int' lvalue
| |   |     `-ImplicitCastExpr 0x1afcebf1ec0 <col:48> 'const u32':'const unsigned int' <IntegralCast>
| |   |       `-IntegerLiteral 0x1afcebf1e98 <col:48> 'int' 10
| |   `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec5e810 parent 0x1afce101a80 prev 0x1afce10f360 <./src\Core/Container/String.inl:623:5, line:624:52> col:42 toUpper 'StringTemplate<T> () const'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec66f00 parent 0x1afce101a80 prev 0x1afce110d08 <line:635:5, line:636:97> col:56 trim 'StringTemplate<T> &(const StringTemplate<T> &)' inline
| | |-ParmVarDecl 0x1afcec5ec88 <col:61, col:86> col:86 _characters 'const StringTemplate<T> &' cinit
| | | `-StringLiteral 0x1afcebf1f80 <./src\Core/Container/String.h:392:85> 'const char [5]' lvalue "\t\n\r "
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec66ff0 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afcec67658 parent 0x1afce101a80 prev 0x1afce111188 <./src\Core/Container/String.inl:642:5, line:643:69> col:43 operator=
| | |-TemplateTypeParmDecl 0x1afcec670f0 <line:642:14, col:23> col:23 referenced typename depth 1 index 0 T2
| | `-CXXMethodDecl 0x1afcec67578 parent 0x1afce101a80 prev 0x1afce1110e8 <line:641:5, line:643:69> col:43 operator= 'StringTemplate<T> &(const T2 *)'
| |   |-ParmVarDecl 0x1afcec673c0 <col:55, col:65> col:65 _str 'const T2 *'
| |   `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcec67c88 parent 0x1afce101a80 prev 0x1afce1114d8 <line:665:5, line:666:102> col:56 operator= 'StringTemplate<T> &(const StringTemplate<char> &)' inline
| | |-ParmVarDecl 0x1afcec67ad8 <col:68, col:96> col:96 _other 'const StringTemplate<char> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec67d78 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec602c8 parent 0x1afce101a80 prev 0x1afce111930 <./src\Core/Container/String.inl:672:5, line:673:105> col:56 operator= 'StringTemplate<T> &(const StringTemplate<wchar_t> &)' inline
| | |-ParmVarDecl 0x1afcec60118 <col:68, col:99> col:99 _other 'const StringTemplate<wchar_t> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec603b8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec60948 parent 0x1afce101a80 prev 0x1afce111d18 <./src\Core/Container/String.inl:679:5, line:680:106> col:56 operator= 'StringTemplate<T> &(const StringTemplate<char32_t> &)' inline
| | |-ParmVarDecl 0x1afcec60798 <col:68, col:100> col:100 _other 'const StringTemplate<char32_t> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec60a38 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec61008 parent 0x1afce101a80 prev 0x1afce112108 <./src\Core/Container/String.inl:686:5, line:687:94> col:56 operator= 'StringTemplate<T> &(StringTemplate<T> &&)' inline
| | |-ParmVarDecl 0x1afcec60e50 <col:68, col:88> col:88 _other 'StringTemplate<T> &&'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec610f8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec61650 parent 0x1afce101a80 prev 0x1afce112480 <./src\Core/Container/String.inl:695:5, line:696:100> col:55 operator+ 'StringTemplate<T> (const StringTemplate<T> &) const' inline
| | |-ParmVarDecl 0x1afcec614d8 <col:67, col:92> col:92 _other 'const StringTemplate<T> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec61740 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec61cd8 parent 0x1afce101a80 prev 0x1afce112828 <./src\Core/Container/String.inl:707:5, line:708:100> col:56 operator+= 'StringTemplate<T> &(const StringTemplate<T> &)' inline
| | |-ParmVarDecl 0x1afcec61b28 <col:69, col:94> col:94 _other 'const StringTemplate<T> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec61dc8 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afcec64310 parent 0x1afce101a80 prev 0x1afce10bb60 <./src\Core/Container/String.inl:718:5, line:719:58> col:29 operator==
| | |-TemplateTypeParmDecl 0x1afcec63f20 <line:718:14, col:23> col:23 referenced typename depth 1 index 0 T2
| | `-CXXMethodDecl 0x1afcec64230 parent 0x1afce101a80 prev 0x1afce10bac0 <line:717:5, line:719:58> col:29 operator== 'bool (const T2 *) const'
| |   |-ParmVarDecl 0x1afcec64160 <col:42, col:52> col:52 _str 'const T2 *'
| |   `-<<<NULL>>>
| |-FunctionTemplateDecl 0x1afcec64890 parent 0x1afce101a80 prev 0x1afce10be10 <line:742:5, line:743:71> col:42 operator!=
| | |-TemplateTypeParmDecl 0x1afcec644a0 <line:742:14, col:23> col:23 referenced typename depth 1 index 0 T2
| | `-CXXMethodDecl 0x1afcec647b0 parent 0x1afce101a80 prev 0x1afce10bd70 <line:741:5, line:743:71> col:42 operator!= 'bool (const T2 *) const' inline
| |   |-ParmVarDecl 0x1afcec646e0 <col:55, col:65> col:65 _str 'const T2 *'
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afcec64908 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afcec67fa0 parent 0x1afce101a80 prev 0x1afce10c290 <./src\Core/Container/String.inl:749:5, line:750:87> col:42 operator==
| | |-TemplateTypeParmDecl 0x1afcec64a80 <line:749:14, col:23> col:23 referenced typename depth 1 index 0 T2
| | `-CXXMethodDecl 0x1afcec67ec0 parent 0x1afce101a80 prev 0x1afce10c1f0 <line:748:5, line:750:87> col:42 operator== 'bool (const StringTemplate<T2> &) const' inline
| |   |-ParmVarDecl 0x1afcec64d78 <col:55, col:81> col:81 _str 'const StringTemplate<T2> &'
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afcec68018 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afcec68630 parent 0x1afce101a80 prev 0x1afce10c650 <./src\Core/Container/String.inl:756:5, line:757:87> col:42 operator!=
| | |-TemplateTypeParmDecl 0x1afcec68190 <line:756:14, col:23> col:23 referenced typename depth 1 index 0 T2
| | `-CXXMethodDecl 0x1afcec68550 parent 0x1afce101a80 prev 0x1afce10c5b0 <line:755:5, line:757:87> col:42 operator!= 'bool (const StringTemplate<T2> &) const' inline
| |   |-ParmVarDecl 0x1afcec68488 <col:55, col:81> col:81 _str 'const StringTemplate<T2> &'
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afcec686a8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec68ab0 parent 0x1afce101a80 prev 0x1afce10c8e0 <./src\Core/Container/String.inl:762:5, line:763:69> col:40 operator[] 'T &(const u32 &)' inline
| | |-ParmVarDecl 0x1afcec68990 <col:52, col:63> col:63 _index 'const u32 &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec68ba0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec65f00 parent 0x1afce101a80 prev 0x1afce10cb00 <./src\Core/Container/String.inl:768:5, line:769:70> col:39 operator[] 'T (const u32 &) const' inline
| | |-ParmVarDecl 0x1afcec68e10 <col:51, col:62> col:62 _index 'const u32 &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec65ff0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec66360 parent 0x1afce101a80 prev 0x1afce10a7c0 <./src\Core/Container/String.inl:774:5, line:775:52> col:28 stringSize 'u32 (const T *)'
| | |-ParmVarDecl 0x1afcec66290 <col:39, col:48> col:48 _str 'const T *'
| | `-<<<NULL>>>
| |-FunctionTemplateDecl 0x1afcec66950 prev 0x1afcebf0560 <line:789:5, line:790:99> col:37 operator+
| | |-TemplateTypeParmDecl 0x1afcec66450 <line:789:14, col:23> col:23 referenced typename depth 0 index 0 T
| | |-TemplateTypeParmDecl 0x1afcec664d0 <col:26, col:35> col:35 referenced typename depth 0 index 1 T2
| | `-FunctionDecl 0x1afcec668b0 prev 0x1afcebf04c0 <./src\Core/Defines.h:54:25, ./src\Core/Container/String.inl:790:99> col:37 operator+ 'StringTemplate<T2> (const T *, const StringTemplate<T2> &)' inline
| |   |-ParmVarDecl 0x1afcec66650 <col:49, col:58> col:58 _first 'const T *'
| |   |-ParmVarDecl 0x1afcec667b8 <col:66, col:92> col:92 _second 'const StringTemplate<T2> &'
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afcec669b8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec62f40 parent 0x1afce101a80 prev 0x1afce10d510 <./src\Core/Container/String.inl:797:5, line:798:104> col:79 utf8Encode 'typename StringTemplate<T>::Utf8Character (u32)' inline
| | |-ParmVarDecl 0x1afcec66d70 <col:90, col:94> col:94 _character 'u32':'unsigned int'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec63030 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec635a8 parent 0x1afce101a80 prev 0x1afce10d760 <./src\Core/Container/String.inl:850:5, line:851:74> col:41 utf8Decode 'u32 (const char *)' inline
| | |-ParmVarDecl 0x1afcec63518 <col:52, col:64> col:64 _character 'const char *'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec63698 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec68ed0 parent 0x1afce101a80 prev 0x1afcebf1250 <./src\Core/Container/String.inl:898:5, line:899:106> col:80 utf16Encode 'typename StringTemplate<T>::Utf16Character (u32)' inline
| | |-ParmVarDecl 0x1afcec63c60 <col:92, col:96> col:96 _character 'u32':'unsigned int'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec68fc0 <./src\Core/Defines.h:54:25> __forceinline
| `-CXXMethodDecl 0x1afcec692c8 parent 0x1afce101a80 prev 0x1afcebf14a0 <./src\Core/Container/String.inl:918:5, line:919:78> col:41 utf16Decode 'u32 (const wchar_t *)' inline
|   |-ParmVarDecl 0x1afcec69238 <col:53, col:68> col:68 _character 'const wchar_t *'
|   |-<<<NULL>>>
|   `-AlwaysInlineAttr 0x1afcec693b8 <./src\Core/Defines.h:54:25> __forceinline
|-NamespaceDecl 0x1afcec6a408 prev 0x1afcec2ec10 <./src\Core/Container/List.h:34:1, line:456:1> line:34:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| `-ClassTemplateDecl 0x1afcec6a5b0 <line:36:5, line:455:5> line:37:11 List
|   |-TemplateTypeParmDecl 0x1afcec6a478 <line:36:14, col:23> col:23 referenced typename depth 0 index 0 T
|   |-CXXRecordDecl 0x1afcec6a520 <line:37:5, line:455:5> line:37:11 class List definition
|   | |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
|   | | |-DefaultConstructor exists non_trivial user_provided
|   | | |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
|   | | |-MoveConstructor exists non_trivial user_declared
|   | | |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
|   | | |-MoveAssignment exists non_trivial user_declared
|   | | `-Destructor non_trivial user_declared
|   | |-CXXRecordDecl 0x1afcec6a818 <col:5, col:11> col:11 implicit referenced class List
|   | |-AccessSpecDecl 0x1afcec6a8a8 <./src\Core/Helpers.h:304:5, col:11> col:5 public
|   | |-TypedefDecl 0x1afcec6a900 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
|   | | |-BuiltinType 0x1afcc6e38c0 'bool'
|   | | `-AnnotateAttr 0x1afcec6a958 <line:271:39, col:60> ""
|   | |-CXXMethodDecl 0x1afcec6aa18 <line:273:5, col:45> col:31 classFileName 'const char *()' static inline
|   | | `-<<<NULL>>>
|   | |-CXXMethodDecl 0x1afcec6aae0 <<scratch space>:21:1, ./src\Core/Helpers.h:277:62> <scratch space>:21:1 invalid __MICHKA_STRUCT_GENERATED_BODY_39 'int ()'
|   | |-FriendDecl 0x1afcec6aef0 <./src\Core/Container/List.h:41:9, line:42:22> col:22
|   | | `-ClassTemplateDecl 0x1afcec6acb0 parent 0x1afcec6a408 <line:41:9, line:42:22> col:22 List
|   | |   |-TemplateTypeParmDecl 0x1afcec6ab80 <line:41:18, col:24> col:24 class depth 1 index 0 U
|   | |   `-CXXRecordDecl 0x1afcec6ac20 parent 0x1afcec6a408 <line:42:16, col:22> col:22 class List
|   | |-AccessSpecDecl 0x1afcec6af48 <line:43:5, col:11> col:5 public
|   | |-CXXRecordDecl 0x1afcec6af78 <line:44:9, line:57:9> line:44:15 referenced class Element definition
|   | | |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
|   | | | |-DefaultConstructor
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor
|   | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment
|   | | | `-Destructor non_trivial user_declared
|   | | |-CXXRecordDecl 0x1afcec6b0a0 <col:9, col:15> col:15 implicit referenced class Element
|   | | |-FriendDecl 0x1afcec6b188 <line:46:13, col:20> col:20 'class List<T>':'List<T>'
|   | | |-FriendDecl 0x1afcec6b300 <line:47:13, col:26> col:20 'class Iterator':'Michka::Iterator'
|   | | |-FriendDecl 0x1afcec6b470 <line:48:13, col:26> col:20 'class ConstIterator':'Michka::ConstIterator'
|   | | |-CXXConstructorDecl 0x1afcec6b650 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:50:47> col:26 Element 'void (const T &)' inline
|   | | | |-ParmVarDecl 0x1afcec6b4f0 <col:34, col:43> col:43 _val 'const T &'
|   | | | `-AlwaysInlineAttr 0x1afcec6b700 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXConstructorDecl 0x1afcec6b8b0 <col:25, ./src\Core/Container/List.h:51:42> col:26 Element 'void (T &&)' inline
|   | | | |-ParmVarDecl 0x1afcec6b7a0 <col:34, col:38> col:38 _val 'T &&'
|   | | | `-AlwaysInlineAttr 0x1afcec6b960 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXDestructorDecl 0x1afcec6ba00 <./src\Core/Container/List.h:52:13, col:22> col:13 ~Element 'void ()'
|   | | |-FieldDecl 0x1afcec6bac0 <line:54:13, col:15> col:15 value 'T'
|   | | |-FieldDecl 0x1afcec6bb28 <line:55:13, col:29> col:22 next 'Michka::List::Element *'
|   | | | `-CXXNullPtrLiteralExpr 0x1afcec77ae8 <col:29> 'nullptr_t'
|   | | `-FieldDecl 0x1afcec6bb90 <line:56:13, col:29> col:22 prev 'Michka::List::Element *'
|   | |   `-CXXNullPtrLiteralExpr 0x1afcec77af8 <col:29> 'nullptr_t'
|   | |-CXXRecordDecl 0x1afcec6bbe8 <line:59:9, line:81:9> line:59:15 referenced class ConstIterator definition
|   | | |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
|   | | | |-DefaultConstructor exists non_trivial user_provided
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-CXXRecordDecl 0x1afcec6bd10 <col:9, col:15> col:15 implicit referenced class ConstIterator
|   | | |-FriendDecl 0x1afcec6bdc0 <line:61:13, col:20> col:20 'class List<T>':'List<T>'
|   | | |-AccessSpecDecl 0x1afcec6be00 <line:62:9, col:15> col:9 public
|   | | |-CXXConstructorDecl 0x1afcec6bf00 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:63:40> col:26 ConstIterator 'void ()' inline
|   | | | `-AlwaysInlineAttr 0x1afcec6bfa8 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afcec6c150 <col:25, ./src\Core/Container/List.h:65:72> col:40 operator+ 'Michka::List::ConstIterator (const i32 &) const' inline
|   | | | |-ParmVarDecl 0x1afcec6c010 <col:52, col:63> col:63 _number 'const i32 &'
|   | | | `-AlwaysInlineAttr 0x1afcec6c1f8 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afcec6c2f0 <col:25, ./src\Core/Container/List.h:66:72> col:40 operator- 'Michka::List::ConstIterator (const i32 &) const' inline
|   | | | |-ParmVarDecl 0x1afcec6c260 <col:52, col:63> col:63 _number 'const i32 &'
|   | | | `-AlwaysInlineAttr 0x1afcec6c398 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afcec6c510 <col:25, ./src\Core/Container/List.h:67:68> col:35 operator[] 'const T &(const i32 &) const' inline
|   | | | |-ParmVarDecl 0x1afcec6c400 <col:48, col:59> col:59 _number 'const i32 &'
|   | | | `-AlwaysInlineAttr 0x1afcec6c5b8 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afcec6c690 <col:25, ./src\Core/Container/List.h:68:49> col:35 operator* 'const T &() const' inline
|   | | | `-AlwaysInlineAttr 0x1afcec6c730 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afcec6c810 <col:25, ./src\Core/Container/List.h:69:50> col:35 operator-> 'const T *() const' inline
|   | | | `-AlwaysInlineAttr 0x1afcec6c8b0 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXConversionDecl 0x1afcec6c950 <col:25, ./src\Core/Container/List.h:70:43> col:26 operator bool 'bool () const' inline
|   | | | `-AlwaysInlineAttr 0x1afcec6c9f8 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afcec6ca78 <col:25, ./src\Core/Container/List.h:71:45> col:31 operator! 'bool () const' inline
|   | | | `-AlwaysInlineAttr 0x1afcec6cb18 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afcec6cbf0 <col:25, ./src\Core/Container/List.h:72:54> col:41 operator++ 'Michka::List::ConstIterator &()' inline
|   | | | `-AlwaysInlineAttr 0x1afcec6cc90 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afcec6cd08 <col:25, ./src\Core/Container/List.h:73:54> col:41 operator-- 'Michka::List::ConstIterator &()' inline
|   | | | `-AlwaysInlineAttr 0x1afcec6cda8 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afcec64eb8 <col:25, ./src\Core/Container/List.h:74:73> col:31 operator== 'bool (const Michka::List::ConstIterator &) const' inline
|   | | | |-ParmVarDecl 0x1afcec6ce40 <col:44, col:65> col:65 _other 'const Michka::List::ConstIterator &'
|   | | | `-AlwaysInlineAttr 0x1afcec64f60 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afcec65058 <col:25, ./src\Core/Container/List.h:75:73> col:31 operator!= 'bool (const Michka::List::ConstIterator &) const' inline
|   | | | |-ParmVarDecl 0x1afcec64fc8 <col:44, col:65> col:65 _other 'const Michka::List::ConstIterator &'
|   | | | `-AlwaysInlineAttr 0x1afcec65100 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afcec65230 <col:25, ./src\Core/Container/List.h:76:60> col:28 operator[] 'T (const u32 &) const' inline
|   | | | |-ParmVarDecl 0x1afcec65168 <col:41, col:52> col:52 _index 'const u32 &'
|   | | | `-AlwaysInlineAttr 0x1afcec652d8 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-AccessSpecDecl 0x1afcec65330 <./src\Core/Container/List.h:77:9, col:16> col:9 private
|   | | |-CXXConstructorDecl 0x1afcec655d0 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:78:75> col:26 ConstIterator 'void (typename List<T>::Element *)' inline
|   | | | |-ParmVarDecl 0x1afcec654c8 <col:40, col:67> col:67 _element 'typename List<T>::Element *'
|   | | | `-AlwaysInlineAttr 0x1afcec65680 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FieldDecl 0x1afcec656e8 <./src\Core/Container/List.h:80:13, col:33> col:22 mElement 'Michka::List::Element *'
|   | |   `-CXXNullPtrLiteralExpr 0x1afcec77b08 <col:33> 'nullptr_t'
|   | |-CXXRecordDecl 0x1afcec65758 <line:83:9, line:94:9> line:83:15 referenced class Iterator definition
|   | | |-DefinitionData empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
|   | | | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public 'Michka::List::ConstIterator'
|   | | |-CXXRecordDecl 0x1afcec658c0 <col:9, col:15> col:15 implicit referenced class Iterator
|   | | |-FriendDecl 0x1afcec65970 <line:85:13, col:20> col:20 'class List<T>':'List<T>'
|   | | |-AccessSpecDecl 0x1afcec659b0 <line:86:9, col:15> col:9 public
|   | | |-CXXConstructorDecl 0x1afcec65a48 <line:87:13, col:22> col:13 Iterator 'void ()'
|   | | |-CXXMethodDecl 0x1afcec65b70 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:89:41> col:29 operator* 'T &()' inline
|   | | | `-AlwaysInlineAttr 0x1afcec65c10 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afcec65cf0 <col:25, ./src\Core/Container/List.h:90:42> col:29 operator-> 'T *()' inline
|   | | | `-AlwaysInlineAttr 0x1afcec65d90 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afcec72fd0 <col:25, ./src\Core/Container/List.h:91:59> col:29 operator[] 'T &(const u32 &)' inline
|   | | | |-ParmVarDecl 0x1afcec65df8 <col:42, col:53> col:53 _index 'const u32 &'
|   | | | `-AlwaysInlineAttr 0x1afcec73078 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-AccessSpecDecl 0x1afcec730d0 <./src\Core/Container/List.h:92:9, col:16> col:9 private
|   | | `-CXXConstructorDecl 0x1afcec73330 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:93:70> col:26 Iterator 'void (typename List<T>::Element *)' inline
|   | |   |-ParmVarDecl 0x1afcec73268 <col:35, col:62> col:62 _element 'typename List<T>::Element *'
|   | |   `-AlwaysInlineAttr 0x1afcec733e0 <./src\Core/Defines.h:54:25> __forceinline
|   | |-AccessSpecDecl 0x1afcec73450 <./src\Core/Container/List.h:95:5, col:11> col:5 public
|   | |-CXXConstructorDecl 0x1afcec734b8 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:96:27> col:22 List<T> 'void ()' inline
|   | | `-AlwaysInlineAttr 0x1afcec73560 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXConstructorDecl 0x1afcec73670 <col:25, ./src\Core/Container/List.h:97:65> col:22 invalid List<T> 'void (const int &)' inline
|   | | |-ParmVarDecl 0x1afcec735e0 <col:27, col:59> col:59 invalid _array 'const int &'
|   | | `-AlwaysInlineAttr 0x1afcec73720 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXConstructorDecl 0x1afcec739b0 <col:25, ./src\Core/Container/List.h:98:48> col:22 List<T> 'void (const List<T> &)' inline
|   | | |-ParmVarDecl 0x1afcec738a8 <col:27, col:42> col:42 _other 'const List<T> &'
|   | | `-AlwaysInlineAttr 0x1afcec73a60 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXConstructorDecl 0x1afcec73cf0 <col:25, ./src\Core/Container/List.h:99:43> col:22 List<T> 'void (List<T> &&)' inline
|   | | |-ParmVarDecl 0x1afcec73be8 <col:27, col:37> col:37 _other 'List<T> &&'
|   | | `-AlwaysInlineAttr 0x1afcec73da0 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXDestructorDecl 0x1afcec73e40 <col:25, ./src\Core/Container/List.h:100:28> col:22 ~List<T> 'void ()' inline
|   | | `-AlwaysInlineAttr 0x1afcec73ef0 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afcec6dfa0 <col:25, ./src\Core/Container/List.h:105:37> col:31 begin 'Michka::List::Iterator ()' inline
|   | | |-AlwaysInlineAttr 0x1afcec6e040 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede9510 <./src\Core/Container/List.h:103:11, col:45>
|   | |   |-ParagraphComment 0x1afcede9470 <col:11>
|   | |   | `-TextComment 0x1afcede9448 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede9490 <col:12, col:45> Name="brief"
|   | |     `-ParagraphComment 0x1afcede94e0 <col:18, col:45>
|   | |       `-TextComment 0x1afcede94b8 <col:18, col:45> Text=" Iterator to begin of array."
|   | |-CXXMethodDecl 0x1afcec6e150 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:110:44> col:36 begin 'Michka::List::ConstIterator () const' inline
|   | | |-AlwaysInlineAttr 0x1afcec6e1f0 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede9638 <./src\Core/Container/List.h:108:11, col:59>
|   | |   |-ParagraphComment 0x1afcede9598 <col:11>
|   | |   | `-TextComment 0x1afcede9570 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede95b8 <col:12, col:59> Name="brief"
|   | |     `-ParagraphComment 0x1afcede9608 <col:18, col:59>
|   | |       `-TextComment 0x1afcede95e0 <col:18, col:59> Text=" Iterator to begin of array for constants."
|   | |-CXXMethodDecl 0x1afcec6e418 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:117:37> col:31 clear 'List<T> &()' inline
|   | | |-AlwaysInlineAttr 0x1afcec6e4b8 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede9828 <./src\Core/Container/List.h:113:11, line:115:23>
|   | |   |-ParagraphComment 0x1afcede96c0 <line:113:11>
|   | |   | `-TextComment 0x1afcede9698 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcede96e0 <col:12, col:29> Name="brief"
|   | |   | `-ParagraphComment 0x1afcede9730 <col:18, col:29>
|   | |   |   `-TextComment 0x1afcede9708 <col:18, col:29> Text=" Clear list."
|   | |   |-ParagraphComment 0x1afcede9778 <line:115:11>
|   | |   | `-TextComment 0x1afcede9750 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede9798 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcede97e8 <col:19, col:23>
|   | |       `-TextComment 0x1afcede97c0 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afcec6e560 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:122:35> col:31 end 'Michka::List::Iterator ()' inline
|   | | |-AlwaysInlineAttr 0x1afcec6e600 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede9950 <./src\Core/Container/List.h:120:11, col:43>
|   | |   |-ParagraphComment 0x1afcede98b0 <col:11>
|   | |   | `-TextComment 0x1afcede9888 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede98d0 <col:12, col:43> Name="brief"
|   | |     `-ParagraphComment 0x1afcede9920 <col:18, col:43>
|   | |       `-TextComment 0x1afcede98f8 <col:18, col:43> Text=" Iterator to end of array."
|   | |-CXXMethodDecl 0x1afcec6e6a8 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:127:42> col:36 end 'Michka::List::ConstIterator () const' inline
|   | | |-AlwaysInlineAttr 0x1afcec6e748 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede9a78 <./src\Core/Container/List.h:125:11, col:57>
|   | |   |-ParagraphComment 0x1afcede99d8 <col:11>
|   | |   | `-TextComment 0x1afcede99b0 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede99f8 <col:12, col:57> Name="brief"
|   | |     `-ParagraphComment 0x1afcede9a48 <col:18, col:57>
|   | |       `-TextComment 0x1afcede9a20 <col:18, col:57> Text=" Iterator to end of array for constants."
|   | |-CXXMethodDecl 0x1afcec6eaa8 <line:135:9, col:71> col:18 invalid filter 'List<T> &(const int &)'
|   | | |-ParmVarDecl 0x1afcec6e948 <col:25, col:62> col:62 invalid _callback 'const int &'
|   | | `-FullComment 0x1afcede9d10 <line:130:11, line:133:23>
|   | |   |-ParagraphComment 0x1afcede9b00 <line:130:11>
|   | |   | `-TextComment 0x1afcede9ad8 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcede9b20 <col:12, col:50> Name="brief"
|   | |   | `-ParagraphComment 0x1afcede9b70 <col:18, col:50>
|   | |   |   `-TextComment 0x1afcede9b48 <col:18, col:50> Text=" Filter list items by a callback."
|   | |   |-ParagraphComment 0x1afcede9bb8 <line:132:11>
|   | |   | `-TextComment 0x1afcede9b90 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcede9bd8 <col:12, line:133:11> [in] implicitly Param="_callback" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcede9c58 <col:11>
|   | |   |   `-TextComment 0x1afcede9c30 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede9c78 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcede9cc8 <col:19, col:23>
|   | |       `-TextComment 0x1afcede9ca0 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afcec6eba0 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:140:31> col:25 first 'T &()' inline
|   | | |-AlwaysInlineAttr 0x1afcec6ec40 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede9e38 <./src\Core/Container/List.h:138:11, col:33>
|   | |   |-ParagraphComment 0x1afcede9d98 <col:11>
|   | |   | `-TextComment 0x1afcede9d70 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede9db8 <col:12, col:33> Name="brief"
|   | |     `-ParagraphComment 0x1afcede9e08 <col:18, col:33>
|   | |       `-TextComment 0x1afcede9de0 <col:18, col:33> Text=" Get first item."
|   | |-CXXMethodDecl 0x1afcec6ecf0 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:141:32> col:24 first 'T () const' inline
|   | | `-AlwaysInlineAttr 0x1afcec6ed90 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afcec6ee38 <col:25, ./src\Core/Container/List.h:146:36> col:26 getSize 'u32 () const' inline
|   | | |-AlwaysInlineAttr 0x1afcec6eed8 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede9f60 <./src\Core/Container/List.h:144:11, col:45>
|   | |   |-ParagraphComment 0x1afcede9ec0 <col:11>
|   | |   | `-TextComment 0x1afcede9e98 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede9ee0 <col:12, col:45> Name="brief"
|   | |     `-ParagraphComment 0x1afcede9f30 <col:18, col:45>
|   | |       `-TextComment 0x1afcede9f08 <col:18, col:45> Text=" Get count of items in list."
|   | |-CXXMethodDecl 0x1afcec72230 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:154:90> col:30 invalid getFiltered 'List<T> (const int &) const' inline
|   | | |-ParmVarDecl 0x1afcec72100 <col:42, col:79> col:79 invalid _callback 'const int &'
|   | | |-AlwaysInlineAttr 0x1afcec722d8 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedee238 <./src\Core/Container/List.h:149:11, line:152:32>
|   | |   |-ParagraphComment 0x1afcede9fe8 <line:149:11>
|   | |   | `-TextComment 0x1afcede9fc0 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedea008 <col:12, col:58> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedea058 <col:18, col:58>
|   | |   |   `-TextComment 0x1afcedea030 <col:18, col:58> Text=" Get filtered list by a compare callback."
|   | |   |-ParagraphComment 0x1afcedea0a0 <line:151:11>
|   | |   | `-TextComment 0x1afcedea078 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedea0c0 <col:12, line:152:11> [in] implicitly Param="_callback" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedee180 <col:11>
|   | |   |   `-TextComment 0x1afcedee158 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedee1a0 <col:12, col:32> Name="return"
|   | |     `-ParagraphComment 0x1afcedee1f0 <col:19, col:32>
|   | |       `-TextComment 0x1afcedee1c8 <col:19, col:32> Text=" Filtered List"
|   | |-CXXMethodDecl 0x1afcec72490 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:161:44> col:30 getReversed 'List<T> () const' inline
|   | | |-AlwaysInlineAttr 0x1afcec72530 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedee428 <./src\Core/Container/List.h:157:11, line:159:32>
|   | |   |-ParagraphComment 0x1afcedee2c0 <line:157:11>
|   | |   | `-TextComment 0x1afcedee298 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedee2e0 <col:12, col:48> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedee330 <col:18, col:48>
|   | |   |   `-TextComment 0x1afcedee308 <col:18, col:48> Text=" Get reversed copy of the list."
|   | |   |-ParagraphComment 0x1afcedee378 <line:159:11>
|   | |   | `-TextComment 0x1afcedee350 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedee398 <col:12, col:32> Name="return"
|   | |     `-ParagraphComment 0x1afcedee3e8 <col:19, col:32>
|   | |       `-TextComment 0x1afcedee3c0 <col:19, col:32> Text=" Reversed List"
|   | |-CXXMethodDecl 0x1afcec72780 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:169:100> col:30 getSorted 'List<T> (const Michka::SortDirection &) const' inline
|   | | |-ParmVarDecl 0x1afcec72658 <col:40, col:89> col:61 _direction 'const Michka::SortDirection &' cinit
|   | | | `-ExprWithCleanups 0x1afcec776a8 <col:74, col:89> 'const Michka::SortDirection' lvalue
|   | | |   `-MaterializeTemporaryExpr 0x1afcec77690 <col:74, col:89> 'const Michka::SortDirection' lvalue
|   | | |     `-ImplicitCastExpr 0x1afcec77678 <col:74, col:89> 'const Michka::SortDirection' <NoOp>
|   | | |       `-DeclRefExpr 0x1afcec77648 <col:74, col:89> 'Michka::SortDirection' EnumConstant 0x1afce0f38e8 'ascending' 'Michka::SortDirection'
|   | | |-AlwaysInlineAttr 0x1afcec72828 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedee6c0 <./src\Core/Container/List.h:164:11, line:167:30>
|   | |   |-ParagraphComment 0x1afcedee4b0 <line:164:11>
|   | |   | `-TextComment 0x1afcedee488 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedee4d0 <col:12, col:47> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedee520 <col:18, col:47>
|   | |   |   `-TextComment 0x1afcedee4f8 <col:18, col:47> Text=" Get sorted copy of this list."
|   | |   |-ParagraphComment 0x1afcedee568 <line:166:11>
|   | |   | `-TextComment 0x1afcedee540 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedee588 <col:12, line:167:11> [in] implicitly Param="_direction" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedee608 <col:11>
|   | |   |   `-TextComment 0x1afcedee5e0 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedee628 <col:12, col:30> Name="return"
|   | |     `-ParagraphComment 0x1afcedee678 <col:19, col:30>
|   | |       `-TextComment 0x1afcedee650 <col:19, col:30> Text=" Sorted List"
|   | |-CXXMethodDecl 0x1afcec72ba0 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:177:98> col:30 invalid getSorted 'List<T> (const int &) const' inline
|   | | |-ParmVarDecl 0x1afcec72ab8 <col:40, col:87> col:87 invalid _callback 'const int &'
|   | | |-AlwaysInlineAttr 0x1afcec72c48 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedee958 <./src\Core/Container/List.h:172:11, line:175:30>
|   | |   |-ParagraphComment 0x1afcedee748 <line:172:11>
|   | |   | `-TextComment 0x1afcedee720 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedee768 <col:12, col:68> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedee7b8 <col:18, col:68>
|   | |   |   `-TextComment 0x1afcedee790 <col:18, col:68> Text=" Get sorted copy of this list with custom callback."
|   | |   |-ParagraphComment 0x1afcedee800 <line:174:11>
|   | |   | `-TextComment 0x1afcedee7d8 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedee820 <col:12, line:175:11> [in] implicitly Param="_callback" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedee8a0 <col:11>
|   | |   |   `-TextComment 0x1afcedee878 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedee8c0 <col:12, col:30> Name="return"
|   | |     `-ParagraphComment 0x1afcedee910 <col:19, col:30>
|   | |       `-TextComment 0x1afcedee8e8 <col:19, col:30> Text=" Sorted List"
|   | |-CXXMethodDecl 0x1afcec72e00 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:185:40> col:30 getUnique 'List<T> ()' inline
|   | | |-AlwaysInlineAttr 0x1afcec72ea0 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedeebe8 <./src\Core/Container/List.h:180:11, line:183:23>
|   | |   |-ParagraphComment 0x1afcedee9e0 <line:180:11>
|   | |   | `-TextComment 0x1afcedee9b8 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedeea00 <col:12, col:47> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedeea50 <col:18, col:47>
|   | |   |   `-TextComment 0x1afcedeea28 <col:18, col:47> Text=" Get unique copy of this list."
|   | |   |-ParagraphComment 0x1afcedeea98 <line:182:11>
|   | |   | `-TextComment 0x1afcedeea70 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedeeab8 <col:12, line:183:11> [in] implicitly Param="_what"
|   | |   | `-ParagraphComment 0x1afcedeeb30 <col:11>
|   | |   |   `-TextComment 0x1afcedeeb08 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedeeb50 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcedeeba0 <col:19, col:23>
|   | |       `-TextComment 0x1afcedeeb78 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afcec71230 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:193:96> col:30 invalid getUnique 'List<T> (const int &)' inline
|   | | |-ParmVarDecl 0x1afcec71100 <col:40, col:87> col:87 invalid _callback 'const int &'
|   | | |-AlwaysInlineAttr 0x1afcec712d8 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedeee80 <./src\Core/Container/List.h:188:11, line:191:23>
|   | |   |-ParagraphComment 0x1afcedeec70 <line:188:11>
|   | |   | `-TextComment 0x1afcedeec48 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedeec90 <col:12, col:47> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedeece0 <col:18, col:47>
|   | |   |   `-TextComment 0x1afcedeecb8 <col:18, col:47> Text=" Get unique copy of this list."
|   | |   |-ParagraphComment 0x1afcedeed28 <line:190:11>
|   | |   | `-TextComment 0x1afcedeed00 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedeed48 <col:12, line:191:11> [in] implicitly Param="_callback" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedeedc8 <col:11>
|   | |   |   `-TextComment 0x1afcedeeda0 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedeede8 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcedeee38 <col:19, col:23>
|   | |       `-TextComment 0x1afcedeee10 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afcec71400 <line:200:9, col:56> col:16 implode 'Michka::String (const Michka::String &) const'
|   | | |-ParmVarDecl 0x1afcec71370 <col:24, col:49> col:38 invalid _seperator 'const Michka::String &' cinit
|   | | | `-OpaqueValueExpr 0x1afcec776e0 <col:49> 'const Michka::String':'const Michka::StringTemplate<wchar_t>'
|   | | `-FullComment 0x1afcedef0a0 <line:196:11, line:199:9>
|   | |   |-ParagraphComment 0x1afcedeef08 <line:196:11>
|   | |   | `-TextComment 0x1afcedeeee0 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedeef28 <col:12, col:49> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedeef78 <col:18, col:49>
|   | |   |   `-TextComment 0x1afcedeef50 <col:18, col:49> Text=" Join list elements as a string."
|   | |   |-ParagraphComment 0x1afcedeefc0 <line:198:11>
|   | |   | `-TextComment 0x1afcedeef98 <col:11> Text=" "
|   | |   `-ParamCommandComment 0x1afcedeefe0 <col:12, line:199:9> [in] implicitly Param="_seperator" ParamIndex=0
|   | |     `-ParagraphComment 0x1afcedef060 <col:1, col:9>
|   | |       `-TextComment 0x1afcedef038 <col:1, col:9> Text="         "
|   | |-CXXMethodDecl 0x1afcec71640 <line:209:9, col:58> col:13 indexOf 'u32 (const T &, const u32) const'
|   | | |-ParmVarDecl 0x1afcec714e8 <col:21, col:30> col:30 _what 'const T &'
|   | | |-ParmVarDecl 0x1afcec71560 <col:37, col:55> col:47 _from 'const u32':'const unsigned int' cinit
|   | | | `-ImplicitCastExpr 0x1afcec77720 <col:55> 'u32':'unsigned int' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1afcec776f8 <col:55> 'int' 0
|   | | `-FullComment 0x1afcedef3d0 <line:203:11, line:207:61>
|   | |   |-ParagraphComment 0x1afcedef128 <line:203:11>
|   | |   | `-TextComment 0x1afcedef100 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedef148 <col:12, col:60> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedef198 <col:18, col:60>
|   | |   |   `-TextComment 0x1afcedef170 <col:18, col:60> Text=" Find index of a value with offset of from."
|   | |   |-ParagraphComment 0x1afcedef1e0 <line:205:11>
|   | |   | `-TextComment 0x1afcedef1b8 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedef200 <col:12, line:206:11> [in] implicitly Param="_what" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedef278 <col:11>
|   | |   |   `-TextComment 0x1afcedef250 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedef298 <col:12, line:207:11> [in] implicitly Param="_from" ParamIndex=1
|   | |   | `-ParagraphComment 0x1afcedef310 <col:11>
|   | |   |   `-TextComment 0x1afcedef2e8 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedef330 <col:12, col:61> Name="return"
|   | |     `-ParagraphComment 0x1afcedef380 <col:19, col:61>
|   | |       `-TextComment 0x1afcedef358 <col:19, col:61> Text=" index of value. notFound if nothing found."
|   | |-CXXMethodDecl 0x1afcec718e8 <line:218:9, col:90> col:13 invalid indexOf 'u32 (const int &, const u32) const'
|   | | |-ParmVarDecl 0x1afcec717d8 <col:21, col:58> col:58 invalid _callback 'const int &'
|   | | |-ParmVarDecl 0x1afcec71850 <col:69, col:87> col:79 _from 'const u32':'const unsigned int' cinit
|   | | | `-ImplicitCastExpr 0x1afcec77760 <col:87> 'u32':'unsigned int' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1afcec77738 <col:87> 'int' 0
|   | | `-FullComment 0x1afcedef708 <line:212:11, line:216:61>
|   | |   |-ParagraphComment 0x1afcedef458 <line:212:11>
|   | |   | `-TextComment 0x1afcedef430 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedef478 <col:12, col:83> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedef4c8 <col:18, col:83>
|   | |   |   `-TextComment 0x1afcedef4a0 <col:18, col:83> Text=" Find index of a value with offset of from with custom a callback."
|   | |   |-ParagraphComment 0x1afcedef510 <line:214:11>
|   | |   | `-TextComment 0x1afcedef4e8 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedef530 <col:12, line:215:11> [in] implicitly Param="_callback" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedef5b0 <col:11>
|   | |   |   `-TextComment 0x1afcedef588 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedef5d0 <col:12, line:216:11> [in] implicitly Param="_from" ParamIndex=1
|   | |   | `-ParagraphComment 0x1afcedef648 <col:11>
|   | |   |   `-TextComment 0x1afcedef620 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedef668 <col:12, col:61> Name="return"
|   | |     `-ParagraphComment 0x1afcedef6b8 <col:19, col:61>
|   | |       `-TextComment 0x1afcedef690 <col:19, col:61> Text=" index of value. notFound if nothing found."
|   | |-FunctionTemplateDecl 0x1afcec71ea0 <line:229:9, line:230:119> col:13 invalid indexOf
|   | | |-TemplateTypeParmDecl 0x1afcec719c8 <line:229:18, col:27> col:27 referenced typename depth 1 index 0 T2
|   | | |-CXXMethodDecl 0x1afcec71e00 <line:230:9, col:119> col:13 invalid indexOf 'u32 (const int &, const T2 &, const u32) const'
|   | | | |-ParmVarDecl 0x1afcec71c28 <col:21, col:69> col:69 invalid _callback 'const int &'
|   | | | |-ParmVarDecl 0x1afcec71ca0 <col:81, col:91> col:91 _what 'const T2 &'
|   | | | |-ParmVarDecl 0x1afcec71d18 <col:98, col:116> col:108 _from 'const u32':'const unsigned int' cinit
|   | | | | `-ImplicitCastExpr 0x1afcec777a0 <col:116> 'u32':'unsigned int' <IntegralCast>
|   | | | |   `-IntegerLiteral 0x1afcec77778 <col:116> 'int' 0
|   | | | `-FullComment 0x1afcedf0088 <line:221:11, line:227:61>
|   | | |   |-ParagraphComment 0x1afcedefc90 <line:221:11>
|   | | |   | `-TextComment 0x1afcedefc68 <col:11> Text=" "
|   | | |   |-BlockCommandComment 0x1afcedefcb0 <col:12, col:92> Name="brief"
|   | | |   | `-ParagraphComment 0x1afcedefd00 <col:18, col:92>
|   | | |   |   `-TextComment 0x1afcedefcd8 <col:18, col:92> Text=" Find index of a value with offset of from with custom comparison function."
|   | | |   |-ParagraphComment 0x1afcedefd48 <line:223:11>
|   | | |   | `-TextComment 0x1afcedefd20 <col:11> Text=" "
|   | | |   |-TParamCommandComment 0x1afcedefd68 <col:12, line:224:11> Param="T2"
|   | | |   | `-ParagraphComment 0x1afcedefde8 <col:11>
|   | | |   |   `-TextComment 0x1afcedefdc0 <col:11> Text=" "
|   | | |   |-ParamCommandComment 0x1afcedefe08 <col:12, line:225:11> [in] implicitly Param="_callback" ParamIndex=0
|   | | |   | `-ParagraphComment 0x1afcedefe88 <col:11>
|   | | |   |   `-TextComment 0x1afcedefe60 <col:11> Text=" "
|   | | |   |-ParamCommandComment 0x1afcedefea8 <col:12, line:226:11> [in] implicitly Param="_what" ParamIndex=1
|   | | |   | `-ParagraphComment 0x1afcedeff20 <col:11>
|   | | |   |   `-TextComment 0x1afcedefef8 <col:11> Text=" "
|   | | |   |-ParamCommandComment 0x1afcedeff40 <col:12, line:227:11> [in] implicitly Param="_from" ParamIndex=2
|   | | |   | `-ParagraphComment 0x1afcedeffb8 <col:11>
|   | | |   |   `-TextComment 0x1afcedeff90 <col:11> Text=" "
|   | | |   `-BlockCommandComment 0x1afcedeffd8 <col:12, col:61> Name="return"
|   | | |     `-ParagraphComment 0x1afcedf0028 <col:19, col:61>
|   | | |       `-TextComment 0x1afcedf0000 <col:19, col:61> Text=" index of value. notFound if nothing found."
|   | | `-FullComment 0x1afcedefc08 <line:221:11, line:227:61>
|   | |   |-ParagraphComment 0x1afcedef808 <line:221:11>
|   | |   | `-TextComment 0x1afcedef7e0 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedef828 <col:12, col:92> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedef878 <col:18, col:92>
|   | |   |   `-TextComment 0x1afcedef850 <col:18, col:92> Text=" Find index of a value with offset of from with custom comparison function."
|   | |   |-ParagraphComment 0x1afcedef8c0 <line:223:11>
|   | |   | `-TextComment 0x1afcedef898 <col:11> Text=" "
|   | |   |-TParamCommandComment 0x1afcedef8e0 <col:12, line:224:11> Param="T2" Position=<0>
|   | |   | `-ParagraphComment 0x1afcedef968 <col:11>
|   | |   |   `-TextComment 0x1afcedef940 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedef988 <col:12, line:225:11> [in] implicitly Param="_callback" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedefa08 <col:11>
|   | |   |   `-TextComment 0x1afcedef9e0 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedefa28 <col:12, line:226:11> [in] implicitly Param="_what" ParamIndex=1
|   | |   | `-ParagraphComment 0x1afcedefaa0 <col:11>
|   | |   |   `-TextComment 0x1afcedefa78 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedefac0 <col:12, line:227:11> [in] implicitly Param="_from" ParamIndex=2
|   | |   | `-ParagraphComment 0x1afcedefb38 <col:11>
|   | |   |   `-TextComment 0x1afcedefb10 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedefb58 <col:12, col:61> Name="return"
|   | |     `-ParagraphComment 0x1afcedefba8 <col:19, col:61>
|   | |       `-TextComment 0x1afcedefb80 <col:19, col:61> Text=" index of value. notFound if nothing found."
|   | |-CXXMethodDecl 0x1afcec701b8 <line:239:9, col:58> col:18 insert 'List<T> &(const u32 &, const T &)'
|   | | |-ParmVarDecl 0x1afcec6ffc8 <col:25, col:36> col:36 _index 'const u32 &'
|   | | |-ParmVarDecl 0x1afcec70040 <col:44, col:53> col:53 _item 'const T &'
|   | | `-FullComment 0x1afcedea3a8 <line:233:11, line:237:23>
|   | |   |-ParagraphComment 0x1afcedf0110 <line:233:11>
|   | |   | `-TextComment 0x1afcedf00e8 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedea120 <col:12, col:52> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedea170 <col:18, col:52>
|   | |   |   `-TextComment 0x1afcedea148 <col:18, col:52> Text=" Insert new item in specifed index."
|   | |   |-ParagraphComment 0x1afcedea1b8 <line:235:11>
|   | |   | `-TextComment 0x1afcedea190 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedea1d8 <col:12, line:236:11> [in] implicitly Param="_index" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedea250 <col:11>
|   | |   |   `-TextComment 0x1afcedea228 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedea270 <col:12, line:237:11> [in] implicitly Param="_item" ParamIndex=1
|   | |   | `-ParagraphComment 0x1afcedea2e8 <col:11>
|   | |   |   `-TextComment 0x1afcedea2c0 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedea308 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcedea358 <col:19, col:23>
|   | |       `-TextComment 0x1afcedea330 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afcec704f8 <line:240:9, col:53> col:18 insert 'List<T> &(const u32 &, T &&)'
|   | | |-ParmVarDecl 0x1afcec70308 <col:25, col:36> col:36 _index 'const u32 &'
|   | | `-ParmVarDecl 0x1afcec70380 <col:44, col:48> col:48 _item 'T &&'
|   | |-CXXMethodDecl 0x1afcec70948 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:249:78> col:31 insert 'List<T> &(const u32 &, const List<T> &)' inline
|   | | |-ParmVarDecl 0x1afcec70678 <col:38, col:49> col:49 _index 'const u32 &'
|   | | |-ParmVarDecl 0x1afcec707d8 <col:57, col:72> col:72 _items 'const List<T> &'
|   | | |-AlwaysInlineAttr 0x1afcec709f8 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedea6d8 <./src\Core/Container/List.h:243:11, line:247:23>
|   | |   |-ParagraphComment 0x1afcedea430 <line:243:11>
|   | |   | `-TextComment 0x1afcedea408 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedea450 <col:12, col:58> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedea4a0 <col:18, col:58>
|   | |   |   `-TextComment 0x1afcedea478 <col:18, col:58> Text=" Insert multiple items in specifed index."
|   | |   |-ParagraphComment 0x1afcedea4e8 <line:245:11>
|   | |   | `-TextComment 0x1afcedea4c0 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedea508 <col:12, line:246:11> [in] implicitly Param="_index" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedea580 <col:11>
|   | |   |   `-TextComment 0x1afcedea558 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedea5a0 <col:12, line:247:11> [in] implicitly Param="_items" ParamIndex=1
|   | |   | `-ParagraphComment 0x1afcedea618 <col:11>
|   | |   |   `-TextComment 0x1afcedea5f0 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedea638 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcedea688 <col:19, col:23>
|   | |       `-TextComment 0x1afcedea660 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afcec70ce8 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:250:95> col:31 invalid insert 'List<T> &(const u32 &, const int &)' inline
|   | | |-ParmVarDecl 0x1afcec70ae8 <col:38, col:49> col:49 _index 'const u32 &'
|   | | |-ParmVarDecl 0x1afcec70b78 <col:57, col:89> col:89 invalid _items 'const int &'
|   | | `-AlwaysInlineAttr 0x1afcec70d98 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afcec74188 <./src\Core/Container/List.h:251:9, col:77> col:18 insert 'List<T> &(const u32 &, const T *, const u32 &)'
|   | | |-ParmVarDecl 0x1afcec70e88 <col:25, col:36> col:36 _index 'const u32 &'
|   | | |-ParmVarDecl 0x1afcec73f80 <col:44, col:53> col:53 _items 'const T *'
|   | | `-ParmVarDecl 0x1afcec73ff8 <col:61, col:72> col:72 _size 'const u32 &'
|   | |-CXXMethodDecl 0x1afcec74290 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:256:37> col:27 isEmpty 'bool () const' inline
|   | | |-AlwaysInlineAttr 0x1afcec74330 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedea800 <./src\Core/Container/List.h:254:11, col:38>
|   | |   |-ParagraphComment 0x1afcedea760 <col:11>
|   | |   | `-TextComment 0x1afcedea738 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedea780 <col:12, col:38> Name="brief"
|   | |     `-ParagraphComment 0x1afcedea7d0 <col:18, col:38>
|   | |       `-TextComment 0x1afcedea7a8 <col:18, col:38> Text=" Check list is empty."
|   | |-CXXMethodDecl 0x1afcec743d8 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:261:40> col:27 isNotEmpty 'bool () const' inline
|   | | |-AlwaysInlineAttr 0x1afcec74478 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedea928 <./src\Core/Container/List.h:259:11, col:42>
|   | |   |-ParagraphComment 0x1afcedea888 <col:11>
|   | |   | `-TextComment 0x1afcedea860 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedea8a8 <col:12, col:42> Name="brief"
|   | |     `-ParagraphComment 0x1afcedea8f8 <col:18, col:42>
|   | |       `-TextComment 0x1afcedea8d0 <col:18, col:42> Text=" Check list is not empty."
|   | |-CXXMethodDecl 0x1afcec74520 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:266:30> col:25 last 'T &()' inline
|   | | |-AlwaysInlineAttr 0x1afcec745c0 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedeaa50 <./src\Core/Container/List.h:264:11, col:32>
|   | |   |-ParagraphComment 0x1afcedea9b0 <col:11>
|   | |   | `-TextComment 0x1afcedea988 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedea9d0 <col:12, col:32> Name="brief"
|   | |     `-ParagraphComment 0x1afcedeaa20 <col:18, col:32>
|   | |       `-TextComment 0x1afcedea9f8 <col:18, col:32> Text=" Get last item."
|   | |-CXXMethodDecl 0x1afcec74638 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:267:31> col:24 last 'T () const' inline
|   | | `-AlwaysInlineAttr 0x1afcec746d8 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afcec74880 <./src\Core/Container/List.h:276:9, col:73> col:13 lastIndexOf 'u32 (const T &, const u32) const'
|   | | |-ParmVarDecl 0x1afcec74770 <col:25, col:34> col:34 _what 'const T &'
|   | | |-ParmVarDecl 0x1afcec747e8 <col:41, col:68> col:51 _from 'const u32':'const unsigned int' cinit
|   | | | `-ImplicitCastExpr 0x1afcec77850 <col:59, col:68> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1afcec77820 <col:59, col:68> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int' non_odr_use_constant
|   | | `-FullComment 0x1afcedead80 <line:270:11, line:274:61>
|   | |   |-ParagraphComment 0x1afcedeaad8 <line:270:11>
|   | |   | `-TextComment 0x1afcedeaab0 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedeaaf8 <col:12, col:82> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedeab48 <col:18, col:82>
|   | |   |   `-TextComment 0x1afcedeab20 <col:18, col:82> Text=" Find index of a value with offset of from but in reversed order."
|   | |   |-ParagraphComment 0x1afcedeab90 <line:272:11>
|   | |   | `-TextComment 0x1afcedeab68 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedeabb0 <col:12, line:273:11> [in] implicitly Param="_what" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedeac28 <col:11>
|   | |   |   `-TextComment 0x1afcedeac00 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedeac48 <col:12, line:274:11> [in] implicitly Param="_from" ParamIndex=1
|   | |   | `-ParagraphComment 0x1afcedeacc0 <col:11>
|   | |   |   `-TextComment 0x1afcedeac98 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedeace0 <col:12, col:61> Name="return"
|   | |     `-ParagraphComment 0x1afcedead30 <col:19, col:61>
|   | |       `-TextComment 0x1afcedead08 <col:19, col:61> Text=" index of value. notFound if nothing found."
|   | |-CXXMethodDecl 0x1afcec74b28 <line:285:9, col:105> col:13 invalid lastIndexOf 'u32 (const int &, const u32) const'
|   | | |-ParmVarDecl 0x1afcec74a18 <col:25, col:62> col:62 invalid _callback 'const int &'
|   | | |-ParmVarDecl 0x1afcec74a90 <col:73, col:100> col:83 _from 'const u32':'const unsigned int' cinit
|   | | | `-ImplicitCastExpr 0x1afcec77900 <col:91, col:100> 'unsigned int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x1afcec778d0 <col:91, col:100> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int' non_odr_use_constant
|   | | `-FullComment 0x1afcedeb0b8 <line:279:11, line:283:61>
|   | |   |-ParagraphComment 0x1afcedeae08 <line:279:11>
|   | |   | `-TextComment 0x1afcedeade0 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedeae28 <col:12, col:105> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedeae78 <col:18, col:105>
|   | |   |   `-TextComment 0x1afcedeae50 <col:18, col:105> Text=" Find index of a value with offset of from with custom a callback but in reversed order."
|   | |   |-ParagraphComment 0x1afcedeaec0 <line:281:11>
|   | |   | `-TextComment 0x1afcedeae98 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedeaee0 <col:12, line:282:11> [in] implicitly Param="_callback" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedeaf60 <col:11>
|   | |   |   `-TextComment 0x1afcedeaf38 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedeaf80 <col:12, line:283:11> [in] implicitly Param="_from" ParamIndex=1
|   | |   | `-ParagraphComment 0x1afcedeaff8 <col:11>
|   | |   |   `-TextComment 0x1afcedeafd0 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedeb018 <col:12, col:61> Name="return"
|   | |     `-ParagraphComment 0x1afcedeb068 <col:19, col:61>
|   | |       `-TextComment 0x1afcedeb040 <col:19, col:61> Text=" index of value. notFound if nothing found."
|   | |-FunctionTemplateDecl 0x1afcec6d0a0 <line:296:9, line:297:134> col:13 invalid lastIndexOf
|   | | |-TemplateTypeParmDecl 0x1afcec74c08 <line:296:18, col:27> col:27 referenced typename depth 1 index 0 T2
|   | | |-CXXMethodDecl 0x1afcec6d000 <line:297:9, col:134> col:13 invalid lastIndexOf 'u32 (const int &, const T2 &, const u32) const'
|   | | | |-ParmVarDecl 0x1afcec74e68 <col:25, col:73> col:73 invalid _callback 'const int &'
|   | | | |-ParmVarDecl 0x1afcec74ee0 <col:85, col:95> col:95 _what 'const T2 &'
|   | | | |-ParmVarDecl 0x1afcec6cf10 <col:102, col:129> col:112 _from 'const u32':'const unsigned int' cinit
|   | | | | `-ImplicitCastExpr 0x1afcec779b0 <col:120, col:129> 'unsigned int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x1afcec77980 <col:120, col:129> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int' non_odr_use_constant
|   | | | `-FullComment 0x1afcedeba38 <line:288:11, line:294:61>
|   | | |   |-ParagraphComment 0x1afcedeb640 <line:288:11>
|   | | |   | `-TextComment 0x1afcedeb618 <col:11> Text=" "
|   | | |   |-BlockCommandComment 0x1afcedeb660 <col:12, col:114> Name="brief"
|   | | |   | `-ParagraphComment 0x1afcedeb6b0 <col:18, col:114>
|   | | |   |   `-TextComment 0x1afcedeb688 <col:18, col:114> Text=" Find index of a value with offset of from with custom comparison function but in reversed order."
|   | | |   |-ParagraphComment 0x1afcedeb6f8 <line:290:11>
|   | | |   | `-TextComment 0x1afcedeb6d0 <col:11> Text=" "
|   | | |   |-TParamCommandComment 0x1afcedeb718 <col:12, line:291:11> Param="T2"
|   | | |   | `-ParagraphComment 0x1afcedeb798 <col:11>
|   | | |   |   `-TextComment 0x1afcedeb770 <col:11> Text=" "
|   | | |   |-ParamCommandComment 0x1afcedeb7b8 <col:12, line:292:11> [in] implicitly Param="_callback" ParamIndex=0
|   | | |   | `-ParagraphComment 0x1afcedeb838 <col:11>
|   | | |   |   `-TextComment 0x1afcedeb810 <col:11> Text=" "
|   | | |   |-ParamCommandComment 0x1afcedeb858 <col:12, line:293:11> [in] implicitly Param="_what" ParamIndex=1
|   | | |   | `-ParagraphComment 0x1afcedeb8d0 <col:11>
|   | | |   |   `-TextComment 0x1afcedeb8a8 <col:11> Text=" "
|   | | |   |-ParamCommandComment 0x1afcedeb8f0 <col:12, line:294:11> [in] implicitly Param="_from" ParamIndex=2
|   | | |   | `-ParagraphComment 0x1afcedeb968 <col:11>
|   | | |   |   `-TextComment 0x1afcedeb940 <col:11> Text=" "
|   | | |   `-BlockCommandComment 0x1afcedeb988 <col:12, col:61> Name="return"
|   | | |     `-ParagraphComment 0x1afcedeb9d8 <col:19, col:61>
|   | | |       `-TextComment 0x1afcedeb9b0 <col:19, col:61> Text=" index of value. notFound if nothing found."
|   | | `-FullComment 0x1afcedeb5b8 <line:288:11, line:294:61>
|   | |   |-ParagraphComment 0x1afcedeb1b8 <line:288:11>
|   | |   | `-TextComment 0x1afcedeb190 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedeb1d8 <col:12, col:114> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedeb228 <col:18, col:114>
|   | |   |   `-TextComment 0x1afcedeb200 <col:18, col:114> Text=" Find index of a value with offset of from with custom comparison function but in reversed order."
|   | |   |-ParagraphComment 0x1afcedeb270 <line:290:11>
|   | |   | `-TextComment 0x1afcedeb248 <col:11> Text=" "
|   | |   |-TParamCommandComment 0x1afcedeb290 <col:12, line:291:11> Param="T2" Position=<0>
|   | |   | `-ParagraphComment 0x1afcedeb318 <col:11>
|   | |   |   `-TextComment 0x1afcedeb2f0 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedeb338 <col:12, line:292:11> [in] implicitly Param="_callback" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedeb3b8 <col:11>
|   | |   |   `-TextComment 0x1afcedeb390 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedeb3d8 <col:12, line:293:11> [in] implicitly Param="_what" ParamIndex=1
|   | |   | `-ParagraphComment 0x1afcedeb450 <col:11>
|   | |   |   `-TextComment 0x1afcedeb428 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedeb470 <col:12, line:294:11> [in] implicitly Param="_from" ParamIndex=2
|   | |   | `-ParagraphComment 0x1afcedeb4e8 <col:11>
|   | |   |   `-TextComment 0x1afcedeb4c0 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedeb508 <col:12, col:61> Name="return"
|   | |     `-ParagraphComment 0x1afcedeb558 <col:19, col:61>
|   | |       `-TextComment 0x1afcedeb530 <col:19, col:61> Text=" index of value. notFound if nothing found."
|   | |-CXXMethodDecl 0x1afcec6d190 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:304:32> col:24 popBack 'T ()' inline
|   | | |-AlwaysInlineAttr 0x1afcec6d230 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedebc28 <./src\Core/Container/List.h:300:11, line:302:34>
|   | |   |-ParagraphComment 0x1afcedebac0 <line:300:11>
|   | |   | `-TextComment 0x1afcedeba98 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedebae0 <col:12, col:53> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedebb30 <col:18, col:53>
|   | |   |   `-TextComment 0x1afcedebb08 <col:18, col:53> Text=" Get last item value then remove it."
|   | |   |-ParagraphComment 0x1afcedebb78 <line:302:11>
|   | |   | `-TextComment 0x1afcedebb50 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedebb98 <col:12, col:34> Name="return"
|   | |     `-ParagraphComment 0x1afcedebbe8 <col:19, col:34>
|   | |       `-TextComment 0x1afcedebbc0 <col:19, col:34> Text=" Last Item Value"
|   | |-CXXMethodDecl 0x1afcec6d2d8 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:311:33> col:24 popFront 'T ()' inline
|   | | |-AlwaysInlineAttr 0x1afcec6d378 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedebe18 <./src\Core/Container/List.h:307:11, line:309:35>
|   | |   |-ParagraphComment 0x1afcedebcb0 <line:307:11>
|   | |   | `-TextComment 0x1afcedebc88 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedebcd0 <col:12, col:54> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedebd20 <col:18, col:54>
|   | |   |   `-TextComment 0x1afcedebcf8 <col:18, col:54> Text=" Get first item value then remove it."
|   | |   |-ParagraphComment 0x1afcedebd68 <line:309:11>
|   | |   | `-TextComment 0x1afcedebd40 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedebd88 <col:12, col:35> Name="return"
|   | |     `-ParagraphComment 0x1afcedebdd8 <col:19, col:35>
|   | |       `-TextComment 0x1afcedebdb0 <col:19, col:35> Text=" First Item Value"
|   | |-CXXMethodDecl 0x1afcec6d5f8 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:319:54> col:31 pushBack 'List<T> &(const T &)' inline
|   | | |-ParmVarDecl 0x1afcec6d498 <col:40, col:49> col:49 _item 'const T &'
|   | | |-AlwaysInlineAttr 0x1afcec6d6a0 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedec0a8 <./src\Core/Container/List.h:314:11, line:317:23>
|   | |   |-ParagraphComment 0x1afcedebea0 <line:314:11>
|   | |   | `-TextComment 0x1afcedebe78 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedebec0 <col:12, col:46> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedebf10 <col:18, col:46>
|   | |   |   `-TextComment 0x1afcedebee8 <col:18, col:46> Text=" Add new item to end of list."
|   | |   |-ParagraphComment 0x1afcedebf58 <line:316:11>
|   | |   | `-TextComment 0x1afcedebf30 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedebf78 <col:12, line:317:11> [in] implicitly Param="_item" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedebff0 <col:11>
|   | |   |   `-TextComment 0x1afcedebfc8 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedec010 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcedec060 <col:19, col:23>
|   | |       `-TextComment 0x1afcedec038 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afcec6d8f8 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:320:49> col:31 pushBack 'List<T> &(T &&)' inline
|   | | |-ParmVarDecl 0x1afcec6d798 <col:40, col:44> col:44 _item 'T &&'
|   | | `-AlwaysInlineAttr 0x1afcec6d9a0 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afcec6dbe8 <col:25, ./src\Core/Container/List.h:328:55> col:31 pushFront 'List<T> &(const T &)' inline
|   | | |-ParmVarDecl 0x1afcec6dac8 <col:41, col:50> col:50 _item 'const T &'
|   | | |-AlwaysInlineAttr 0x1afcec6dc90 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedec360 <./src\Core/Container/List.h:323:11, line:326:23>
|   | |   |-ParagraphComment 0x1afcedec158 <line:323:11>
|   | |   | `-TextComment 0x1afcedec130 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedec178 <col:12, col:48> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedec1c8 <col:18, col:48>
|   | |   |   `-TextComment 0x1afcedec1a0 <col:18, col:48> Text=" Add new item to begin of list."
|   | |   |-ParagraphComment 0x1afcedec210 <line:325:11>
|   | |   | `-TextComment 0x1afcedec1e8 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedec230 <col:12, line:326:11> [in] implicitly Param="_item" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedec2a8 <col:11>
|   | |   |   `-TextComment 0x1afcedec280 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedec2c8 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcedec318 <col:19, col:23>
|   | |       `-TextComment 0x1afcedec2f0 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afcec74f90 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:329:50> col:31 pushFront 'List<T> &(T &&)' inline
|   | | |-ParmVarDecl 0x1afcec6dd88 <col:41, col:45> col:45 _item 'T &&'
|   | | `-AlwaysInlineAttr 0x1afcec75038 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afcec75348 <./src\Core/Container/List.h:338:9, col:65> col:18 remove 'List<T> &(const u32 &, const u32 &)'
|   | | |-ParmVarDecl 0x1afcec75158 <col:25, col:36> col:36 _index 'const u32 &'
|   | | |-ParmVarDecl 0x1afcec751d0 <col:44, col:64> col:55 _count 'const u32 &' cinit
|   | | | `-ExprWithCleanups 0x1afcec77a20 <col:64> 'const u32':'const unsigned int' lvalue
|   | | |   `-MaterializeTemporaryExpr 0x1afcec77a08 <col:64> 'const u32':'const unsigned int' lvalue
|   | | |     `-ImplicitCastExpr 0x1afcec779f0 <col:64> 'const u32':'const unsigned int' <IntegralCast>
|   | | |       `-IntegerLiteral 0x1afcec779c8 <col:64> 'int' 1
|   | | `-FullComment 0x1afcedec690 <line:332:11, line:336:23>
|   | |   |-ParagraphComment 0x1afcedec3e8 <line:332:11>
|   | |   | `-TextComment 0x1afcedec3c0 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedec408 <col:12, col:41> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedec458 <col:18, col:41>
|   | |   |   `-TextComment 0x1afcedec430 <col:18, col:41> Text=" Remove items from list."
|   | |   |-ParagraphComment 0x1afcedec4a0 <line:334:11>
|   | |   | `-TextComment 0x1afcedec478 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedec4c0 <col:12, line:335:11> [in] implicitly Param="_index" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedec538 <col:11>
|   | |   |   `-TextComment 0x1afcedec510 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedec558 <col:12, line:336:11> [in] implicitly Param="_count" ParamIndex=1
|   | |   | `-ParagraphComment 0x1afcedec5d0 <col:11>
|   | |   |   `-TextComment 0x1afcedec5a8 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedec5f0 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcedec640 <col:19, col:23>
|   | |       `-TextComment 0x1afcedec618 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afcec75568 <line:345:9, col:26> col:18 reverse 'List<T> &()'
|   | | `-FullComment 0x1afcedec880 <line:341:11, line:343:23>
|   | |   |-ParagraphComment 0x1afcedec718 <line:341:11>
|   | |   | `-TextComment 0x1afcedec6f0 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedec738 <col:12, col:35> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedec788 <col:18, col:35>
|   | |   |   `-TextComment 0x1afcedec760 <col:18, col:35> Text=" Reverse the list."
|   | |   |-ParagraphComment 0x1afcedec7d0 <line:343:11>
|   | |   | `-TextComment 0x1afcedec7a8 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedec7f0 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcedec840 <col:19, col:23>
|   | |       `-TextComment 0x1afcedec818 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afcec75838 <line:353:9, col:81> col:18 sort 'List<T> &(const Michka::SortDirection &)'
|   | | |-ParmVarDecl 0x1afcec756d8 <col:23, col:72> col:44 _direction 'const Michka::SortDirection &' cinit
|   | | | `-ExprWithCleanups 0x1afcec77ad0 <col:57, col:72> 'const Michka::SortDirection' lvalue
|   | | |   `-MaterializeTemporaryExpr 0x1afcec77ab8 <col:57, col:72> 'const Michka::SortDirection' lvalue
|   | | |     `-ImplicitCastExpr 0x1afcec77aa0 <col:57, col:72> 'const Michka::SortDirection' <NoOp>
|   | | |       `-DeclRefExpr 0x1afcec77a70 <col:57, col:72> 'Michka::SortDirection' EnumConstant 0x1afce0f38e8 'ascending' 'Michka::SortDirection'
|   | | `-FullComment 0x1afcedecb18 <line:348:11, line:351:23>
|   | |   |-ParagraphComment 0x1afcedec908 <line:348:11>
|   | |   | `-TextComment 0x1afcedec8e0 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedec928 <col:12, col:28> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedec978 <col:18, col:28>
|   | |   |   `-TextComment 0x1afcedec950 <col:18, col:28> Text=" Sort list."
|   | |   |-ParagraphComment 0x1afcedec9c0 <line:350:11>
|   | |   | `-TextComment 0x1afcedec998 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedec9e0 <col:12, line:351:11> [in] implicitly Param="_direction" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedeca60 <col:11>
|   | |   |   `-TextComment 0x1afcedeca38 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedeca80 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcedecad0 <col:19, col:23>
|   | |       `-TextComment 0x1afcedecaa8 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afcec75bf8 <line:361:9, col:79> col:18 invalid sort 'List<T> &(const int &)'
|   | | |-ParmVarDecl 0x1afcec75ad0 <col:23, col:70> col:70 invalid _callback 'const int &'
|   | | `-FullComment 0x1afcedecdb0 <line:356:11, line:359:23>
|   | |   |-ParagraphComment 0x1afcedecba0 <line:356:11>
|   | |   | `-TextComment 0x1afcedecb78 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedecbc0 <col:12, col:51> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedecc10 <col:18, col:51>
|   | |   |   `-TextComment 0x1afcedecbe8 <col:18, col:51> Text=" Sort list with a custom callback."
|   | |   |-ParagraphComment 0x1afcedecc58 <line:358:11>
|   | |   | `-TextComment 0x1afcedecc30 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedecc78 <col:12, line:359:11> [in] implicitly Param="_callback" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedeccf8 <col:11>
|   | |   |   `-TextComment 0x1afcedeccd0 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedecd18 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcedecd68 <col:19, col:23>
|   | |       `-TextComment 0x1afcedecd40 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afcec77fc0 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:370:74> col:31 swap 'List<T> &(const u32 &, const u32 &)' inline
|   | | |-ParmVarDecl 0x1afcec75d68 <col:36, col:47> col:47 _index1 'const u32 &'
|   | | |-ParmVarDecl 0x1afcec75de0 <col:56, col:67> col:67 _index2 'const u32 &'
|   | | |-AlwaysInlineAttr 0x1afcec78070 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afceded0e0 <./src\Core/Container/List.h:364:11, line:368:23>
|   | |   |-ParagraphComment 0x1afcedece38 <line:364:11>
|   | |   | `-TextComment 0x1afcedece10 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedece58 <col:12, col:54> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedecea8 <col:18, col:54>
|   | |   |   `-TextComment 0x1afcedece80 <col:18, col:54> Text=" Swap two values at specific indexes."
|   | |   |-ParagraphComment 0x1afcedecef0 <line:366:11>
|   | |   | `-TextComment 0x1afcedecec8 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedecf10 <col:12, line:367:11> [in] implicitly Param="_index1" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedecf88 <col:11>
|   | |   |   `-TextComment 0x1afcedecf60 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedecfa8 <col:12, line:368:11> [in] implicitly Param="_index2" ParamIndex=1
|   | |   | `-ParagraphComment 0x1afceded020 <col:11>
|   | |   |   `-TextComment 0x1afcedecff8 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afceded040 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afceded090 <col:19, col:23>
|   | |       `-TextComment 0x1afceded068 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afcec783e8 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:378:51> col:31 swap 'List<T> &(List<T> &)' inline
|   | | |-ParmVarDecl 0x1afcec78288 <col:36, col:45> col:45 _other 'List<T> &'
|   | | |-AlwaysInlineAttr 0x1afcec78490 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afceded370 <./src\Core/Container/List.h:373:11, line:376:23>
|   | |   |-ParagraphComment 0x1afceded168 <line:373:11>
|   | |   | `-TextComment 0x1afceded140 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afceded188 <col:12, col:61> Name="brief"
|   | |   | `-ParagraphComment 0x1afceded1d8 <col:18, col:61>
|   | |   |   `-TextComment 0x1afceded1b0 <col:18, col:61> Text=" Swap values of this list with another list."
|   | |   |-ParagraphComment 0x1afceded220 <line:375:11>
|   | |   | `-TextComment 0x1afceded1f8 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afceded240 <col:12, line:376:11> [in] implicitly Param="_other" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afceded2b8 <col:11>
|   | |   |   `-TextComment 0x1afceded290 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afceded2d8 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afceded328 <col:19, col:23>
|   | |       `-TextComment 0x1afceded300 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afcec785f0 <line:385:9, col:33> col:11 take 'T (const u32 &)'
|   | | |-ParmVarDecl 0x1afcec78528 <col:16, col:27> col:27 _index 'const u32 &'
|   | | `-FullComment 0x1afceded588 <line:381:11, line:384:9>
|   | |   |-ParagraphComment 0x1afceded3f8 <line:381:11>
|   | |   | `-TextComment 0x1afceded3d0 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afceded418 <col:12, col:65> Name="brief"
|   | |   | `-ParagraphComment 0x1afceded468 <col:18, col:65>
|   | |   |   `-TextComment 0x1afceded440 <col:18, col:65> Text=" Get value of specific index and then remove it."
|   | |   |-ParagraphComment 0x1afceded4b0 <line:383:11>
|   | |   | `-TextComment 0x1afceded488 <col:11> Text=" "
|   | |   `-ParamCommandComment 0x1afceded4d0 <col:12, line:384:9> [in] implicitly Param="_index" ParamIndex=0
|   | |     `-ParagraphComment 0x1afceded548 <col:1, col:9>
|   | |       `-TextComment 0x1afceded520 <col:1, col:9> Text="         "
|   | |-CXXMethodDecl 0x1afcec786e8 <line:392:9, col:27> col:16 toString 'Michka::String () const'
|   | | `-FullComment 0x1afceded778 <line:388:11, line:390:25>
|   | |   |-ParagraphComment 0x1afceded610 <line:388:11>
|   | |   | `-TextComment 0x1afceded5e8 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afceded630 <col:12, col:39> Name="brief"
|   | |   | `-ParagraphComment 0x1afceded680 <col:18, col:39>
|   | |   |   `-TextComment 0x1afceded658 <col:18, col:39> Text=" Get values as string."
|   | |   |-ParagraphComment 0x1afceded6c8 <line:390:11>
|   | |   | `-TextComment 0x1afceded6a0 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afceded6e8 <col:12, col:25> Name="return"
|   | |     `-ParagraphComment 0x1afceded738 <col:19, col:25>
|   | |       `-TextComment 0x1afceded710 <col:19, col:25> Text=" String"
|   | |-CXXMethodDecl 0x1afcec788f8 <line:400:9, col:25> col:18 unique 'List<T> &()'
|   | | `-FullComment 0x1afcededa08 <line:395:11, line:398:23>
|   | |   |-ParagraphComment 0x1afceded800 <line:395:11>
|   | |   | `-TextComment 0x1afceded7d8 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afceded820 <col:12, col:62> Name="brief"
|   | |   | `-ParagraphComment 0x1afceded870 <col:18, col:62>
|   | |   |   `-TextComment 0x1afceded848 <col:18, col:62> Text=" Make each item unique and remove duplicates."
|   | |   |-ParagraphComment 0x1afceded8b8 <line:397:11>
|   | |   | `-TextComment 0x1afceded890 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afceded8d8 <col:12, line:398:11> [in] implicitly Param="_what"
|   | |   | `-ParagraphComment 0x1afceded950 <col:11>
|   | |   |   `-TextComment 0x1afceded928 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afceded970 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afceded9c0 <col:19, col:23>
|   | |       `-TextComment 0x1afceded998 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afcec78cb8 <line:408:9, col:81> col:18 invalid unique 'List<T> &(const int &)'
|   | | |-ParmVarDecl 0x1afcec78b90 <col:25, col:72> col:72 invalid _callback 'const int &'
|   | | `-FullComment 0x1afcededca0 <line:403:11, line:406:23>
|   | |   |-ParagraphComment 0x1afcededa90 <line:403:11>
|   | |   | `-TextComment 0x1afcededa68 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcededab0 <col:12, col:62> Name="brief"
|   | |   | `-ParagraphComment 0x1afcededb00 <col:18, col:62>
|   | |   |   `-TextComment 0x1afcededad8 <col:18, col:62> Text=" Make each item unique and remove duplicates."
|   | |   |-ParagraphComment 0x1afcededb48 <line:405:11>
|   | |   | `-TextComment 0x1afcededb20 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcededb68 <col:12, line:406:11> [in] implicitly Param="_callback" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcededbe8 <col:11>
|   | |   |   `-TextComment 0x1afcededbc0 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcededc08 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcededc58 <col:19, col:23>
|   | |       `-TextComment 0x1afcededc30 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afcec75fa0 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:410:81> col:31 invalid operator= 'List<T> &(const int &)' inline
|   | | |-ParmVarDecl 0x1afcec78e10 <col:43, col:75> col:75 invalid _array 'const int &'
|   | | `-AlwaysInlineAttr 0x1afcec76048 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afcec76388 <col:25, ./src\Core/Container/List.h:411:64> col:31 operator= 'List<T> &(const List<T> &)' inline
|   | | |-ParmVarDecl 0x1afcec76228 <col:43, col:58> col:58 _other 'const List<T> &'
|   | | `-AlwaysInlineAttr 0x1afcec76430 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afcec76778 <./src\Core/Container/List.h:412:9, col:46> col:18 operator= 'List<T> &(List<T> &&)'
|   | | `-ParmVarDecl 0x1afcec76618 <col:30, col:40> col:40 _other 'List<T> &&'
|   | |-CXXMethodDecl 0x1afcec768c0 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:414:55> col:25 operator[] 'T &(const u32 &)' inline
|   | | |-ParmVarDecl 0x1afcec76830 <col:38, col:49> col:49 _index 'const u32 &'
|   | | `-AlwaysInlineAttr 0x1afcec76968 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afcec76a60 <col:25, ./src\Core/Container/List.h:415:56> col:24 operator[] 'T (const u32 &) const' inline
|   | | |-ParmVarDecl 0x1afcec769d0 <col:37, col:48> col:48 _index 'const u32 &'
|   | | `-AlwaysInlineAttr 0x1afcec76b08 <./src\Core/Defines.h:54:25> __forceinline
|   | |-FunctionTemplateDecl 0x1afcec76f20 <./src\Core/Container/List.h:417:9, line:418:51> col:14 operator==
|   | | |-TemplateTypeParmDecl 0x1afcec76b60 <line:417:18, col:27> col:27 referenced typename depth 1 index 0 T2
|   | | `-CXXMethodDecl 0x1afcec76e80 <line:418:9, col:51> col:14 operator== 'bool (const List<T2> &) const'
|   | |   `-ParmVarDecl 0x1afcec76d78 <col:27, col:43> col:43 _other 'const List<T2> &'
|   | |-FunctionTemplateDecl 0x1afcec7a2e0 <line:420:9, line:421:64> col:27 operator!=
|   | | |-TemplateTypeParmDecl 0x1afcec79fe0 <line:420:18, col:27> col:27 referenced typename depth 1 index 0 T2
|   | | `-CXXMethodDecl 0x1afcec7a240 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:421:64> col:27 operator!= 'bool (const List<T2> &) const' inline
|   | |   |-ParmVarDecl 0x1afcec7a178 <col:40, col:56> col:56 _other 'const List<T2> &'
|   | |   `-AlwaysInlineAttr 0x1afcec7a340 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afcec7a648 <col:25, ./src\Core/Container/List.h:423:65> col:31 operator+= 'List<T> &(const List<T> &)' inline
|   | | |-ParmVarDecl 0x1afcec7a528 <col:44, col:59> col:59 _other 'const List<T> &'
|   | | `-AlwaysInlineAttr 0x1afcec7a6f0 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afcec7aa00 <col:25, ./src\Core/Container/List.h:424:65> col:30 operator+ 'List<T> (const List<T> &) const' inline
|   | | |-ParmVarDecl 0x1afcec7a8d8 <col:42, col:57> col:57 _other 'const List<T> &'
|   | | `-AlwaysInlineAttr 0x1afcec7aaa8 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afcec7ace8 <col:25, ./src\Core/Container/List.h:433:58> col:31 operator<< 'List<T> &(const T &)' inline
|   | | |-ParmVarDecl 0x1afcec7abc8 <col:44, col:53> col:53 _item 'const T &'
|   | | |-AlwaysInlineAttr 0x1afcec7ad90 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcededfd0 <./src\Core/Container/List.h:427:11, line:431:23>
|   | |   |-ParagraphComment 0x1afcededd28 <line:427:11>
|   | |   | `-TextComment 0x1afcededd00 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcededd48 <col:12, line:428:11> Name="brief"
|   | |   | `-ParagraphComment 0x1afcededdc0 <line:427:18, line:428:11>
|   | |   |   |-TextComment 0x1afcededd70 <line:427:18, col:33> Text=" Same push back."
|   | |   |   `-TextComment 0x1afcededd90 <line:428:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcededde0 <col:12, col:23> Name="sa"
|   | |   | `-ParagraphComment 0x1afcedede30 <col:15, col:23>
|   | |   |   `-TextComment 0x1afcedede08 <col:15, col:23> Text=" pushBack"
|   | |   |-ParagraphComment 0x1afcedede78 <line:430:11>
|   | |   | `-TextComment 0x1afcedede50 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedede98 <col:12, line:431:11> [in] implicitly Param="_item" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcededf10 <col:11>
|   | |   |   `-TextComment 0x1afcededee8 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcededf30 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcededf80 <col:19, col:23>
|   | |       `-TextComment 0x1afcededf58 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afcec76fb0 <./src\Core/Defines.h:54:25, ./src\Core/Container/List.h:434:53> col:31 operator<< 'List<T> &(T &&)' inline
|   | | |-ParmVarDecl 0x1afcec7ae88 <col:44, col:48> col:48 _item 'T &&'
|   | | `-AlwaysInlineAttr 0x1afcec77058 <./src\Core/Defines.h:54:25> __forceinline
|   | |-AccessSpecDecl 0x1afcec770e0 <./src\Core/Container/List.h:436:5, col:14> col:5 protected
|   | |-CXXMethodDecl 0x1afcec77230 <line:443:9, col:49> col:18 findElement 'Michka::List::Element *(const u32 &) const'
|   | | |-ParmVarDecl 0x1afcec77120 <col:30, col:41> col:41 _index 'const u32 &'
|   | | `-FullComment 0x1afcede4220 <line:438:11, line:441:27>
|   | |   |-ParagraphComment 0x1afcedee058 <line:438:11>
|   | |   | `-TextComment 0x1afcedee030 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedee078 <col:12, col:49> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedee0c8 <col:18, col:49>
|   | |   |   `-TextComment 0x1afcedee0a0 <col:18, col:49> Text=" Find element at specific index."
|   | |   |-ParagraphComment 0x1afcedee110 <line:440:11>
|   | |   | `-TextComment 0x1afcedee0e8 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcede40f0 <col:12, line:441:11> [in] implicitly Param="_index" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcede4168 <col:11>
|   | |   |   `-TextComment 0x1afcede4140 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede4188 <col:12, col:27> Name="return"
|   | |     `-ParagraphComment 0x1afcede41d8 <col:19, col:27>
|   | |       `-TextComment 0x1afcede41b0 <col:19, col:27> Text=" Element*"
|   | |-AccessSpecDecl 0x1afcec77308 <line:445:5, col:11> col:5 public
|   | |-VarDecl 0x1afcec77348 <line:449:9, col:46> col:26 notFound 'const u32':'const unsigned int' static cinit
|   | | |-ImplicitCastExpr 0x1afcec77448 <col:37, col:46> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x1afcec77418 <col:37, col:46> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int' non_odr_use_constant
|   | | `-FullComment 0x1afcede4348 <line:447:11, col:55>
|   | |   |-ParagraphComment 0x1afcede42a8 <col:11>
|   | |   | `-TextComment 0x1afcede4280 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede42c8 <col:12, col:55> Name="brief"
|   | |     `-ParagraphComment 0x1afcede4318 <col:18, col:55>
|   | |       `-TextComment 0x1afcede42f0 <col:18, col:55> Text=" Not found index for search functions."
|   | |-AccessSpecDecl 0x1afcec774a8 <line:451:5, col:14> col:5 protected
|   | |-FieldDecl 0x1afcec774e8 <line:452:9, col:35> col:26 mFirst 'Michka::List::Element *'
|   | | `-CXXNullPtrLiteralExpr 0x1afcec77b18 <col:35> 'nullptr_t'
|   | |-FieldDecl 0x1afcec77550 <line:453:9, col:34> col:26 mLast 'Michka::List::Element *'
|   | | `-CXXNullPtrLiteralExpr 0x1afcec77b28 <col:34> 'nullptr_t'
|   | `-FieldDecl 0x1afcec775b8 <line:454:9, col:34> col:26 mSize 'u32':'unsigned int'
|   |   `-ImplicitCastExpr 0x1afcec77b60 <col:34> 'u32':'unsigned int' <IntegralCast>
|   |     `-IntegerLiteral 0x1afcec77b38 <col:34> 'int' 0
|   `-ClassTemplateSpecializationDecl 0x1afced177e8 <line:36:5, line:455:5> line:37:11 class List
|     `-TemplateArgument type 'Michka::Variant'
|       `-RecordType 0x1afcecea860 'Michka::Variant'
|         `-CXXRecord 0x1afcecf76c8 'Variant'
|-NamespaceDecl 0x1afcec77c38 prev 0x1afcec6a408 <./src\Core/Container/List.inl:33:1, line:906:1> line:33:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| |-CXXConstructorDecl 0x1afcec7b140 parent 0x1afcec6af78 prev 0x1afcec6b650 <line:37:5, line:38:57> col:36 Element 'void (const T &)' inline
| | |-ParmVarDecl 0x1afcec7b070 <col:44, col:53> col:53 _val 'const T &'
| | |-<<<NULL>>>
| | |-AlwaysInlineAttr 0x1afcec7b238 <./src\Core/Defines.h:54:25> __forceinline
| | `-FullComment 0x1afcede43f8 <./src\Core/Container/List.inl:35:7, col:82>
| |   `-ParagraphComment 0x1afcede43d0 <col:7, col:82>
| |     `-TextComment 0x1afcede43a8 <col:7, col:82> Text=" --------------------------------- Element -------------------------------- "
| |-CXXConstructorDecl 0x1afcec7b710 parent 0x1afcec6af78 prev 0x1afcec6b8b0 <line:44:5, line:45:52> col:36 Element 'void (T &&)' inline
| | |-ParmVarDecl 0x1afcec7b640 <col:44, col:48> col:48 _val 'T &&'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec7b808 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXDestructorDecl 0x1afcec7bb20 parent 0x1afcec6af78 prev 0x1afcec6ba00 <./src\Core/Container/List.inl:51:5, line:52:32> col:23 ~Element 'void ()'
| | `-<<<NULL>>>
| |-CXXConstructorDecl 0x1afcec7bf00 parent 0x1afcec6bbe8 prev 0x1afcec6bf00 <line:59:5, line:60:56> col:42 ConstIterator 'void ()' inline
| | |-<<<NULL>>>
| | |-AlwaysInlineAttr 0x1afcec78fd0 <./src\Core/Defines.h:54:25> __forceinline
| | `-FullComment 0x1afcede44a8 <./src\Core/Container/List.inl:57:7, col:82>
| |   `-ParagraphComment 0x1afcede4480 <col:7, col:82>
| |     `-TextComment 0x1afcede4458 <col:7, col:82> Text=" ----------------------------- Const Iterator ----------------------------- "
| |-CXXConstructorDecl 0x1afcec795d0 parent 0x1afcec6bbe8 prev 0x1afcec655d0 <line:65:5, line:66:91> col:42 ConstIterator 'void (typename List<T>::Element *)' inline
| | |-ParmVarDecl 0x1afcec79508 <col:56, col:83> col:83 _element 'typename List<T>::Element *'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec796c8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec79cd0 parent 0x1afcec6bbe8 prev 0x1afcec6c150 <./src\Core/Container/List.inl:71:5, line:72:106> col:74 operator+ 'typename List<T>::ConstIterator (const i32 &) const' inline
| | |-ParmVarDecl 0x1afcec79ae0 <col:86, col:97> col:97 _number 'const i32 &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec79dc0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcebf9570 parent 0x1afcec6bbe8 prev 0x1afcec6c2f0 <./src\Core/Container/List.inl:83:5, line:84:106> col:74 operator- 'typename List<T>::ConstIterator (const i32 &) const' inline
| | |-ParmVarDecl 0x1afcebf9380 <col:86, col:97> col:97 _number 'const i32 &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcebf9660 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcebf99b0 parent 0x1afcec6bbe8 prev 0x1afcec6c690 <./src\Core/Container/List.inl:95:5, line:96:65> col:51 operator* 'const T &() const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcebf9a98 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcebf9de0 parent 0x1afcec6bbe8 prev 0x1afcec6c810 <./src\Core/Container/List.inl:101:5, line:102:67> col:52 operator-> 'const T *() const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcebf9ec8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecafa40 parent 0x1afcec6bbe8 prev 0x1afcec6c510 <./src\Core/Container/List.inl:107:5, line:108:84> col:51 operator[] 'const T &(const i32 &) const' inline
| | |-ParmVarDecl 0x1afcecaf920 <col:64, col:75> col:75 _number 'const i32 &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecafb30 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConversionDecl 0x1afcecafe20 parent 0x1afcec6bbe8 prev 0x1afcec6c950 <./src\Core/Container/List.inl:113:5, line:114:59> col:42 operator bool 'bool () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecaff10 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecb01e0 parent 0x1afcec6bbe8 prev 0x1afcec6ca78 <./src\Core/Container/List.inl:119:5, line:120:61> col:47 operator! 'bool () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecb02c8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecb0828 parent 0x1afcec6bbe8 prev 0x1afcec6cbf0 <./src\Core/Container/List.inl:125:5, line:126:88> col:75 operator++ 'typename List<T>::ConstIterator &()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecb0930 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecb0e98 parent 0x1afcec6bbe8 prev 0x1afcec6cd08 <./src\Core/Container/List.inl:132:5, line:133:88> col:75 operator-- 'typename List<T>::ConstIterator &()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecb0f80 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecb12d0 parent 0x1afcec6bbe8 prev 0x1afcec64eb8 <./src\Core/Container/List.inl:139:5, line:140:89> col:47 operator== 'bool (const Michka::List::ConstIterator &) const' inline
| | |-ParmVarDecl 0x1afcecb1240 <col:60, col:81> col:81 _other 'const Michka::List::ConstIterator &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecb13c0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecb1710 parent 0x1afcec6bbe8 prev 0x1afcec65058 <./src\Core/Container/List.inl:145:5, line:146:89> col:47 operator!= 'bool (const Michka::List::ConstIterator &) const' inline
| | |-ParmVarDecl 0x1afcecb1680 <col:60, col:81> col:81 _other 'const Michka::List::ConstIterator &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecb1800 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec12870 parent 0x1afcec6bbe8 prev 0x1afcec65230 <./src\Core/Container/List.inl:151:5, line:152:76> col:44 operator[] 'T (const u32 &) const' inline
| | |-ParmVarDecl 0x1afcec12780 <col:57, col:68> col:68 _index 'const u32 &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec12960 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afcec12c70 parent 0x1afcec65758 prev 0x1afcec65a48 <./src\Core/Container/List.inl:165:5, line:166:33> col:24 Iterator 'void ()'
| | |-<<<NULL>>>
| | `-FullComment 0x1afcede4558 <line:163:7, col:82>
| |   `-ParagraphComment 0x1afcede4530 <col:7, col:82>
| |     `-TextComment 0x1afcede4508 <col:7, col:82> Text=" -------------------------------- Iterator -------------------------------- "
| |-CXXConstructorDecl 0x1afcec13300 parent 0x1afcec65758 prev 0x1afcec73330 <line:172:5, line:173:81> col:37 Iterator 'void (typename List<T>::Element *)' inline
| | |-ParmVarDecl 0x1afcec13238 <col:46, col:73> col:73 _element 'typename List<T>::Element *'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec133f8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec13770 parent 0x1afcec65758 prev 0x1afcec65b70 <./src\Core/Container/List.inl:179:5, line:180:52> col:40 operator* 'T &()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec13858 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec13ba0 parent 0x1afcec65758 prev 0x1afcec65cf0 <./src\Core/Container/List.inl:185:5, line:186:53> col:40 operator-> 'T *()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec13c88 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec14060 parent 0x1afcec65758 prev 0x1afcec72fd0 <./src\Core/Container/List.inl:191:5, line:192:70> col:40 operator[] 'T &(const u32 &)' inline
| | |-ParmVarDecl 0x1afcec13f40 <col:53, col:64> col:64 _index 'const u32 &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec14150 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afcec14400 parent 0x1afcec6a520 prev 0x1afcec734b8 <./src\Core/Container/List.inl:205:5, line:206:32> col:27 List<T> 'void ()' inline
| | |-<<<NULL>>>
| | |-AlwaysInlineAttr 0x1afcec144f0 <./src\Core/Defines.h:54:25> __forceinline
| | `-FullComment 0x1afcede4608 <./src\Core/Container/List.inl:203:7, col:82>
| |   `-ParagraphComment 0x1afcede45e0 <col:7, col:82>
| |     `-TextComment 0x1afcede45b8 <col:7, col:82> Text=" ---------------------------------- List ---------------------------------- "
| |-CXXConstructorDecl 0x1afcec16908 parent 0x1afcec6a520 <line:211:5, line:212:70> col:27 invalid List<T> 'void (const int &)' inline
| | |-ParmVarDecl 0x1afcec16878 <col:32, col:64> col:64 invalid _array 'const int &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec16a00 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afcec16ed0 parent 0x1afcec6a520 prev 0x1afcec739b0 <./src\Core/Container/List.inl:217:5, line:218:53> col:27 List<T> 'void (const List<T> &)' inline
| | |-ParmVarDecl 0x1afcec16e08 <col:32, col:47> col:47 _other 'const List<T> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec16fc8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afcec17490 parent 0x1afcec6a520 prev 0x1afcec73cf0 <./src\Core/Container/List.inl:223:5, line:224:48> col:27 List<T> 'void (List<T> &&)' inline
| | |-ParmVarDecl 0x1afcec173c8 <col:32, col:42> col:42 _other 'List<T> &&'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec17588 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXDestructorDecl 0x1afcec17810 parent 0x1afcec6a520 prev 0x1afcec73e40 <./src\Core/Container/List.inl:229:5, line:230:33> col:27 ~List<T> 'void ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec17908 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec17e20 parent 0x1afcec6a520 prev 0x1afcec6dfa0 <./src\Core/Container/List.inl:235:5, line:236:60> col:54 begin 'typename List<T>::Iterator ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec17f08 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcec183e0 parent 0x1afcec6a520 prev 0x1afcec6e150 <./src\Core/Container/List.inl:241:5, line:242:67> col:59 begin 'typename List<T>::ConstIterator () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcec184c8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afceccc248 parent 0x1afcec6a520 prev 0x1afcec6e418 <./src\Core/Container/List.inl:247:5, line:248:42> col:36 clear 'List<T> &()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afceccc330 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afceccc810 parent 0x1afcec6a520 prev 0x1afcec6e560 <./src\Core/Container/List.inl:264:5, line:265:58> col:54 end 'typename List<T>::Iterator ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afceccc8f8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecccdd0 parent 0x1afcec6a520 prev 0x1afcec6e6a8 <./src\Core/Container/List.inl:270:5, line:271:65> col:59 end 'typename List<T>::ConstIterator () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afceccceb8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afceccd478 parent 0x1afcec6a520 <./src\Core/Container/List.inl:276:5, line:277:76> col:23 invalid filter 'List<T> &(const int &)'
| | |-ParmVarDecl 0x1afceccd2c8 <col:30, col:67> col:67 invalid _callback 'const int &'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afceccd810 parent 0x1afcec6a520 prev 0x1afcec6eba0 <line:284:5, line:285:36> col:30 first 'T &()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afceccd8f8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afceccdbc0 parent 0x1afcec6a520 prev 0x1afcec6ecf0 <./src\Core/Container/List.inl:290:5, line:291:37> col:29 first 'T () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afceccdca8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afceccdf40 parent 0x1afcec6a520 prev 0x1afcec6ee38 <./src\Core/Container/List.inl:296:5, line:297:41> col:31 getSize 'u32 () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecce028 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecce5b0 parent 0x1afcec6a520 <./src\Core/Container/List.inl:302:5, line:303:95> col:35 invalid getFiltered 'List<T> (const int &) const' inline
| | |-ParmVarDecl 0x1afcecce438 <col:47, col:84> col:84 invalid _callback 'const int &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecce6a0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afceccea90 parent 0x1afcec6a520 prev 0x1afcec72490 <./src\Core/Container/List.inl:323:5, line:324:49> col:35 getReversed 'List<T> () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecceb78 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecceff0 parent 0x1afcec6a520 prev 0x1afcec72780 <./src\Core/Container/List.inl:332:5, line:333:78> col:35 getSorted 'List<T> (const Michka::SortDirection &) const' inline
| | |-ParmVarDecl 0x1afceccee70 <col:45, col:66> col:66 _direction 'const Michka::SortDirection &' cinit
| | | `-ExprWithCleanups 0x1afcec776a8 <./src\Core/Container/List.h:169:74, col:89> 'const Michka::SortDirection' lvalue
| | |   `-MaterializeTemporaryExpr 0x1afcec77690 <col:74, col:89> 'const Michka::SortDirection' lvalue
| | |     `-ImplicitCastExpr 0x1afcec77678 <col:74, col:89> 'const Michka::SortDirection' <NoOp>
| | |       `-DeclRefExpr 0x1afcec77648 <col:74, col:89> 'Michka::SortDirection' EnumConstant 0x1afce0f38e8 'ascending' 'Michka::SortDirection'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afceccf0e0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afceccf6f0 parent 0x1afcec6a520 <./src\Core/Container/List.inl:341:5, line:342:103> col:35 invalid getSorted 'List<T> (const int &) const' inline
| | |-ParmVarDecl 0x1afceccf578 <col:45, col:92> col:92 invalid _callback 'const int &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afceccf7e0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afceccfbd0 parent 0x1afcec6a520 prev 0x1afcec72e00 <./src\Core/Container/List.inl:350:5, line:351:45> col:35 getUnique 'List<T> ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afceccfcb8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecd0500 parent 0x1afcec6a520 <./src\Core/Container/List.inl:359:5, line:360:101> col:35 invalid getUnique 'List<T> (const int &)' inline
| | |-ParmVarDecl 0x1afcecd0388 <col:45, col:92> col:92 invalid _callback 'const int &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecd05f0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecd08f0 parent 0x1afcec6a520 prev 0x1afcec71400 <./src\Core/Container/List.inl:368:5, line:369:55> col:21 implode 'Michka::String (const Michka::String &) const'
| | |-ParmVarDecl 0x1afcecd0860 <col:29, col:43> col:43 _seperator 'const Michka::String &' cinit
| | | `-OpaqueValueExpr 0x1afcec776e0 <./src\Core/Container/List.h:200:49> 'const Michka::String':'const Michka::StringTemplate<wchar_t>'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcecd0d70 parent 0x1afcec6a520 prev 0x1afcec71640 <./src\Core/Container/List.inl:404:5, line:405:59> col:18 indexOf 'u32 (const T &, const u32) const'
| | |-ParmVarDecl 0x1afcecd0c20 <col:26, col:35> col:35 _what 'const T &'
| | |-ParmVarDecl 0x1afcecd0c98 <col:42, col:52> col:52 _from 'const u32':'const unsigned int' cinit
| | | `-ImplicitCastExpr 0x1afcec77720 <./src\Core/Container/List.h:209:55> 'u32':'unsigned int' <IntegralCast>
| | |   `-IntegerLiteral 0x1afcec776f8 <col:55> 'int' 0
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcecd12a8 parent 0x1afcec6a520 <./src\Core/Container/List.inl:420:5, line:421:91> col:18 invalid indexOf 'u32 (const int &, const u32) const'
| | |-ParmVarDecl 0x1afcecd1198 <col:26, col:63> col:63 invalid _callback 'const int &'
| | |-ParmVarDecl 0x1afcecd1210 <col:74, col:84> col:84 _from 'const u32':'const unsigned int'
| | `-<<<NULL>>>
| |-FunctionTemplateDecl 0x1afcecd1ae0 parent 0x1afcec6a520 <line:435:5, line:436:120> col:18 invalid indexOf
| | |-TemplateTypeParmDecl 0x1afcecd1440 <line:435:14, col:23> col:23 referenced typename depth 1 index 0 T2
| | `-CXXMethodDecl 0x1afcecd1a00 parent 0x1afcec6a520 <line:434:5, line:436:120> col:18 invalid indexOf 'u32 (const int &, const T2 &, const u32) const'
| |   |-ParmVarDecl 0x1afcecd1828 <col:26, col:74> col:74 invalid _callback 'const int &'
| |   |-ParmVarDecl 0x1afcecd18a0 <col:86, col:96> col:96 _what 'const T2 &'
| |   |-ParmVarDecl 0x1afcecd1918 <col:103, col:113> col:113 _from 'const u32':'const unsigned int'
| |   `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcecd2088 parent 0x1afcec6a520 prev 0x1afcec701b8 <line:449:5, line:450:63> col:23 insert 'List<T> &(const u32 &, const T &)'
| | |-ParmVarDecl 0x1afcecd1e10 <col:30, col:41> col:41 _index 'const u32 &'
| | |-ParmVarDecl 0x1afcecd1ec0 <col:49, col:58> col:58 _item 'const T &'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcecd82d8 parent 0x1afcec6a520 prev 0x1afcec704f8 <line:485:5, line:486:58> col:23 insert 'List<T> &(const u32 &, T &&)'
| | |-ParmVarDecl 0x1afcecd8060 <col:30, col:41> col:41 _index 'const u32 &'
| | |-ParmVarDecl 0x1afcecd8110 <col:49, col:53> col:53 _item 'T &&'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcecd8998 parent 0x1afcec6a520 prev 0x1afcec70948 <line:521:5, line:522:83> col:36 insert 'List<T> &(const u32 &, const List<T> &)' inline
| | |-ParmVarDecl 0x1afcecd8670 <col:43, col:54> col:54 _index 'const u32 &'
| | |-ParmVarDecl 0x1afcecd87d8 <col:62, col:77> col:77 _items 'const List<T> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecd8a90 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecd8fe8 parent 0x1afcec6a520 <./src\Core/Container/List.inl:532:5, line:533:100> col:36 invalid insert 'List<T> &(const u32 &, const int &)' inline
| | |-ParmVarDecl 0x1afcecd8d90 <col:43, col:54> col:54 _index 'const u32 &'
| | |-ParmVarDecl 0x1afcecd8e20 <col:62, col:94> col:94 invalid _items 'const int &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecd90e0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecd96d8 parent 0x1afcec6a520 prev 0x1afcec74188 <./src\Core/Container/List.inl:538:5, line:539:82> col:23 insert 'List<T> &(const u32 &, const T *, const u32 &)'
| | |-ParmVarDecl 0x1afcecd93e0 <col:30, col:41> col:41 _index 'const u32 &'
| | |-ParmVarDecl 0x1afcecd9490 <col:49, col:58> col:58 _items 'const T *'
| | |-ParmVarDecl 0x1afcecd9508 <col:66, col:77> col:77 _size 'const u32 &'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcecd9a00 parent 0x1afcec6a520 prev 0x1afcec74290 <line:549:5, line:550:42> col:32 isEmpty 'bool () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecd9ae8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecda2f0 parent 0x1afcec6a520 prev 0x1afcec743d8 <./src\Core/Container/List.inl:555:5, line:556:45> col:32 isNotEmpty 'bool () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecda3d8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecda6d0 parent 0x1afcec6a520 prev 0x1afcec74520 <./src\Core/Container/List.inl:561:5, line:562:35> col:30 last 'T &()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecda7b8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecdaa80 parent 0x1afcec6a520 prev 0x1afcec74638 <./src\Core/Container/List.inl:567:5, line:568:36> col:29 last 'T () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecdab68 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecdaf50 parent 0x1afcec6a520 prev 0x1afcec74880 <./src\Core/Container/List.inl:573:5, line:574:63> col:18 lastIndexOf 'u32 (const T &, const u32) const'
| | |-ParmVarDecl 0x1afcecdae00 <col:30, col:39> col:39 _what 'const T &'
| | |-ParmVarDecl 0x1afcecdae78 <col:46, col:56> col:56 _from 'const u32':'const unsigned int' cinit
| | | `-ImplicitCastExpr 0x1afcec77850 <./src\Core/Container/List.h:276:59, col:68> 'unsigned int' <LValueToRValue>
| | |   `-DeclRefExpr 0x1afcec77820 <col:59, col:68> 'const unsigned int' lvalue Var 0x1afce0cf1c0 'max' 'const unsigned int' non_odr_use_constant
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcecdb488 parent 0x1afcec6a520 <./src\Core/Container/List.inl:589:5, line:590:95> col:18 invalid lastIndexOf 'u32 (const int &, const u32) const'
| | |-ParmVarDecl 0x1afcecdb378 <col:30, col:67> col:67 invalid _callback 'const int &'
| | |-ParmVarDecl 0x1afcecdb3f0 <col:78, col:88> col:88 _from 'const u32':'const unsigned int'
| | `-<<<NULL>>>
| |-FunctionTemplateDecl 0x1afcecdbcc0 parent 0x1afcec6a520 <line:604:5, line:605:124> col:18 invalid lastIndexOf
| | |-TemplateTypeParmDecl 0x1afcecdb620 <line:604:14, col:23> col:23 referenced typename depth 1 index 0 T2
| | `-CXXMethodDecl 0x1afcecdbbe0 parent 0x1afcec6a520 <line:603:5, line:605:124> col:18 invalid lastIndexOf 'u32 (const int &, const T2 &, const u32) const'
| |   |-ParmVarDecl 0x1afcecdba08 <col:30, col:78> col:78 invalid _callback 'const int &'
| |   |-ParmVarDecl 0x1afcecdba80 <col:90, col:100> col:100 _what 'const T2 &'
| |   |-ParmVarDecl 0x1afcecdbaf8 <col:107, col:117> col:117 _from 'const u32':'const unsigned int'
| |   `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcecdbfc0 parent 0x1afcec6a520 prev 0x1afcec6d190 <line:618:5, line:619:37> col:29 popBack 'T ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecdc0a8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecdcd70 parent 0x1afcec6a520 prev 0x1afcec6d2d8 <./src\Core/Container/List.inl:624:5, line:625:38> col:29 popFront 'T ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecdce58 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecdd338 parent 0x1afcec6a520 prev 0x1afcec6d5f8 <./src\Core/Container/List.inl:630:5, line:631:59> col:36 pushBack 'List<T> &(const T &)' inline
| | |-ParmVarDecl 0x1afcecdd180 <col:45, col:54> col:54 _item 'const T &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecdd428 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecdd908 parent 0x1afcec6a520 prev 0x1afcec6d8f8 <./src\Core/Container/List.inl:636:5, line:637:54> col:36 pushBack 'List<T> &(T &&)' inline
| | |-ParmVarDecl 0x1afcecdd750 <col:45, col:49> col:49 _item 'T &&'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecdd9f8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecdded8 parent 0x1afcec6a520 prev 0x1afcec6dbe8 <./src\Core/Container/List.inl:642:5, line:643:60> col:36 pushFront 'List<T> &(const T &)' inline
| | |-ParmVarDecl 0x1afcecddd20 <col:46, col:55> col:55 _item 'const T &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecddfc8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecde4a8 parent 0x1afcec6a520 prev 0x1afcec74f90 <./src\Core/Container/List.inl:648:5, line:649:55> col:36 pushFront 'List<T> &(T &&)' inline
| | |-ParmVarDecl 0x1afcecde2f0 <col:46, col:50> col:50 _item 'T &&'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecde598 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecdeac8 parent 0x1afcec6a520 prev 0x1afcec75348 <./src\Core/Container/List.inl:654:5, line:655:66> col:23 remove 'List<T> &(const u32 &, const u32 &)'
| | |-ParmVarDecl 0x1afcecde890 <col:30, col:41> col:41 _index 'const u32 &'
| | |-ParmVarDecl 0x1afcecde908 <col:49, col:60> col:60 _count 'const u32 &' cinit
| | | `-ExprWithCleanups 0x1afcec77a20 <./src\Core/Container/List.h:338:64> 'const u32':'const unsigned int' lvalue
| | |   `-MaterializeTemporaryExpr 0x1afcec77a08 <col:64> 'const u32':'const unsigned int' lvalue
| | |     `-ImplicitCastExpr 0x1afcec779f0 <col:64> 'const u32':'const unsigned int' <IntegralCast>
| | |       `-IntegerLiteral 0x1afcec779c8 <col:64> 'int' 1
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcecdfe28 parent 0x1afcec6a520 prev 0x1afcec75568 <./src\Core/Container/List.inl:691:5, line:692:31> col:23 reverse 'List<T> &()'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcece0368 parent 0x1afcec6a520 prev 0x1afcec75838 <line:705:5, line:706:59> col:23 sort 'List<T> &(const Michka::SortDirection &)'
| | |-ParmVarDecl 0x1afcece01b0 <col:28, col:49> col:49 _direction 'const Michka::SortDirection &' cinit
| | | `-ExprWithCleanups 0x1afcec77ad0 <./src\Core/Container/List.h:353:57, col:72> 'const Michka::SortDirection' lvalue
| | |   `-MaterializeTemporaryExpr 0x1afcec77ab8 <col:57, col:72> 'const Michka::SortDirection' lvalue
| | |     `-ImplicitCastExpr 0x1afcec77aa0 <col:57, col:72> 'const Michka::SortDirection' <NoOp>
| | |       `-DeclRefExpr 0x1afcec77a70 <col:57, col:72> 'Michka::SortDirection' EnumConstant 0x1afce0f38e8 'ascending' 'Michka::SortDirection'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcece0a48 parent 0x1afcec6a520 <./src\Core/Container/List.inl:713:5, line:714:84> col:23 invalid sort 'List<T> &(const int &)'
| | |-ParmVarDecl 0x1afcece0898 <col:28, col:75> col:75 invalid _callback 'const int &'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcece1018 parent 0x1afcec6a520 prev 0x1afcec77fc0 <line:721:5, line:722:79> col:36 swap 'List<T> &(const u32 &, const u32 &)' inline
| | |-ParmVarDecl 0x1afcece0de0 <col:41, col:52> col:52 _index1 'const u32 &'
| | |-ParmVarDecl 0x1afcece0e58 <col:61, col:72> col:72 _index2 'const u32 &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcece1110 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcece16a8 parent 0x1afcec6a520 prev 0x1afcec783e8 <./src\Core/Container/List.inl:734:5, line:735:56> col:36 swap 'List<T> &(List<T> &)' inline
| | |-ParmVarDecl 0x1afcece14f8 <col:41, col:50> col:50 _other 'List<T> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcece1798 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcece1af0 parent 0x1afcec6a520 prev 0x1afcec785f0 <./src\Core/Container/List.inl:744:5, line:745:38> col:16 take 'T (const u32 &)'
| | |-ParmVarDecl 0x1afcece1a00 <col:21, col:32> col:32 _index 'const u32 &'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcece3660 parent 0x1afcec6a520 prev 0x1afcec786e8 <line:754:5, line:755:32> col:21 toString 'Michka::String () const'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcece3b18 parent 0x1afcec6a520 prev 0x1afcec788f8 <line:769:5, line:770:30> col:23 unique 'List<T> &()'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcece41e8 parent 0x1afcec6a520 <line:784:5, line:785:86> col:23 invalid unique 'List<T> &(const int &)'
| | |-ParmVarDecl 0x1afcece4038 <col:30, col:77> col:77 invalid _callback 'const int &'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcece4868 parent 0x1afcec6a520 prev 0x1afcec77230 <line:799:5, line:800:72> col:41 findElement 'typename List<T>::Element *(const u32 &) const'
| | |-ParmVarDecl 0x1afcece4640 <col:53, col:64> col:64 _index 'const u32 &'
| | `-<<<NULL>>>
| |-FunctionTemplateDecl 0x1afcece4ea0 parent 0x1afcec6a520 prev 0x1afcec76f20 <line:812:5, line:813:56> col:19 operator==
| | |-TemplateTypeParmDecl 0x1afcece4a00 <line:812:14, col:23> col:23 referenced typename depth 1 index 0 T2
| | `-CXXMethodDecl 0x1afcece4dc0 parent 0x1afcec6a520 prev 0x1afcec76e80 <line:811:5, line:813:56> col:19 operator== 'bool (const List<T2> &) const'
| |   |-ParmVarDecl 0x1afcece4cf8 <col:32, col:48> col:48 _other 'const List<T2> &'
| |   `-<<<NULL>>>
| |-FunctionTemplateDecl 0x1afcece6d10 parent 0x1afcec6a520 prev 0x1afcec7a2e0 <line:831:5, line:832:69> col:32 operator!=
| | |-TemplateTypeParmDecl 0x1afcece5030 <line:831:14, col:23> col:23 referenced typename depth 1 index 0 T2
| | `-CXXMethodDecl 0x1afcece6c30 parent 0x1afcec6a520 prev 0x1afcec7a240 <line:830:5, line:832:69> col:32 operator!= 'bool (const List<T2> &) const' inline
| |   |-ParmVarDecl 0x1afcece5328 <col:45, col:61> col:61 _other 'const List<T2> &'
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afcece6d88 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcece7398 parent 0x1afcec6a520 prev 0x1afcec7a648 <./src\Core/Container/List.inl:837:5, line:838:70> col:36 operator+= 'List<T> &(const List<T> &)' inline
| | |-ParmVarDecl 0x1afcece71e8 <col:49, col:64> col:64 _other 'const List<T> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcece7488 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcece79e0 parent 0x1afcec6a520 prev 0x1afcec7aa00 <./src\Core/Container/List.inl:846:5, line:847:70> col:35 operator+ 'List<T> (const List<T> &) const' inline
| | |-ParmVarDecl 0x1afcece7868 <col:47, col:62> col:62 _other 'const List<T> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcece7ad0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcece7f98 parent 0x1afcec6a520 <./src\Core/Container/List.inl:855:5, line:856:86> col:36 invalid operator= 'List<T> &(const int &)' inline
| | |-ParmVarDecl 0x1afcece7de8 <col:48, col:80> col:80 invalid _array 'const int &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcece8088 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcece8618 parent 0x1afcec6a520 prev 0x1afcec76388 <./src\Core/Container/List.inl:864:5, line:865:69> col:36 operator= 'List<T> &(const List<T> &)' inline
| | |-ParmVarDecl 0x1afcece8468 <col:48, col:63> col:63 _other 'const List<T> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcece8708 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcece91c8 parent 0x1afcec6a520 prev 0x1afcec76778 <./src\Core/Container/List.inl:873:5, line:874:51> col:23 operator= 'List<T> &(List<T> &&)'
| | |-ParmVarDecl 0x1afcece8ae8 <col:35, col:45> col:45 _other 'List<T> &&'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afcece9748 parent 0x1afcec6a520 prev 0x1afcec7ace8 <line:883:5, line:884:63> col:36 operator<< 'List<T> &(const T &)' inline
| | |-ParmVarDecl 0x1afcece9590 <col:49, col:58> col:58 _item 'const T &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcece9838 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcece9d18 parent 0x1afcec6a520 prev 0x1afcec76fb0 <./src\Core/Container/List.inl:889:5, line:890:58> col:36 operator<< 'List<T> &(T &&)' inline
| | |-ParmVarDecl 0x1afcece9b60 <col:49, col:53> col:53 _item 'T &&'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcece9e08 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afcecea160 parent 0x1afcec6a520 prev 0x1afcec76a60 <./src\Core/Container/List.inl:895:5, line:896:61> col:29 operator[] 'T (const u32 &) const' inline
| | |-ParmVarDecl 0x1afcecea070 <col:42, col:53> col:53 _index 'const u32 &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afcecea250 <./src\Core/Defines.h:54:25> __forceinline
| `-CXXMethodDecl 0x1afcecea5e0 parent 0x1afcec6a520 prev 0x1afcec768c0 <./src\Core/Container/List.inl:901:5, line:902:60> col:30 operator[] 'T &(const u32 &)' inline
|   |-ParmVarDecl 0x1afcecea4c0 <col:43, col:54> col:54 _index 'const u32 &'
|   |-<<<NULL>>>
|   `-AlwaysInlineAttr 0x1afcecea6d0 <./src\Core/Defines.h:54:25> __forceinline
|-NamespaceDecl 0x1afcecea758 prev 0x1afcec77c38 <./src\Core/Container/Variant.h:36:1, line:309:1> line:36:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| |-CXXRecordDecl 0x1afcecea7c8 <line:38:5, col:11> col:11 class Variant
| |-NamespaceDecl 0x1afcecea888 prev 0x1afce0fd288 <line:40:5, line:136:5> line:40:15 Private
| | |-original Namespace 0x1afce0fd288 'Private'
| | |-CXXRecordDecl 0x1afcecea8f8 <line:42:9, line:73:9> line:42:26 referenced invalid class CustomVariantBase definition
| | | |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | | | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| | | | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | | | |-MoveConstructor
| | | | |-CopyAssignment simple non_trivial has_const_param implicit_has_const_param
| | | | |-MoveAssignment
| | | | `-Destructor non_trivial user_declared
| | | |-DLLExportAttr 0x1afceceaa20 <./src\Core/Defines.h:65:34>
| | | |-CXXRecordDecl 0x1afceceaa78 <./src\Core/Container/Variant.h:42:9, col:26> col:26 implicit referenced class CustomVariantBase
| | | |-AccessSpecDecl 0x1afceceab08 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| | | |-TypedefDecl 0x1afceceab60 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | | | |-BuiltinType 0x1afcc6e38c0 'bool'
| | | | `-AnnotateAttr 0x1afceceabb8 <line:271:39, col:60> ""
| | | |-CXXMethodDecl 0x1afceceac78 <line:273:5, line:276:5> line:273:31 used classFileName 'const char *()' static inline
| | | | |-CompoundStmt 0x1afcecf45f0 <line:274:5, line:276:5>
| | | | | `-ReturnStmt 0x1afcecf45e0 <line:275:9, <scratch space>:23:1>
| | | | |   `-ImplicitCastExpr 0x1afcecf45c8 <col:1> 'const char *' <ArrayToPointerDecay>
| | | | |     `-StringLiteral 0x1afcecf4590 <col:1> 'const char [31]' lvalue "./src\\Core/Container/Variant.h"
| | | | `-DLLExportAttr 0x1afcecf4200 <./src\Core/Defines.h:65:34> Inherited
| | | |-CXXMethodDecl 0x1afcecead40 <<scratch space>:26:1, ./src\Core/Helpers.h:277:62> <scratch space>:26:1 used invalid __MICHKA_STRUCT_GENERATED_BODY_44 'int ()'
| | | | `-DLLExportAttr 0x1afcecf4258 <./src\Core/Defines.h:65:34> Inherited
| | | |-AccessSpecDecl 0x1afceceade0 <./src\Core/Container/Variant.h:45:9, col:15> col:9 public
| | | |-CXXConstructorDecl 0x1afceceae48 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:46:44> col:26 used CustomVariantBase 'void ()' inline
| | | | |-DLLExportAttr 0x1afcecf42b0 <./src\Core/Defines.h:65:34> Inherited
| | | | `-AlwaysInlineAttr 0x1afceceaef0 <line:54:25> __forceinline
| | | |-CXXDestructorDecl 0x1afceceaf90 <./src\Core/Container/Variant.h:47:13, col:40> col:21 used ~CustomVariantBase 'void () noexcept' virtual
| | | | `-DLLExportAttr 0x1afcecf42d8 <./src\Core/Defines.h:65:34> Inherited
| | | |-CXXMethodDecl 0x1afcecf3910 <./src\Core/Container/Variant.h:52:13, col:50> col:40 used clone 'Michka::Private::CustomVariantBase *()' virtual pure
| | | | |-DLLExportAttr 0x1afcecf4330 <./src\Core/Defines.h:65:34> Inherited
| | | | `-FullComment 0x1afcede4820 <./src\Core/Container/Variant.h:50:15, col:41>
| | | |   |-ParagraphComment 0x1afcede4780 <col:15>
| | | |   | `-TextComment 0x1afcede4758 <col:15> Text=" "
| | | |   `-BlockCommandComment 0x1afcede47a0 <col:16, col:41> Name="brief"
| | | |     `-ParagraphComment 0x1afcede47f0 <col:22, col:41>
| | | |       `-TextComment 0x1afcede47c8 <col:22, col:41> Text=" Get a copy of this."
| | | |-CXXMethodDecl 0x1afcecf3ac0 <line:59:13, col:57> col:26 used equal 'bool (Michka::Private::CustomVariantBase *)' virtual
| | | | |-ParmVarDecl 0x1afcecf39f0 <col:32, col:51> col:51 _other 'Michka::Private::CustomVariantBase *'
| | | | |-DLLExportAttr 0x1afcecf4388 <./src\Core/Defines.h:65:34> Inherited
| | | | `-FullComment 0x1afcede4a38 <./src\Core/Container/Variant.h:55:15, line:58:13>
| | | |   |-ParagraphComment 0x1afcede48a8 <line:55:15>
| | | |   | `-TextComment 0x1afcede4880 <col:15> Text=" "
| | | |   |-BlockCommandComment 0x1afcede48c8 <col:16, col:56> Name="brief"
| | | |   | `-ParagraphComment 0x1afcede4918 <col:22, col:56>
| | | |   |   `-TextComment 0x1afcede48f0 <col:22, col:56> Text=" Compare to another custom variant."
| | | |   |-ParagraphComment 0x1afcede4960 <line:57:15>
| | | |   | `-TextComment 0x1afcede4938 <col:15> Text=" "
| | | |   `-ParamCommandComment 0x1afcede4980 <col:16, line:58:13> [in] implicitly Param="_other" ParamIndex=0
| | | |     `-ParagraphComment 0x1afcede49f8 <col:1, col:13>
| | | |       `-TextComment 0x1afcede49d0 <col:1, col:13> Text="             "
| | | |-CXXMethodDecl 0x1afcecf3bf0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:64:43> col:33 used getType 'Michka::String () const' inline
| | | | |-DLLExportAttr 0x1afcecf43e0 <./src\Core/Defines.h:65:34> Inherited
| | | | |-AlwaysInlineAttr 0x1afcecf3c90 <line:54:25> __forceinline
| | | | `-FullComment 0x1afcede4b60 <./src\Core/Container/Variant.h:62:15, col:36>
| | | |   |-ParagraphComment 0x1afcede4ac0 <col:15>
| | | |   | `-TextComment 0x1afcede4a98 <col:15> Text=" "
| | | |   `-BlockCommandComment 0x1afcede4ae0 <col:16, col:36> Name="brief"
| | | |     `-ParagraphComment 0x1afcede4b30 <col:22, col:36>
| | | |       `-TextComment 0x1afcede4b08 <col:22, col:36> Text=" Get type name."
| | | |-CXXMethodDecl 0x1afcecf3d38 <line:69:13, col:39> col:28 used toString 'Michka::String () const' virtual
| | | | |-DLLExportAttr 0x1afcecf4408 <./src\Core/Defines.h:65:34> Inherited
| | | | `-FullComment 0x1afcede4c88 <./src\Core/Container/Variant.h:67:15, col:42>
| | | |   |-ParagraphComment 0x1afcede4be8 <col:15>
| | | |   | `-TextComment 0x1afcede4bc0 <col:15> Text=" "
| | | |   `-BlockCommandComment 0x1afcede4c08 <col:16, col:42> Name="brief"
| | | |     `-ParagraphComment 0x1afcede4c58 <col:22, col:42>
| | | |       `-TextComment 0x1afcede4c30 <col:22, col:42> Text=" Get value as string."
| | | |-AccessSpecDecl 0x1afcecf3dd8 <line:71:9, col:18> col:9 protected
| | | |-FieldDecl 0x1afcecf3e18 <line:72:13, col:20> col:20 invalid mType 'Michka::String':'Michka::StringTemplate<wchar_t>'
| | | |-CXXMethodDecl 0x1afcecf3ed0 <line:42:26> col:26 implicit used invalid operator= 'Michka::Private::CustomVariantBase &(const Michka::Private::CustomVariantBase &) noexcept' inline default
| | | | |-ParmVarDecl 0x1afcecf3ff0 <col:26> col:26 'const Michka::Private::CustomVariantBase &'
| | | | `-DLLExportAttr 0x1afcecf4460 <./src\Core/Defines.h:65:34> Inherited
| | | `-CXXConstructorDecl 0x1afcecf4060 <./src\Core/Container/Variant.h:42:26> col:26 implicit used constexpr CustomVariantBase 'void (const Michka::Private::CustomVariantBase &) noexcept' inline default
| | |   |-ParmVarDecl 0x1afcecf4190 <col:26> col:26 'const Michka::Private::CustomVariantBase &'
| | |   |-CompoundStmt 0x1afcecf5800 <col:26>
| | |   `-DLLExportAttr 0x1afcecf44b8 <./src\Core/Defines.h:65:34> Inherited
| | |-ClassTemplateDecl 0x1afcecf59b0 <./src\Core/Container/Variant.h:75:9, line:104:9> line:76:15 CustomVariant
| | | |-TemplateTypeParmDecl 0x1afcecf5810 <line:75:18, col:27> col:27 referenced typename depth 0 index 0 T
| | | `-CXXRecordDecl 0x1afcecf5920 <line:76:9, line:104:9> line:76:15 invalid class CustomVariant definition
| | |   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |   | |-DefaultConstructor
| | |   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | |   | |-MoveConstructor needs_overload_resolution
| | |   | |-CopyAssignment simple non_trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment needs_overload_resolution
| | |   | `-Destructor non_trivial user_declared needs_overload_resolution
| | |   |-public 'Michka::Private::CustomVariantBase'
| | |   |-CXXRecordDecl 0x1afcecf5c58 <col:9, col:15> col:15 implicit referenced class CustomVariant
| | |   |-AccessSpecDecl 0x1afcecf5ce8 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| | |   |-TypedefDecl 0x1afcecf5d40 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |   | |-BuiltinType 0x1afcc6e38c0 'bool'
| | |   | `-AnnotateAttr 0x1afcecf5d98 <line:271:39, col:60> ""
| | |   |-CXXMethodDecl 0x1afcecf5e58 <line:273:5, col:45> col:31 classFileName 'const char *()' static inline
| | |   | `-<<<NULL>>>
| | |   |-CXXMethodDecl 0x1afcecf5f20 <<scratch space>:31:1, ./src\Core/Helpers.h:277:62> <scratch space>:31:1 invalid __MICHKA_STRUCT_GENERATED_BODY_78 'int ()'
| | |   |-FriendDecl 0x1afcecf6018 <./src\Core/Container/Variant.h:80:13, col:26> col:20 'class Variant':'Michka::Variant'
| | |   |-AccessSpecDecl 0x1afcecf6058 <line:81:9, col:15> col:9 public
| | |   |-CXXConstructorDecl 0x1afcecf61b0 <line:82:13, col:42> col:13 CustomVariant<T> 'void (const T &)'
| | |   | `-ParmVarDecl 0x1afcecf60d0 <col:27, col:36> col:36 _value 'const T &'
| | |   |-CXXDestructorDecl 0x1afcecf62a8 <line:83:13, col:36> col:21 ~CustomVariant<T> 'void ()' virtual
| | |   | `-Overrides: [ 0x1afceceaf90 CustomVariantBase::~CustomVariantBase 'void () noexcept' ]
| | |   |-CXXMethodDecl 0x1afcecf63a8 <line:88:13, col:46> col:40 clone 'Michka::Private::CustomVariantBase *()' virtual
| | |   | |-Overrides: [ 0x1afcecf3910 CustomVariantBase::clone 'Michka::Private::CustomVariantBase *()' ]
| | |   | `-FullComment 0x1afcede4db0 <line:86:15, col:41>
| | |   |   |-ParagraphComment 0x1afcede4d10 <col:15>
| | |   |   | `-TextComment 0x1afcede4ce8 <col:15> Text=" "
| | |   |   `-BlockCommandComment 0x1afcede4d30 <col:16, col:41> Name="brief"
| | |   |     `-ParagraphComment 0x1afcede4d80 <col:22, col:41>
| | |   |       `-TextComment 0x1afcede4d58 <col:22, col:41> Text=" Get a copy of this."
| | |   |-CXXMethodDecl 0x1afcecf6518 <line:95:13, col:57> col:26 equal 'bool (Michka::Private::CustomVariantBase *)' virtual
| | |   | |-Overrides: [ 0x1afcecf3ac0 CustomVariantBase::equal 'bool (Michka::Private::CustomVariantBase *)' ]
| | |   | |-ParmVarDecl 0x1afcecf6488 <col:32, col:51> col:51 _other 'Michka::Private::CustomVariantBase *'
| | |   | `-FullComment 0x1afcede4fc8 <line:91:15, line:94:13>
| | |   |   |-ParagraphComment 0x1afcede4e38 <line:91:15>
| | |   |   | `-TextComment 0x1afcede4e10 <col:15> Text=" "
| | |   |   |-BlockCommandComment 0x1afcede4e58 <col:16, col:56> Name="brief"
| | |   |   | `-ParagraphComment 0x1afcede4ea8 <col:22, col:56>
| | |   |   |   `-TextComment 0x1afcede4e80 <col:22, col:56> Text=" Compare to another custom variant."
| | |   |   |-ParagraphComment 0x1afcede4ef0 <line:93:15>
| | |   |   | `-TextComment 0x1afcede4ec8 <col:15> Text=" "
| | |   |   `-ParamCommandComment 0x1afcede4f10 <col:16, line:94:13> [in] implicitly Param="_other" ParamIndex=0
| | |   |     `-ParagraphComment 0x1afcede4f88 <col:1, col:13>
| | |   |       `-TextComment 0x1afcede4f60 <col:1, col:13> Text="             "
| | |   |-CXXMethodDecl 0x1afcecf6640 <line:100:13, col:39> col:28 toString 'Michka::String () const' virtual
| | |   | |-Overrides: [ 0x1afcecf3d38 CustomVariantBase::toString 'Michka::String () const' ]
| | |   | `-FullComment 0x1afcede50f0 <line:98:15, col:42>
| | |   |   |-ParagraphComment 0x1afcede5050 <col:15>
| | |   |   | `-TextComment 0x1afcede5028 <col:15> Text=" "
| | |   |   `-BlockCommandComment 0x1afcede5070 <col:16, col:42> Name="brief"
| | |   |     `-ParagraphComment 0x1afcede50c0 <col:22, col:42>
| | |   |       `-TextComment 0x1afcede5098 <col:22, col:42> Text=" Get value as string."
| | |   |-AccessSpecDecl 0x1afcecf66e0 <line:102:9, col:18> col:9 protected
| | |   `-FieldDecl 0x1afcecf6750 <line:103:13, col:24> col:16 mData 'T *'
| | |     `-CXXNullPtrLiteralExpr 0x1afcecf67a8 <col:24> 'nullptr_t'
| | `-ClassTemplateDecl 0x1afcecf68f0 <line:106:9, line:135:9> line:107:15 CustomVariantReference
| |   |-TemplateTypeParmDecl 0x1afcecf67b8 <line:106:18, col:27> col:27 referenced typename depth 0 index 0 T
| |   `-CXXRecordDecl 0x1afcecf6860 <line:107:9, line:135:9> line:107:15 invalid class CustomVariantReference definition
| |     |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |     | |-DefaultConstructor
| |     | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| |     | |-MoveConstructor needs_overload_resolution
| |     | |-CopyAssignment simple non_trivial has_const_param needs_implicit implicit_has_const_param
| |     | |-MoveAssignment needs_overload_resolution
| |     | `-Destructor non_trivial user_declared needs_overload_resolution
| |     |-public 'Michka::Private::CustomVariantBase'
| |     |-CXXRecordDecl 0x1afcecf6b98 <col:9, col:15> col:15 implicit referenced class CustomVariantReference
| |     |-AccessSpecDecl 0x1afcecf6c28 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |     |-TypedefDecl 0x1afcecf6c80 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| |     | |-BuiltinType 0x1afcc6e38c0 'bool'
| |     | `-AnnotateAttr 0x1afcecf6cd8 <line:271:39, col:60> ""
| |     |-CXXMethodDecl 0x1afcecf6d98 <line:273:5, col:45> col:31 classFileName 'const char *()' static inline
| |     | `-<<<NULL>>>
| |     |-CXXMethodDecl 0x1afcecf6e60 <<scratch space>:36:1, ./src\Core/Helpers.h:277:62> <scratch space>:36:1 invalid __MICHKA_STRUCT_GENERATED_BODY_109 'int ()'
| |     |-FriendDecl 0x1afcecf6f20 <./src\Core/Container/Variant.h:111:13, col:26> col:20 'class Variant':'Michka::Variant'
| |     |-AccessSpecDecl 0x1afcecf6f60 <line:112:9, col:15> col:9 public
| |     |-CXXConstructorDecl 0x1afcecf70f0 <line:113:13, col:45> col:13 CustomVariantReference<T> 'void (T *)'
| |     | `-ParmVarDecl 0x1afcecf6fd0 <col:36, col:39> col:39 _value 'T *'
| |     |-CXXDestructorDecl 0x1afcecf71e8 <line:114:13, col:45> col:21 ~CustomVariantReference<T> 'void ()' virtual
| |     | `-Overrides: [ 0x1afceceaf90 CustomVariantBase::~CustomVariantBase 'void () noexcept' ]
| |     |-CXXMethodDecl 0x1afcecf72e8 <line:119:13, col:46> col:40 clone 'Michka::Private::CustomVariantBase *()' virtual
| |     | |-Overrides: [ 0x1afcecf3910 CustomVariantBase::clone 'Michka::Private::CustomVariantBase *()' ]
| |     | `-FullComment 0x1afcede5218 <line:117:15, col:41>
| |     |   |-ParagraphComment 0x1afcede5178 <col:15>
| |     |   | `-TextComment 0x1afcede5150 <col:15> Text=" "
| |     |   `-BlockCommandComment 0x1afcede5198 <col:16, col:41> Name="brief"
| |     |     `-ParagraphComment 0x1afcede51e8 <col:22, col:41>
| |     |       `-TextComment 0x1afcede51c0 <col:22, col:41> Text=" Get a copy of this."
| |     |-CXXMethodDecl 0x1afcecf7458 <line:126:13, col:57> col:26 equal 'bool (Michka::Private::CustomVariantBase *)' virtual
| |     | |-Overrides: [ 0x1afcecf3ac0 CustomVariantBase::equal 'bool (Michka::Private::CustomVariantBase *)' ]
| |     | |-ParmVarDecl 0x1afcecf73c8 <col:32, col:51> col:51 _other 'Michka::Private::CustomVariantBase *'
| |     | `-FullComment 0x1afcede5430 <line:122:15, line:125:13>
| |     |   |-ParagraphComment 0x1afcede52a0 <line:122:15>
| |     |   | `-TextComment 0x1afcede5278 <col:15> Text=" "
| |     |   |-BlockCommandComment 0x1afcede52c0 <col:16, col:56> Name="brief"
| |     |   | `-ParagraphComment 0x1afcede5310 <col:22, col:56>
| |     |   |   `-TextComment 0x1afcede52e8 <col:22, col:56> Text=" Compare to another custom variant."
| |     |   |-ParagraphComment 0x1afcede5358 <line:124:15>
| |     |   | `-TextComment 0x1afcede5330 <col:15> Text=" "
| |     |   `-ParamCommandComment 0x1afcede5378 <col:16, line:125:13> [in] implicitly Param="_other" ParamIndex=0
| |     |     `-ParagraphComment 0x1afcede53f0 <col:1, col:13>
| |     |       `-TextComment 0x1afcede53c8 <col:1, col:13> Text="             "
| |     |-CXXMethodDecl 0x1afcecf7580 <line:131:13, col:39> col:28 toString 'Michka::String () const' virtual
| |     | |-Overrides: [ 0x1afcecf3d38 CustomVariantBase::toString 'Michka::String () const' ]
| |     | `-FullComment 0x1afcede5558 <line:129:15, col:42>
| |     |   |-ParagraphComment 0x1afcede54b8 <col:15>
| |     |   | `-TextComment 0x1afcede5490 <col:15> Text=" "
| |     |   `-BlockCommandComment 0x1afcede54d8 <col:16, col:42> Name="brief"
| |     |     `-ParagraphComment 0x1afcede5528 <col:22, col:42>
| |     |       `-TextComment 0x1afcede5500 <col:22, col:42> Text=" Get value as string."
| |     |-AccessSpecDecl 0x1afcecf7620 <line:133:9, col:18> col:9 protected
| |     `-FieldDecl 0x1afcecf7660 <line:134:13, col:24> col:16 mData 'T *'
| |       `-CXXNullPtrLiteralExpr 0x1afcecf76b8 <col:24> 'nullptr_t'
| `-CXXRecordDecl 0x1afcecf76c8 prev 0x1afcecea7c8 <line:138:5, line:308:5> line:138:11 referenced class Variant definition
|   |-DefinitionData standard_layout has_user_declared_ctor has_variant_members can_const_default_init
|   | |-DefaultConstructor exists non_trivial user_provided
|   | |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
|   | |-MoveConstructor
|   | |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
|   | |-MoveAssignment
|   | `-Destructor non_trivial user_declared
|   |-CXXRecordDecl 0x1afcecf77c0 <col:5, col:11> col:11 implicit referenced class Variant
|   |-AccessSpecDecl 0x1afcecf7850 <./src\Core/Helpers.h:304:5, col:11> col:5 public
|   |-TypedefDecl 0x1afcecf78a8 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
|   | |-BuiltinType 0x1afcc6e38c0 'bool'
|   | `-AnnotateAttr 0x1afced08950 <line:271:39, col:60> ""
|   |-CXXMethodDecl 0x1afced08a18 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
|   | `-CompoundStmt 0x1afced1a110 <line:274:5, line:276:5>
|   |   `-ReturnStmt 0x1afced1a100 <line:275:9, <scratch space>:38:1>
|   |     `-ImplicitCastExpr 0x1afced1a0e8 <col:1> 'const char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x1afced1a0b0 <col:1> 'const char [31]' lvalue "./src\\Core/Container/Variant.h"
|   |-CXXMethodDecl 0x1afced08ae0 <line:41:1, ./src\Core/Helpers.h:277:62> <scratch space>:41:1 invalid __MICHKA_STRUCT_GENERATED_BODY_140 'int ()'
|   |-AccessSpecDecl 0x1afced08b80 <./src\Core/Container/Variant.h:141:5, col:11> col:5 public
|   |-EnumDecl 0x1afced08bb0 <line:142:9, line:152:9> line:142:20 referenced class Type 'int'
|   | |-EnumConstantDecl 0x1afced08c78 <line:144:13> col:13 referenced typeNull 'Michka::Variant::Type'
|   | |-EnumConstantDecl 0x1afced08cd0 <line:145:13> col:13 referenced typeBool 'Michka::Variant::Type'
|   | |-EnumConstantDecl 0x1afced08d28 <line:146:13> col:13 referenced typeInt 'Michka::Variant::Type'
|   | |-EnumConstantDecl 0x1afced08d80 <line:147:13> col:13 referenced typeFloat 'Michka::Variant::Type'
|   | |-EnumConstantDecl 0x1afced08dd8 <line:148:13> col:13 referenced typeString 'Michka::Variant::Type'
|   | |-EnumConstantDecl 0x1afced08e30 <line:149:13> col:13 referenced typeArray 'Michka::Variant::Type'
|   | |-EnumConstantDecl 0x1afced08e88 <line:150:13> col:13 referenced typeReference 'Michka::Variant::Type'
|   | `-EnumConstantDecl 0x1afced08ee0 <line:151:13> col:13 referenced typeCustom 'Michka::Variant::Type'
|   |-AccessSpecDecl 0x1afced08f38 <line:153:5, col:11> col:5 public
|   |-CXXConstructorDecl 0x1afced08fa0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:154:30> col:22 Variant 'void ()' inline
|   | `-AlwaysInlineAttr 0x1afced09048 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced09148 <col:25, ./src\Core/Container/Variant.h:155:58> col:22 invalid Variant 'void (const int &)' inline
|   | |-ParmVarDecl 0x1afced090b8 <col:30, col:52> col:52 invalid _value 'const int &'
|   | `-AlwaysInlineAttr 0x1afced091f8 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced09360 <col:25, ./src\Core/Container/Variant.h:156:49> col:22 Variant 'void (const float &)' inline
|   | |-ParmVarDecl 0x1afced09298 <col:30, col:43> col:43 _value 'const float &'
|   | `-AlwaysInlineAttr 0x1afced09410 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced09580 <col:25, ./src\Core/Container/Variant.h:157:50> col:22 Variant 'void (const double &)' inline
|   | |-ParmVarDecl 0x1afced094b8 <col:30, col:44> col:44 _value 'const double &'
|   | `-AlwaysInlineAttr 0x1afced09630 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced097a0 <col:25, ./src\Core/Container/Variant.h:158:48> col:22 Variant 'void (const bool &)' inline
|   | |-ParmVarDecl 0x1afced096d8 <col:30, col:42> col:42 _value 'const bool &'
|   | `-AlwaysInlineAttr 0x1afced09850 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced09950 <col:25, ./src\Core/Container/Variant.h:159:47> col:22 Variant 'void (const int &)' inline
|   | |-ParmVarDecl 0x1afced098c0 <col:30, col:41> col:41 _value 'const int &'
|   | `-AlwaysInlineAttr 0x1afced09a00 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced09b40 <col:25, ./src\Core/Container/Variant.h:160:56> col:22 Variant 'void (const unsigned int &)' inline
|   | |-ParmVarDecl 0x1afced09a70 <col:30, col:50> col:50 _value 'const unsigned int &'
|   | `-AlwaysInlineAttr 0x1afced09bf0 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced09d60 <col:25, ./src\Core/Container/Variant.h:161:53> col:22 Variant 'void (const short &)' inline
|   | |-ParmVarDecl 0x1afced09c98 <col:30, col:47> col:47 _value 'const short &'
|   | `-AlwaysInlineAttr 0x1afced09e10 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced09f80 <col:25, ./src\Core/Container/Variant.h:162:62> col:22 Variant 'void (const unsigned short &)' inline
|   | |-ParmVarDecl 0x1afced09eb8 <col:30, col:56> col:56 _value 'const unsigned short &'
|   | `-AlwaysInlineAttr 0x1afced0a030 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced0a1a0 <col:25, ./src\Core/Container/Variant.h:163:57> col:22 Variant 'void (const long long &)' inline
|   | |-ParmVarDecl 0x1afced0a0d8 <col:30, col:51> col:51 _value 'const long long &'
|   | `-AlwaysInlineAttr 0x1afced0a250 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced0a3c0 <col:25, ./src\Core/Container/Variant.h:164:66> col:22 Variant 'void (const unsigned long long &)' inline
|   | |-ParmVarDecl 0x1afced0a2f8 <col:30, col:60> col:60 _value 'const unsigned long long &'
|   | `-AlwaysInlineAttr 0x1afced0a470 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced0a5e0 <col:25, ./src\Core/Container/Variant.h:165:48> col:22 Variant 'void (const char &)' inline
|   | |-ParmVarDecl 0x1afced0a518 <col:30, col:42> col:42 _value 'const char &'
|   | `-AlwaysInlineAttr 0x1afced0a690 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced0a7d0 <col:25, ./src\Core/Container/Variant.h:166:57> col:22 Variant 'void (const unsigned char &)' inline
|   | |-ParmVarDecl 0x1afced0a700 <col:30, col:51> col:51 _value 'const unsigned char &'
|   | `-AlwaysInlineAttr 0x1afced0a880 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced16ae0 <col:25, ./src\Core/Container/Variant.h:167:51> col:22 Variant 'void (const wchar_t &)' inline
|   | |-ParmVarDecl 0x1afced16a10 <col:30, col:45> col:45 _value 'const wchar_t &'
|   | `-AlwaysInlineAttr 0x1afced16b90 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced16d00 <col:25, ./src\Core/Container/Variant.h:168:52> col:22 Variant 'void (const char16_t &)' inline
|   | |-ParmVarDecl 0x1afced16c38 <col:30, col:46> col:46 _value 'const char16_t &'
|   | `-AlwaysInlineAttr 0x1afced16db0 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced16f20 <col:25, ./src\Core/Container/Variant.h:169:52> col:22 Variant 'void (const char32_t &)' inline
|   | |-ParmVarDecl 0x1afced16e58 <col:30, col:46> col:46 _value 'const char32_t &'
|   | `-AlwaysInlineAttr 0x1afced16fd0 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced17110 <col:25, ./src\Core/Container/Variant.h:170:48> col:22 Variant 'void (const char *)' inline
|   | |-ParmVarDecl 0x1afced17040 <col:30, col:42> col:42 _value 'const char *'
|   | `-AlwaysInlineAttr 0x1afced171c0 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced17300 <col:25, ./src\Core/Container/Variant.h:171:51> col:22 Variant 'void (const wchar_t *)' inline
|   | |-ParmVarDecl 0x1afced17230 <col:30, col:45> col:45 _value 'const wchar_t *'
|   | `-AlwaysInlineAttr 0x1afced173b0 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced174f0 <col:25, ./src\Core/Container/Variant.h:172:52> col:22 Variant 'void (const char32_t *)' inline
|   | |-ParmVarDecl 0x1afced17420 <col:30, col:46> col:46 _value 'const char32_t *'
|   | `-AlwaysInlineAttr 0x1afced175a0 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced176d0 <col:25, ./src\Core/Container/Variant.h:173:50> col:22 Variant 'void (const Michka::String &)' inline
|   | |-ParmVarDecl 0x1afced17608 <col:30, col:44> col:44 _value 'const Michka::String &'
|   | `-AlwaysInlineAttr 0x1afced17780 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced17b20 <col:25, ./src\Core/Container/Variant.h:174:57> col:22 Variant 'void (const List<Michka::Variant> &)' inline
|   | |-ParmVarDecl 0x1afced17a18 <col:30, col:51> col:51 _value 'const List<Michka::Variant> &'
|   | `-AlwaysInlineAttr 0x1afced17bd0 <./src\Core/Defines.h:54:25> __forceinline
|   |-FunctionTemplateDecl 0x1afced17e30 <./src\Core/Container/Variant.h:175:9, line:176:68> col:22 invalid Variant
|   | |-TemplateTypeParmDecl 0x1afced17c28 <line:175:18, col:27> col:27 referenced typename depth 0 index 0 T
|   | `-CXXConstructorDecl 0x1afced17d88 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:176:68> col:22 invalid Variant 'void (const int &)' inline
|   |   |-ParmVarDecl 0x1afced17cf8 <col:30, col:62> col:62 invalid _value 'const int &'
|   |   `-AlwaysInlineAttr 0x1afced17e90 <./src\Core/Defines.h:54:25> __forceinline
|   |-FunctionTemplateDecl 0x1afced18148 <./src\Core/Container/Variant.h:177:9, line:178:45> col:22 Variant
|   | |-TemplateTypeParmDecl 0x1afced17ee8 <line:177:18, col:27> col:27 referenced typename depth 0 index 0 T
|   | `-CXXConstructorDecl 0x1afced180a0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:178:45> col:22 Variant 'void (const T &)' inline
|   |   |-ParmVarDecl 0x1afced17fd0 <col:30, col:39> col:39 _value 'const T &'
|   |   `-AlwaysInlineAttr 0x1afced181a8 <./src\Core/Defines.h:54:25> __forceinline
|   |-FunctionTemplateDecl 0x1afced18458 <./src\Core/Container/Variant.h:179:9, line:180:39> col:22 Variant
|   | |-TemplateTypeParmDecl 0x1afced18200 <line:179:18, col:27> col:27 referenced typename depth 0 index 0 T
|   | `-CXXConstructorDecl 0x1afced183b0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:180:39> col:22 Variant 'void (T *)' inline
|   |   |-ParmVarDecl 0x1afced182e0 <col:30, col:33> col:33 _value 'T *'
|   |   `-AlwaysInlineAttr 0x1afced184b8 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXConstructorDecl 0x1afced18620 <col:25, ./src\Core/Container/Variant.h:181:51> col:22 Variant 'void (const Michka::Variant &)' inline
|   | |-ParmVarDecl 0x1afced18550 <col:30, col:45> col:45 _value 'const Michka::Variant &'
|   | `-AlwaysInlineAttr 0x1afced186d0 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXDestructorDecl 0x1afced18770 <col:25, ./src\Core/Container/Variant.h:182:31> col:22 ~Variant 'void () noexcept' inline
|   | `-AlwaysInlineAttr 0x1afced18858 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced18960 <col:25, ./src\Core/Container/Variant.h:189:39> col:31 used destroy 'Michka::Variant &()' inline
|   | |-AlwaysInlineAttr 0x1afced0c9c0 <./src\Core/Defines.h:54:25> __forceinline
|   | `-FullComment 0x1afcede57c0 <./src\Core/Container/Variant.h:185:11, line:187:23>
|   |   |-ParagraphComment 0x1afcede5658 <line:185:11>
|   |   | `-TextComment 0x1afcede5630 <col:11> Text=" "
|   |   |-BlockCommandComment 0x1afcede5678 <col:12, col:50> Name="brief"
|   |   | `-ParagraphComment 0x1afcede56c8 <col:18, col:50>
|   |   |   `-TextComment 0x1afcede56a0 <col:18, col:50> Text=" Destroy variant and set to null."
|   |   |-ParagraphComment 0x1afcede5710 <line:187:11>
|   |   | `-TextComment 0x1afcede56e8 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcede5730 <col:12, col:23> Name="return"
|   |     `-ParagraphComment 0x1afcede5780 <col:19, col:23>
|   |       `-TextComment 0x1afcede5758 <col:19, col:23> Text=" Self"
|   |-CXXMethodDecl 0x1afced0cad0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:194:37> col:27 getType 'Michka::Variant::Type () const' inline
|   | |-AlwaysInlineAttr 0x1afced0cb70 <./src\Core/Defines.h:54:25> __forceinline
|   | `-FullComment 0x1afcede58e8 <./src\Core/Container/Variant.h:192:11, col:35>
|   |   |-ParagraphComment 0x1afcede5848 <col:11>
|   |   | `-TextComment 0x1afcede5820 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcede5868 <col:12, col:35> Name="brief"
|   |     `-ParagraphComment 0x1afcede58b8 <col:18, col:35>
|   |       `-TextComment 0x1afcede5890 <col:18, col:35> Text=" Get variant type."
|   |-CXXMethodDecl 0x1afced0cd10 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:201:49> col:27 is 'bool (const Michka::Variant::Type &) const' inline
|   | |-ParmVarDecl 0x1afced0cc40 <col:30, col:42> col:42 _type 'const Michka::Variant::Type &'
|   | |-AlwaysInlineAttr 0x1afced0cdb8 <./src\Core/Defines.h:54:25> __forceinline
|   | `-FullComment 0x1afcede5b00 <./src\Core/Container/Variant.h:197:11, line:200:9>
|   |   |-ParagraphComment 0x1afcede5970 <line:197:11>
|   |   | `-TextComment 0x1afcede5948 <col:11> Text=" "
|   |   |-BlockCommandComment 0x1afcede5990 <col:12, col:55> Name="brief"
|   |   | `-ParagraphComment 0x1afcede59e0 <col:18, col:55>
|   |   |   `-TextComment 0x1afcede59b8 <col:18, col:55> Text=" Check type is a special variant type."
|   |   |-ParagraphComment 0x1afcede5a28 <line:199:11>
|   |   | `-TextComment 0x1afcede5a00 <col:11> Text=" "
|   |   `-ParamCommandComment 0x1afcede5a48 <col:12, line:200:9> [in] implicitly Param="_type" ParamIndex=0
|   |     `-ParagraphComment 0x1afcede5ac0 <col:1, col:9>
|   |       `-TextComment 0x1afcede5a98 <col:1, col:9> Text="         "
|   |-CXXMethodDecl 0x1afced0ce60 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:206:36> col:27 isNull 'bool () const' inline
|   | |-AlwaysInlineAttr 0x1afced0cf00 <./src\Core/Defines.h:54:25> __forceinline
|   | `-FullComment 0x1afcede5c28 <./src\Core/Container/Variant.h:204:11, col:38>
|   |   |-ParagraphComment 0x1afcede5b88 <col:11>
|   |   | `-TextComment 0x1afcede5b60 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcede5ba8 <col:12, col:38> Name="brief"
|   |     `-ParagraphComment 0x1afcede5bf8 <col:18, col:38>
|   |       `-TextComment 0x1afcede5bd0 <col:18, col:38> Text=" Check type is string"
|   |-CXXMethodDecl 0x1afced0cfa8 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:211:36> col:27 isBool 'bool () const' inline
|   | |-AlwaysInlineAttr 0x1afced0d048 <./src\Core/Defines.h:54:25> __forceinline
|   | `-FullComment 0x1afcede5d50 <./src\Core/Container/Variant.h:209:11, col:36>
|   |   |-ParagraphComment 0x1afcede5cb0 <col:11>
|   |   | `-TextComment 0x1afcede5c88 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcede5cd0 <col:12, col:36> Name="brief"
|   |     `-ParagraphComment 0x1afcede5d20 <col:18, col:36>
|   |       `-TextComment 0x1afcede5cf8 <col:18, col:36> Text=" Check type is bool"
|   |-CXXMethodDecl 0x1afced0d0f0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:216:35> col:27 isInt 'bool () const' inline
|   | |-AlwaysInlineAttr 0x1afced0d190 <./src\Core/Defines.h:54:25> __forceinline
|   | `-FullComment 0x1afcede5e78 <./src\Core/Container/Variant.h:214:11, col:35>
|   |   |-ParagraphComment 0x1afcede5dd8 <col:11>
|   |   | `-TextComment 0x1afcede5db0 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcede5df8 <col:12, col:35> Name="brief"
|   |     `-ParagraphComment 0x1afcede5e48 <col:18, col:35>
|   |       `-TextComment 0x1afcede5e20 <col:18, col:35> Text=" Check type is int"
|   |-CXXMethodDecl 0x1afced0d238 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:221:37> col:27 isFloat 'bool () const' inline
|   | |-AlwaysInlineAttr 0x1afced0d2d8 <./src\Core/Defines.h:54:25> __forceinline
|   | `-FullComment 0x1afcede5fa0 <./src\Core/Container/Variant.h:219:11, col:37>
|   |   |-ParagraphComment 0x1afcede5f00 <col:11>
|   |   | `-TextComment 0x1afcede5ed8 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcede5f20 <col:12, col:37> Name="brief"
|   |     `-ParagraphComment 0x1afcede5f70 <col:18, col:37>
|   |       `-TextComment 0x1afcede5f48 <col:18, col:37> Text=" Check type is float"
|   |-CXXMethodDecl 0x1afced0d380 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:226:38> col:27 isString 'bool () const' inline
|   | |-AlwaysInlineAttr 0x1afced0d420 <./src\Core/Defines.h:54:25> __forceinline
|   | `-FullComment 0x1afcede60c8 <./src\Core/Container/Variant.h:224:11, col:38>
|   |   |-ParagraphComment 0x1afcede6028 <col:11>
|   |   | `-TextComment 0x1afcede6000 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcede6048 <col:12, col:38> Name="brief"
|   |     `-ParagraphComment 0x1afcede6098 <col:18, col:38>
|   |       `-TextComment 0x1afcede6070 <col:18, col:38> Text=" Check type is string"
|   |-CXXMethodDecl 0x1afced0d4c8 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:231:37> col:27 isArray 'bool () const' inline
|   | |-AlwaysInlineAttr 0x1afced0d568 <./src\Core/Defines.h:54:25> __forceinline
|   | `-FullComment 0x1afcedf0250 <./src\Core/Container/Variant.h:229:11, col:37>
|   |   |-ParagraphComment 0x1afcedf01b0 <col:11>
|   |   | `-TextComment 0x1afcedf0188 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcedf01d0 <col:12, col:37> Name="brief"
|   |     `-ParagraphComment 0x1afcedf0220 <col:18, col:37>
|   |       `-TextComment 0x1afcedf01f8 <col:18, col:37> Text=" Check type is array"
|   |-CXXMethodDecl 0x1afced0d610 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:236:41> col:27 isReference 'bool () const' inline
|   | |-AlwaysInlineAttr 0x1afced0d6b0 <./src\Core/Defines.h:54:25> __forceinline
|   | `-FullComment 0x1afcedf0378 <./src\Core/Container/Variant.h:234:11, col:41>
|   |   |-ParagraphComment 0x1afcedf02d8 <col:11>
|   |   | `-TextComment 0x1afcedf02b0 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcedf02f8 <col:12, col:41> Name="brief"
|   |     `-ParagraphComment 0x1afcedf0348 <col:18, col:41>
|   |       `-TextComment 0x1afcedf0320 <col:18, col:41> Text=" Check type is reference"
|   |-CXXMethodDecl 0x1afced0d758 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:241:38> col:27 isCustom 'bool () const' inline
|   | |-AlwaysInlineAttr 0x1afced0d7f8 <./src\Core/Defines.h:54:25> __forceinline
|   | `-FullComment 0x1afcedf04a0 <./src\Core/Container/Variant.h:239:11, col:38>
|   |   |-ParagraphComment 0x1afcedf0400 <col:11>
|   |   | `-TextComment 0x1afcedf03d8 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcedf0420 <col:12, col:38> Name="brief"
|   |     `-ParagraphComment 0x1afcedf0470 <col:18, col:38>
|   |       `-TextComment 0x1afcedf0448 <col:18, col:38> Text=" Check type is custom"
|   |-FunctionTemplateDecl 0x1afced0d9e0 <line:246:9, line:247:32> col:14 isConvertibleTo
|   | |-TemplateTypeParmDecl 0x1afced0d880 <line:246:18, col:27> col:27 typename depth 0 index 0 T
|   | |-CXXMethodDecl 0x1afced0d940 <line:247:9, col:32> col:14 isConvertibleTo 'bool () const'
|   | | `-FullComment 0x1afcedf06f0 <line:244:11, col:47>
|   | |   |-ParagraphComment 0x1afcedf0650 <col:11>
|   | |   | `-TextComment 0x1afcedf0628 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedf0670 <col:12, col:47> Name="brief"
|   | |     `-ParagraphComment 0x1afcedf06c0 <col:18, col:47>
|   | |       `-TextComment 0x1afcedf0698 <col:18, col:47> Text=" Check variant can convert to."
|   | `-FullComment 0x1afcedf05c8 <col:11, col:47>
|   |   |-ParagraphComment 0x1afcedf0528 <col:11>
|   |   | `-TextComment 0x1afcedf0500 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcedf0548 <col:12, col:47> Name="brief"
|   |     `-ParagraphComment 0x1afcedf0598 <col:18, col:47>
|   |       `-TextComment 0x1afcedf0570 <col:18, col:47> Text=" Check variant can convert to."
|   |-FunctionTemplateDecl 0x1afced0dc00 <line:254:9, line:255:16> col:11 to
|   | |-TemplateTypeParmDecl 0x1afced0da68 <line:254:18, col:27> col:27 referenced typename depth 0 index 0 T
|   | |-CXXMethodDecl 0x1afced0db60 <line:255:9, col:16> col:11 to 'T () const'
|   | | `-FullComment 0x1afcedf0b38 <line:250:11, line:253:9>
|   | |   |-ParagraphComment 0x1afcedf09a0 <line:250:11>
|   | |   | `-TextComment 0x1afcedf0978 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedf09c0 <col:12, col:49> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedf0a10 <col:18, col:49>
|   | |   |   `-TextComment 0x1afcedf09e8 <col:18, col:49> Text=" Convert variant to native type."
|   | |   |-ParagraphComment 0x1afcedf0a58 <line:252:11>
|   | |   | `-TextComment 0x1afcedf0a30 <col:11> Text=" "
|   | |   `-TParamCommandComment 0x1afcedf0a78 <col:12, line:253:9> Param="T"
|   | |     `-ParagraphComment 0x1afcedf0af8 <col:1, col:9>
|   | |       `-TextComment 0x1afcedf0ad0 <col:1, col:9> Text="         "
|   | `-FullComment 0x1afcedf0918 <line:250:11, line:253:9>
|   |   |-ParagraphComment 0x1afcedf0778 <line:250:11>
|   |   | `-TextComment 0x1afcedf0750 <col:11> Text=" "
|   |   |-BlockCommandComment 0x1afcedf0798 <col:12, col:49> Name="brief"
|   |   | `-ParagraphComment 0x1afcedf07e8 <col:18, col:49>
|   |   |   `-TextComment 0x1afcedf07c0 <col:18, col:49> Text=" Convert variant to native type."
|   |   |-ParagraphComment 0x1afcedf0830 <line:252:11>
|   |   | `-TextComment 0x1afcedf0808 <col:11> Text=" "
|   |   `-TParamCommandComment 0x1afcedf0850 <col:12, line:253:9> Param="T" Position=<0>
|   |     `-ParagraphComment 0x1afcedf08d8 <col:1, col:9>
|   |       `-TextComment 0x1afcedf08b0 <col:1, col:9> Text="         "
|   |-CXXMethodDecl 0x1afced0dca8 <line:260:9, col:27> col:16 toString 'Michka::String () const'
|   | `-FullComment 0x1afcedf0c60 <line:258:11, col:38>
|   |   |-ParagraphComment 0x1afcedf0bc0 <col:11>
|   |   | `-TextComment 0x1afcedf0b98 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcedf0be0 <col:12, col:38> Name="brief"
|   |     `-ParagraphComment 0x1afcedf0c30 <col:18, col:38>
|   |       `-TextComment 0x1afcedf0c08 <col:18, col:38> Text=" Get value as string."
|   |-CXXMethodDecl 0x1afced0de30 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:262:71> col:31 invalid operator= 'Michka::Variant &(const int &)' inline
|   | |-ParmVarDecl 0x1afced0dd60 <col:43, col:65> col:65 invalid _value 'const int &'
|   | `-AlwaysInlineAttr 0x1afced0ded8 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced0e010 <col:25, ./src\Core/Container/Variant.h:263:62> col:31 operator= 'Michka::Variant &(const float &)' inline
|   | |-ParmVarDecl 0x1afced0df48 <col:43, col:56> col:56 _value 'const float &'
|   | `-AlwaysInlineAttr 0x1afced0e0b8 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced0e1f0 <col:25, ./src\Core/Container/Variant.h:264:63> col:31 operator= 'Michka::Variant &(const double &)' inline
|   | |-ParmVarDecl 0x1afced0e128 <col:43, col:57> col:57 _value 'const double &'
|   | `-AlwaysInlineAttr 0x1afced0e298 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced0e3d0 <col:25, ./src\Core/Container/Variant.h:265:61> col:31 operator= 'Michka::Variant &(const bool &)' inline
|   | |-ParmVarDecl 0x1afced0e308 <col:43, col:55> col:55 _value 'const bool &'
|   | `-AlwaysInlineAttr 0x1afced0e478 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced0e578 <col:25, ./src\Core/Container/Variant.h:266:60> col:31 operator= 'Michka::Variant &(const int &)' inline
|   | |-ParmVarDecl 0x1afced0e4e8 <col:43, col:54> col:54 _value 'const int &'
|   | `-AlwaysInlineAttr 0x1afced0e620 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced0e760 <col:25, ./src\Core/Container/Variant.h:267:69> col:31 operator= 'Michka::Variant &(const unsigned int &)' inline
|   | |-ParmVarDecl 0x1afced0e690 <col:43, col:63> col:63 _value 'const unsigned int &'
|   | `-AlwaysInlineAttr 0x1afced0e808 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced14a00 <col:25, ./src\Core/Container/Variant.h:268:66> col:31 operator= 'Michka::Variant &(const short &)' inline
|   | |-ParmVarDecl 0x1afced0e878 <col:43, col:60> col:60 _value 'const short &'
|   | `-AlwaysInlineAttr 0x1afced14aa8 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced14be0 <col:25, ./src\Core/Container/Variant.h:269:75> col:31 operator= 'Michka::Variant &(const unsigned short &)' inline
|   | |-ParmVarDecl 0x1afced14b18 <col:43, col:69> col:69 _value 'const unsigned short &'
|   | `-AlwaysInlineAttr 0x1afced14c88 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced14dc0 <col:25, ./src\Core/Container/Variant.h:270:70> col:31 operator= 'Michka::Variant &(const long long &)' inline
|   | |-ParmVarDecl 0x1afced14cf8 <col:43, col:64> col:64 _value 'const long long &'
|   | `-AlwaysInlineAttr 0x1afced14e68 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced14fa0 <col:25, ./src\Core/Container/Variant.h:271:79> col:31 operator= 'Michka::Variant &(const unsigned long long &)' inline
|   | |-ParmVarDecl 0x1afced14ed8 <col:43, col:73> col:73 _value 'const unsigned long long &'
|   | `-AlwaysInlineAttr 0x1afced15048 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced15180 <col:25, ./src\Core/Container/Variant.h:272:61> col:31 operator= 'Michka::Variant &(const char &)' inline
|   | |-ParmVarDecl 0x1afced150b8 <col:43, col:55> col:55 _value 'const char &'
|   | `-AlwaysInlineAttr 0x1afced15228 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced15360 <col:25, ./src\Core/Container/Variant.h:273:70> col:31 operator= 'Michka::Variant &(const unsigned char &)' inline
|   | |-ParmVarDecl 0x1afced15298 <col:43, col:64> col:64 _value 'const unsigned char &'
|   | `-AlwaysInlineAttr 0x1afced15408 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced15540 <col:25, ./src\Core/Container/Variant.h:274:64> col:31 operator= 'Michka::Variant &(const wchar_t &)' inline
|   | |-ParmVarDecl 0x1afced15478 <col:43, col:58> col:58 _value 'const wchar_t &'
|   | `-AlwaysInlineAttr 0x1afced155e8 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced15720 <col:25, ./src\Core/Container/Variant.h:275:65> col:31 operator= 'Michka::Variant &(const char16_t &)' inline
|   | |-ParmVarDecl 0x1afced15658 <col:43, col:59> col:59 _value 'const char16_t &'
|   | `-AlwaysInlineAttr 0x1afced157c8 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced15900 <col:25, ./src\Core/Container/Variant.h:276:65> col:31 operator= 'Michka::Variant &(const char32_t &)' inline
|   | |-ParmVarDecl 0x1afced15838 <col:43, col:59> col:59 _value 'const char32_t &'
|   | `-AlwaysInlineAttr 0x1afced159a8 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced15ae0 <col:25, ./src\Core/Container/Variant.h:277:61> col:31 operator= 'Michka::Variant &(const char *)' inline
|   | |-ParmVarDecl 0x1afced15a18 <col:43, col:55> col:55 _value 'const char *'
|   | `-AlwaysInlineAttr 0x1afced15b88 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced15cc0 <col:25, ./src\Core/Container/Variant.h:278:64> col:31 operator= 'Michka::Variant &(const wchar_t *)' inline
|   | |-ParmVarDecl 0x1afced15bf8 <col:43, col:58> col:58 _value 'const wchar_t *'
|   | `-AlwaysInlineAttr 0x1afced15d68 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced15ea0 <col:25, ./src\Core/Container/Variant.h:279:65> col:31 operator= 'Michka::Variant &(const char32_t *)' inline
|   | |-ParmVarDecl 0x1afced15dd8 <col:43, col:59> col:59 _value 'const char32_t *'
|   | `-AlwaysInlineAttr 0x1afced15f48 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced160c0 <col:25, ./src\Core/Container/Variant.h:280:63> col:31 operator= 'Michka::Variant &(const Michka::String &)' inline
|   | |-ParmVarDecl 0x1afced15fb0 <col:43, col:57> col:57 _value 'const Michka::String &'
|   | `-AlwaysInlineAttr 0x1afced16168 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced163c0 <col:25, ./src\Core/Container/Variant.h:281:70> col:31 used operator= 'Michka::Variant &(const List<Michka::Variant> &)' inline
|   | |-ParmVarDecl 0x1afced162b8 <col:43, col:64> col:64 _value 'const List<Michka::Variant> &'
|   | `-AlwaysInlineAttr 0x1afced16468 <./src\Core/Defines.h:54:25> __forceinline
|   |-FunctionTemplateDecl 0x1afced166b8 <./src\Core/Container/Variant.h:282:9, line:283:81> col:31 invalid operator=
|   | |-TemplateTypeParmDecl 0x1afced164c0 <line:282:18, col:27> col:27 referenced typename depth 0 index 0 T
|   | `-CXXMethodDecl 0x1afced16618 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:283:81> col:31 invalid operator= 'Michka::Variant &(const int &)' inline
|   |   |-ParmVarDecl 0x1afced16588 <col:43, col:75> col:75 invalid _value 'const int &'
|   |   `-AlwaysInlineAttr 0x1afced16718 <./src\Core/Defines.h:54:25> __forceinline
|   |-FunctionTemplateDecl 0x1afced18a20 <./src\Core/Container/Variant.h:284:9, line:285:58> col:31 operator=
|   | |-TemplateTypeParmDecl 0x1afced16770 <line:284:18, col:27> col:27 referenced typename depth 0 index 0 T
|   | `-CXXMethodDecl 0x1afced16960 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:285:58> col:31 operator= 'Michka::Variant &(const T &)' inline
|   |   |-ParmVarDecl 0x1afced16850 <col:43, col:52> col:52 _value 'const T &'
|   |   `-AlwaysInlineAttr 0x1afced18a80 <./src\Core/Defines.h:54:25> __forceinline
|   |-FunctionTemplateDecl 0x1afced18d70 <./src\Core/Container/Variant.h:286:9, line:287:52> col:31 operator=
|   | |-TemplateTypeParmDecl 0x1afced18ad8 <line:286:18, col:27> col:27 referenced typename depth 0 index 0 T
|   | `-CXXMethodDecl 0x1afced18cd0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:287:52> col:31 operator= 'Michka::Variant &(T *)' inline
|   |   |-ParmVarDecl 0x1afced18bc0 <col:43, col:46> col:46 _value 'T *'
|   |   `-AlwaysInlineAttr 0x1afced18dd0 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced18f00 <col:25, ./src\Core/Container/Variant.h:288:64> col:31 used operator= 'Michka::Variant &(const Michka::Variant &)' inline
|   | |-ParmVarDecl 0x1afced18e38 <col:43, col:58> col:58 _value 'const Michka::Variant &'
|   | `-AlwaysInlineAttr 0x1afced18fa8 <./src\Core/Defines.h:54:25> __forceinline
|   |-CXXMethodDecl 0x1afced190e0 <./src\Core/Container/Variant.h:290:9, col:50> col:14 used operator== 'bool (const Michka::Variant &) const'
|   | `-ParmVarDecl 0x1afced19010 <col:27, col:42> col:42 _other 'const Michka::Variant &'
|   |-CXXMethodDecl 0x1afced19228 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.h:291:63> col:27 operator!= 'bool (const Michka::Variant &) const' inline
|   | |-ParmVarDecl 0x1afced19198 <col:40, col:55> col:55 _other 'const Michka::Variant &'
|   | `-AlwaysInlineAttr 0x1afced192d0 <./src\Core/Defines.h:54:25> __forceinline
|   |-FunctionTemplateDecl 0x1afced194f8 <./src\Core/Container/Variant.h:293:9, line:294:23> col:9 operator type-parameter-0-0
|   | |-TemplateTypeParmDecl 0x1afced19328 <line:293:18, col:27> col:27 referenced typename depth 0 index 0 T
|   | `-CXXConversionDecl 0x1afced19450 <line:294:9, col:23> col:9 operator type-parameter-0-0 'T () const'
|   |-AccessSpecDecl 0x1afced19558 <line:296:5, col:12> col:5 private
|   |-FieldDecl 0x1afced19598 <line:297:9, col:28> col:14 referenced mType 'Michka::Variant::Type'
|   | `-DeclRefExpr 0x1afced1a080 <col:22, col:28> 'Michka::Variant::Type' EnumConstant 0x1afced08c78 'typeNull' 'Michka::Variant::Type'
|   |-CXXRecordDecl 0x1afced195f0 <line:298:9, line:307:9> line:298:9 union definition
|   | |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
|   | | |-DefaultConstructor exists trivial needs_implicit
|   | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | |-MoveConstructor exists simple trivial needs_implicit
|   | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | |-MoveAssignment exists simple trivial needs_implicit
|   | | `-Destructor simple irrelevant trivial
|   | |-FieldDecl 0x1afced19720 <line:300:13, col:17> col:17 referenced mInt 'i64':'long long'
|   | |-FieldDecl 0x1afced19790 <line:301:13, col:20> col:20 referenced mFloat 'double'
|   | |-FieldDecl 0x1afced19860 <line:302:13, col:18> col:18 mIntReference 'i64 *'
|   | |-FieldDecl 0x1afced19908 <line:303:13, col:21> col:21 mFloatReference 'double *'
|   | |-FieldDecl 0x1afced199d0 <line:304:13, col:21> col:21 referenced mString 'Michka::String *'
|   | |-FieldDecl 0x1afced19b58 <line:305:13, col:28> col:28 referenced mList 'List<Michka::Variant> *'
|   | |-FieldDecl 0x1afced19c98 <line:306:13, col:41> col:41 referenced mCustom 'Private::CustomVariantBase *'
|   | `-CXXDestructorDecl 0x1afced1ea80 <line:298:9> col:9 implicit ~ 'void () noexcept' inline default trivial
|   |-FieldDecl 0x1afced19d70 <col:9> col:9 implicit referenced 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)'
|   |-IndirectFieldDecl 0x1afced19dd8 <line:300:17> col:17 implicit mInt 'i64':'long long'
|   | |-Field 0x1afced19d70 '' 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)'
|   | `-Field 0x1afced19720 'mInt' 'i64':'long long'
|   |-IndirectFieldDecl 0x1afced19e30 <line:301:20> col:20 implicit mFloat 'double'
|   | |-Field 0x1afced19d70 '' 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)'
|   | `-Field 0x1afced19790 'mFloat' 'double'
|   |-IndirectFieldDecl 0x1afced19e88 <line:302:18> col:18 implicit mIntReference 'i64 *'
|   | |-Field 0x1afced19d70 '' 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)'
|   | `-Field 0x1afced19860 'mIntReference' 'i64 *'
|   |-IndirectFieldDecl 0x1afced19ee0 <line:303:21> col:21 implicit mFloatReference 'double *'
|   | |-Field 0x1afced19d70 '' 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)'
|   | `-Field 0x1afced19908 'mFloatReference' 'double *'
|   |-IndirectFieldDecl 0x1afced19f38 <line:304:21> col:21 implicit mString 'Michka::String *'
|   | |-Field 0x1afced19d70 '' 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)'
|   | `-Field 0x1afced199d0 'mString' 'Michka::String *'
|   |-IndirectFieldDecl 0x1afced19f90 <line:305:28> col:28 implicit mList 'List<Michka::Variant> *'
|   | |-Field 0x1afced19d70 '' 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)'
|   | `-Field 0x1afced19b58 'mList' 'List<Michka::Variant> *'
|   `-IndirectFieldDecl 0x1afced19fe8 <line:306:41> col:41 implicit mCustom 'Private::CustomVariantBase *'
|     |-Field 0x1afced19d70 '' 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)'
|     `-Field 0x1afced19c98 'mCustom' 'Private::CustomVariantBase *'
|-FunctionDecl 0x1afcecf4838 <<invalid sloc>> <invalid sloc> implicit operator new 'void *(unsigned long long)'
| |-ParmVarDecl 0x1afcecf4938 <<invalid sloc>> <invalid sloc> implicit 'unsigned long long'
| |-VisibilityAttr 0x1afcecf48d8 <<invalid sloc>> Implicit Default
| |-ReturnsNonNullAttr 0x1afcecf49a8 <<invalid sloc>> Implicit
| `-AllocSizeAttr 0x1afcecf49d0 <<invalid sloc>> Implicit 1
|-FunctionDecl 0x1afcecf4a40 <<invalid sloc>> <invalid sloc> implicit operator new 'void *(unsigned long long, std::align_val_t)'
| |-ParmVarDecl 0x1afcecf4b40 <<invalid sloc>> <invalid sloc> implicit 'unsigned long long'
| |-ParmVarDecl 0x1afcecf4ba8 <<invalid sloc>> <invalid sloc> implicit 'std::align_val_t'
| |-VisibilityAttr 0x1afcecf4ae0 <<invalid sloc>> Implicit Default
| |-ReturnsNonNullAttr 0x1afcecf4c20 <<invalid sloc>> Implicit
| |-AllocSizeAttr 0x1afcecf4c48 <<invalid sloc>> Implicit 1
| `-AllocAlignAttr 0x1afcecf4c78 <<invalid sloc>> Implicit 2
|-FunctionDecl 0x1afcecf4ca8 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long long)'
| |-ParmVarDecl 0x1afcecf4da8 <<invalid sloc>> <invalid sloc> implicit 'unsigned long long'
| |-VisibilityAttr 0x1afcecf4d48 <<invalid sloc>> Implicit Default
| |-ReturnsNonNullAttr 0x1afcecf4e18 <<invalid sloc>> Implicit
| `-AllocSizeAttr 0x1afcecf4e40 <<invalid sloc>> Implicit 1
|-FunctionDecl 0x1afcecf4e70 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long long, std::align_val_t)'
| |-ParmVarDecl 0x1afcecf4f70 <<invalid sloc>> <invalid sloc> implicit 'unsigned long long'
| |-ParmVarDecl 0x1afcecf4fd8 <<invalid sloc>> <invalid sloc> implicit 'std::align_val_t'
| |-VisibilityAttr 0x1afcecf4f10 <<invalid sloc>> Implicit Default
| |-ReturnsNonNullAttr 0x1afcecf5050 <<invalid sloc>> Implicit
| |-AllocSizeAttr 0x1afcecf5078 <<invalid sloc>> Implicit 1
| `-AllocAlignAttr 0x1afcecf50a8 <<invalid sloc>> Implicit 2
|-FunctionDecl 0x1afcecf5118 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x1afcecf5218 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x1afcecf51b8 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x1afcecf52d0 <<invalid sloc>> <invalid sloc> implicit operator delete 'void (void *, std::align_val_t) noexcept'
| |-ParmVarDecl 0x1afcecf53d0 <<invalid sloc>> <invalid sloc> implicit 'void *'
| |-ParmVarDecl 0x1afcecf5438 <<invalid sloc>> <invalid sloc> implicit 'std::align_val_t'
| `-VisibilityAttr 0x1afcecf5370 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x1afcecf54b0 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl 0x1afcecf55b0 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x1afcecf5550 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x1afcecf5620 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *, std::align_val_t) noexcept'
| |-ParmVarDecl 0x1afcecf5720 <<invalid sloc>> <invalid sloc> implicit 'void *'
| |-ParmVarDecl 0x1afcecf5788 <<invalid sloc>> <invalid sloc> implicit 'std::align_val_t'
| `-VisibilityAttr 0x1afcecf56c0 <<invalid sloc>> Implicit Default
|-NamespaceDecl 0x1afced1a1b8 prev 0x1afcecea758 <./src\Core/Container/Variant.inl:30:1, line:740:1> line:30:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| |-NamespaceDecl 0x1afced1a228 prev 0x1afcecea888 <line:32:5, line:123:5> line:32:15 Private
| | |-original Namespace 0x1afce0fd288 'Private'
| | |-CXXConstructorDecl 0x1afced1a2f0 parent 0x1afcecea8f8 prev 0x1afceceae48 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.inl:37:9> line:34:41 used CustomVariantBase 'void ()' inline
| | | |-CompoundStmt 0x1afced1a488 <line:35:9, line:37:9>
| | | |-DLLExportAttr 0x1afced1a430 <./src\Core/Defines.h:65:34> Inherited
| | | `-AlwaysInlineAttr 0x1afced1a3d8 <line:54:25> __forceinline
| | |-CXXMethodDecl 0x1afced1a4c0 parent 0x1afcecea8f8 prev 0x1afcecf3bf0 <col:25, ./src\Core/Container/Variant.inl:42:9> line:39:48 used invalid getType 'Michka::String () const' inline
| | | |-CompoundStmt 0x1afced1a640 <line:40:9, line:42:9>
| | | |-DLLExportAttr 0x1afced1a608 <./src\Core/Defines.h:65:34> Inherited
| | | `-AlwaysInlineAttr 0x1afced1a5b0 <line:54:25> __forceinline
| | |-CXXConstructorDecl 0x1afced0a9b0 parent 0x1afcecf5920 prev 0x1afcecf61b0 <./src\Core/Container/Variant.inl:44:9, line:45:56> col:27 CustomVariant<T> 'void (const T &)'
| | | |-ParmVarDecl 0x1afced1a940 <col:41, col:50> col:50 _value 'const T &'
| | | `-<<<NULL>>>
| | |-CXXDestructorDecl 0x1afced0ace0 parent 0x1afcecf5920 prev 0x1afcecf62a8 <line:51:9, line:52:42> col:27 ~CustomVariant<T> 'void ()'
| | | |-Overrides: [ 0x1afceceaf90 CustomVariantBase::~CustomVariantBase 'void () noexcept' ]
| | | `-<<<NULL>>>
| | |-CXXMethodDecl 0x1afced0b000 parent 0x1afcecf5920 prev 0x1afcecf63a8 <line:57:9, line:58:52> col:46 clone 'Michka::Private::CustomVariantBase *()'
| | | |-Overrides: [ 0x1afcecf3910 CustomVariantBase::clone 'Michka::Private::CustomVariantBase *()' ]
| | | `-<<<NULL>>>
| | |-CXXMethodDecl 0x1afced0b390 parent 0x1afcecf5920 prev 0x1afcecf6518 <line:63:9, line:64:63> col:32 equal 'bool (Michka::Private::CustomVariantBase *)'
| | | |-Overrides: [ 0x1afcecf3ac0 CustomVariantBase::equal 'bool (Michka::Private::CustomVariantBase *)' ]
| | | |-ParmVarDecl 0x1afced0b300 <col:38, col:57> col:57 _other 'Michka::Private::CustomVariantBase *'
| | | `-<<<NULL>>>
| | |-CXXMethodDecl 0x1afced0b6a0 parent 0x1afcecf5920 prev 0x1afcecf6640 <line:69:9, line:70:45> col:34 toString 'Michka::String () const'
| | | |-Overrides: [ 0x1afcecf3d38 CustomVariantBase::toString 'Michka::String () const' ]
| | | `-<<<NULL>>>
| | |-CXXConstructorDecl 0x1afced0bb50 parent 0x1afcecf6860 prev 0x1afcecf70f0 <line:82:9, line:83:68> col:36 CustomVariantReference<T> 'void (T *)'
| | | |-ParmVarDecl 0x1afced0ba80 <col:59, col:62> col:62 _value 'T *'
| | | `-<<<NULL>>>
| | |-CXXDestructorDecl 0x1afced0be80 parent 0x1afcecf6860 prev 0x1afcecf71e8 <line:89:9, line:90:60> col:36 ~CustomVariantReference<T> 'void ()'
| | | |-Overrides: [ 0x1afceceaf90 CustomVariantBase::~CustomVariantBase 'void () noexcept' ]
| | | `-<<<NULL>>>
| | |-CXXMethodDecl 0x1afced0c1d0 parent 0x1afcecf6860 prev 0x1afcecf72e8 <line:95:9, line:96:61> col:55 clone 'Michka::Private::CustomVariantBase *()'
| | | |-Overrides: [ 0x1afcecf3910 CustomVariantBase::clone 'Michka::Private::CustomVariantBase *()' ]
| | | `-<<<NULL>>>
| | |-CXXMethodDecl 0x1afced0c560 parent 0x1afcecf6860 prev 0x1afcecf7458 <line:101:9, line:102:72> col:41 equal 'bool (Michka::Private::CustomVariantBase *)'
| | | |-Overrides: [ 0x1afcecf3ac0 CustomVariantBase::equal 'bool (Michka::Private::CustomVariantBase *)' ]
| | | |-ParmVarDecl 0x1afced0c4d0 <col:47, col:66> col:66 _other 'Michka::Private::CustomVariantBase *'
| | | `-<<<NULL>>>
| | `-CXXMethodDecl 0x1afced0c870 parent 0x1afcecf6860 prev 0x1afcecf7580 <line:107:9, line:108:54> col:43 toString 'Michka::String () const'
| |   |-Overrides: [ 0x1afcecf3d38 CustomVariantBase::toString 'Michka::String () const' ]
| |   `-<<<NULL>>>
| |-CXXConstructorDecl 0x1afced12a28 parent 0x1afcecf76c8 prev 0x1afced08fa0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.inl:132:5> line:127:27 Variant 'void ()' inline
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced12bd0 <line:128:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08c78 'typeNull' 'Michka::Variant::Type'
| | |-CXXCtorInitializer Field 0x1afced19720 'mInt' 'i64':'long long'
| | | `-ImplicitCastExpr 0x1afced12c90 <line:129:14> 'i64':'long long' <IntegralCast>
| | |   `-IntegerLiteral 0x1afced12c48 <col:14> 'int' 0
| | |-CompoundStmt 0x1afced12d10 <line:130:5, line:132:5>
| | |-AlwaysInlineAttr 0x1afced12b10 <./src\Core/Defines.h:54:25> __forceinline
| | `-FullComment 0x1afcedf0d88 <./src\Core/Container/Variant.inl:125:7, col:82>
| |   `-ParagraphComment 0x1afcedf0d60 <col:7, col:82>
| |     `-TextComment 0x1afcedf0d38 <col:7, col:82> Text=" --------------------------------- Variant -------------------------------- "
| |-CXXConstructorDecl 0x1afced12de8 parent 0x1afcecf76c8 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.inl:139:5> line:134:27 invalid Variant 'void (const int &)' inline
| | |-ParmVarDecl 0x1afced12d58 <col:35, col:57> col:57 invalid _value 'const int &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced12f80 <line:135:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08c78 'typeNull' 'Michka::Variant::Type'
| | |-CXXCtorInitializer Field 0x1afced19720 'mInt' 'i64':'long long'
| | | `-ImplicitCastExpr 0x1afced13040 <line:136:14> 'i64':'long long' <IntegralCast>
| | |   `-IntegerLiteral 0x1afced12ff8 <col:14> 'int' 0
| | |-CompoundStmt 0x1afced130c0 <line:137:5, line:139:5>
| | `-AlwaysInlineAttr 0x1afced12ed8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced13198 parent 0x1afcecf76c8 prev 0x1afced09360 <col:25, ./src\Core/Container/Variant.inl:146:5> line:141:27 Variant 'void (const float &)' inline
| | |-ParmVarDecl 0x1afced13108 <col:35, col:48> col:48 used _value 'const float &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced13330 <line:142:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08d80 'typeFloat' 'Michka::Variant::Type'
| | |-CXXCtorInitializer Field 0x1afced19790 'mFloat' 'double'
| | | `-ImplicitCastExpr 0x1afced13400 <line:143:16> 'double' <FloatingCast>
| | |   `-ImplicitCastExpr 0x1afced133e8 <col:16> 'float' <LValueToRValue>
| | |     `-DeclRefExpr 0x1afced133a8 <col:16> 'const float' lvalue ParmVar 0x1afced13108 '_value' 'const float &'
| | |-CompoundStmt 0x1afced13480 <line:144:5, line:146:5>
| | `-AlwaysInlineAttr 0x1afced13288 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced13558 parent 0x1afcecf76c8 prev 0x1afced09580 <col:25, ./src\Core/Container/Variant.inl:153:5> line:148:27 Variant 'void (const double &)' inline
| | |-ParmVarDecl 0x1afced134c8 <col:35, col:49> col:49 used _value 'const double &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced136f0 <line:149:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08d80 'typeFloat' 'Michka::Variant::Type'
| | |-CXXCtorInitializer Field 0x1afced19790 'mFloat' 'double'
| | | `-ImplicitCastExpr 0x1afced137a8 <line:150:16> 'double' <LValueToRValue>
| | |   `-DeclRefExpr 0x1afced13768 <col:16> 'const double' lvalue ParmVar 0x1afced134c8 '_value' 'const double &'
| | |-CompoundStmt 0x1afced13828 <line:151:5, line:153:5>
| | `-AlwaysInlineAttr 0x1afced13648 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced13900 parent 0x1afcecf76c8 prev 0x1afced097a0 <col:25, ./src\Core/Container/Variant.inl:160:5> line:155:27 Variant 'void (const bool &)' inline
| | |-ParmVarDecl 0x1afced13870 <col:35, col:47> col:47 used _value 'const bool &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced13a98 <line:156:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08cd0 'typeBool' 'Michka::Variant::Type'
| | |-CXXCtorInitializer Field 0x1afced19720 'mInt' 'i64':'long long'
| | | `-ImplicitCastExpr 0x1afced13b68 <line:157:14> 'i64':'long long' <IntegralCast>
| | |   `-ImplicitCastExpr 0x1afced13b50 <col:14> 'bool' <LValueToRValue>
| | |     `-DeclRefExpr 0x1afced13b10 <col:14> 'const bool' lvalue ParmVar 0x1afced13870 '_value' 'const bool &'
| | |-CompoundStmt 0x1afced13be8 <line:158:5, line:160:5>
| | `-AlwaysInlineAttr 0x1afced139f0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced13cc0 parent 0x1afcecf76c8 prev 0x1afced09950 <col:25, ./src\Core/Container/Variant.inl:167:5> line:162:27 Variant 'void (const int &)' inline
| | |-ParmVarDecl 0x1afced13c30 <col:35, col:46> col:46 used _value 'const int &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced13e58 <line:163:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | |-CXXCtorInitializer Field 0x1afced19720 'mInt' 'i64':'long long'
| | | `-ImplicitCastExpr 0x1afced13f28 <line:164:14> 'i64':'long long' <IntegralCast>
| | |   `-ImplicitCastExpr 0x1afced13f10 <col:14> 'int' <LValueToRValue>
| | |     `-DeclRefExpr 0x1afced13ed0 <col:14> 'const int' lvalue ParmVar 0x1afced13c30 '_value' 'const int &'
| | |-CompoundStmt 0x1afced13fa8 <line:165:5, line:167:5>
| | `-AlwaysInlineAttr 0x1afced13db0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced14080 parent 0x1afcecf76c8 prev 0x1afced09b40 <col:25, ./src\Core/Container/Variant.inl:174:5> line:169:27 Variant 'void (const unsigned int &)' inline
| | |-ParmVarDecl 0x1afced13ff0 <col:35, col:55> col:55 used _value 'const unsigned int &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced14218 <line:170:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | |-CXXCtorInitializer Field 0x1afced19720 'mInt' 'i64':'long long'
| | | `-ImplicitCastExpr 0x1afced142e8 <line:171:14> 'i64':'long long' <IntegralCast>
| | |   `-ImplicitCastExpr 0x1afced142d0 <col:14> 'unsigned int' <LValueToRValue>
| | |     `-DeclRefExpr 0x1afced14290 <col:14> 'const unsigned int' lvalue ParmVar 0x1afced13ff0 '_value' 'const unsigned int &'
| | |-CompoundStmt 0x1afced14368 <line:172:5, line:174:5>
| | `-AlwaysInlineAttr 0x1afced14170 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced14440 parent 0x1afcecf76c8 prev 0x1afced09d60 <col:25, ./src\Core/Container/Variant.inl:181:5> line:176:27 Variant 'void (const short &)' inline
| | |-ParmVarDecl 0x1afced143b0 <col:35, col:52> col:52 used _value 'const short &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced145d8 <line:177:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | |-CXXCtorInitializer Field 0x1afced19720 'mInt' 'i64':'long long'
| | | `-ImplicitCastExpr 0x1afced146a8 <line:178:14> 'i64':'long long' <IntegralCast>
| | |   `-ImplicitCastExpr 0x1afced14690 <col:14> 'short' <LValueToRValue>
| | |     `-DeclRefExpr 0x1afced14650 <col:14> 'const short' lvalue ParmVar 0x1afced143b0 '_value' 'const short &'
| | |-CompoundStmt 0x1afced14728 <line:179:5, line:181:5>
| | `-AlwaysInlineAttr 0x1afced14530 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced14800 parent 0x1afcecf76c8 prev 0x1afced09f80 <col:25, ./src\Core/Container/Variant.inl:188:5> line:183:27 Variant 'void (const unsigned short &)' inline
| | |-ParmVarDecl 0x1afced14770 <col:35, col:61> col:61 used _value 'const unsigned short &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced14998 <line:184:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | |-CXXCtorInitializer Field 0x1afced19720 'mInt' 'i64':'long long'
| | | `-ImplicitCastExpr 0x1afced0ea50 <line:185:14> 'i64':'long long' <IntegralCast>
| | |   `-ImplicitCastExpr 0x1afced0ea38 <col:14> 'unsigned short' <LValueToRValue>
| | |     `-DeclRefExpr 0x1afced0e9f8 <col:14> 'const unsigned short' lvalue ParmVar 0x1afced14770 '_value' 'const unsigned short &'
| | |-CompoundStmt 0x1afced0ead0 <line:186:5, line:188:5>
| | `-AlwaysInlineAttr 0x1afced148f0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced0eba8 parent 0x1afcecf76c8 prev 0x1afced0a1a0 <col:25, ./src\Core/Container/Variant.inl:195:5> line:190:27 Variant 'void (const long long &)' inline
| | |-ParmVarDecl 0x1afced0eb18 <col:35, col:56> col:56 used _value 'const long long &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced0ed40 <line:191:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | |-CXXCtorInitializer Field 0x1afced19720 'mInt' 'i64':'long long'
| | | `-ImplicitCastExpr 0x1afced0edf8 <line:192:14> 'long long' <LValueToRValue>
| | |   `-DeclRefExpr 0x1afced0edb8 <col:14> 'const long long' lvalue ParmVar 0x1afced0eb18 '_value' 'const long long &'
| | |-CompoundStmt 0x1afced0ee78 <line:193:5, line:195:5>
| | `-AlwaysInlineAttr 0x1afced0ec98 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced0ef50 parent 0x1afcecf76c8 prev 0x1afced0a3c0 <col:25, ./src\Core/Container/Variant.inl:202:5> line:197:27 Variant 'void (const unsigned long long &)' inline
| | |-ParmVarDecl 0x1afced0eec0 <col:35, col:65> col:65 used _value 'const unsigned long long &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced0f0e8 <line:198:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | |-CXXCtorInitializer Field 0x1afced19720 'mInt' 'i64':'long long'
| | | `-ImplicitCastExpr 0x1afced0f1b8 <line:199:14> 'i64':'long long' <IntegralCast>
| | |   `-ImplicitCastExpr 0x1afced0f1a0 <col:14> 'unsigned long long' <LValueToRValue>
| | |     `-DeclRefExpr 0x1afced0f160 <col:14> 'const unsigned long long' lvalue ParmVar 0x1afced0eec0 '_value' 'const unsigned long long &'
| | |-CompoundStmt 0x1afced0f238 <line:200:5, line:202:5>
| | `-AlwaysInlineAttr 0x1afced0f040 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced0f310 parent 0x1afcecf76c8 prev 0x1afced0a5e0 <col:25, ./src\Core/Container/Variant.inl:209:5> line:204:27 Variant 'void (const char &)' inline
| | |-ParmVarDecl 0x1afced0f280 <col:35, col:47> col:47 used _value 'const char &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced0f4a8 <line:205:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | |-CXXCtorInitializer Field 0x1afced19720 'mInt' 'i64':'long long'
| | | `-ImplicitCastExpr 0x1afced0f578 <line:206:14> 'i64':'long long' <IntegralCast>
| | |   `-ImplicitCastExpr 0x1afced0f560 <col:14> 'char' <LValueToRValue>
| | |     `-DeclRefExpr 0x1afced0f520 <col:14> 'const char' lvalue ParmVar 0x1afced0f280 '_value' 'const char &'
| | |-CompoundStmt 0x1afced0f5f8 <line:207:5, line:209:5>
| | `-AlwaysInlineAttr 0x1afced0f400 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced0f6d0 parent 0x1afcecf76c8 prev 0x1afced0a7d0 <col:25, ./src\Core/Container/Variant.inl:216:5> line:211:27 Variant 'void (const unsigned char &)' inline
| | |-ParmVarDecl 0x1afced0f640 <col:35, col:56> col:56 used _value 'const unsigned char &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced0f868 <line:212:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | |-CXXCtorInitializer Field 0x1afced19720 'mInt' 'i64':'long long'
| | | `-ImplicitCastExpr 0x1afced0f938 <line:213:14> 'i64':'long long' <IntegralCast>
| | |   `-ImplicitCastExpr 0x1afced0f920 <col:14> 'unsigned char' <LValueToRValue>
| | |     `-DeclRefExpr 0x1afced0f8e0 <col:14> 'const unsigned char' lvalue ParmVar 0x1afced0f640 '_value' 'const unsigned char &'
| | |-CompoundStmt 0x1afced0f9b8 <line:214:5, line:216:5>
| | `-AlwaysInlineAttr 0x1afced0f7c0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced0fa90 parent 0x1afcecf76c8 prev 0x1afced16ae0 <col:25, ./src\Core/Container/Variant.inl:223:5> line:218:27 Variant 'void (const wchar_t &)' inline
| | |-ParmVarDecl 0x1afced0fa00 <col:35, col:50> col:50 used _value 'const wchar_t &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced0fc28 <line:219:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | |-CXXCtorInitializer Field 0x1afced19720 'mInt' 'i64':'long long'
| | | `-ImplicitCastExpr 0x1afced0fcf8 <line:220:14> 'i64':'long long' <IntegralCast>
| | |   `-ImplicitCastExpr 0x1afced0fce0 <col:14> 'wchar_t' <LValueToRValue>
| | |     `-DeclRefExpr 0x1afced0fca0 <col:14> 'const wchar_t' lvalue ParmVar 0x1afced0fa00 '_value' 'const wchar_t &'
| | |-CompoundStmt 0x1afced0fd78 <line:221:5, line:223:5>
| | `-AlwaysInlineAttr 0x1afced0fb80 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced0fe50 parent 0x1afcecf76c8 prev 0x1afced16d00 <col:25, ./src\Core/Container/Variant.inl:230:5> line:225:27 Variant 'void (const char16_t &)' inline
| | |-ParmVarDecl 0x1afced0fdc0 <col:35, col:51> col:51 used _value 'const char16_t &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced0ffe8 <line:226:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | |-CXXCtorInitializer Field 0x1afced19720 'mInt' 'i64':'long long'
| | | `-ImplicitCastExpr 0x1afced100b8 <line:227:14> 'i64':'long long' <IntegralCast>
| | |   `-ImplicitCastExpr 0x1afced100a0 <col:14> 'char16_t' <LValueToRValue>
| | |     `-DeclRefExpr 0x1afced10060 <col:14> 'const char16_t' lvalue ParmVar 0x1afced0fdc0 '_value' 'const char16_t &'
| | |-CompoundStmt 0x1afced10138 <line:228:5, line:230:5>
| | `-AlwaysInlineAttr 0x1afced0ff40 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced10210 parent 0x1afcecf76c8 prev 0x1afced16f20 <col:25, ./src\Core/Container/Variant.inl:237:5> line:232:27 Variant 'void (const char32_t &)' inline
| | |-ParmVarDecl 0x1afced10180 <col:35, col:51> col:51 used _value 'const char32_t &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced103a8 <line:233:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | |-CXXCtorInitializer Field 0x1afced19720 'mInt' 'i64':'long long'
| | | `-ImplicitCastExpr 0x1afced10478 <line:234:14> 'i64':'long long' <IntegralCast>
| | |   `-ImplicitCastExpr 0x1afced10460 <col:14> 'char32_t' <LValueToRValue>
| | |     `-DeclRefExpr 0x1afced10420 <col:14> 'const char32_t' lvalue ParmVar 0x1afced10180 '_value' 'const char32_t &'
| | |-CompoundStmt 0x1afced104f8 <line:235:5, line:237:5>
| | `-AlwaysInlineAttr 0x1afced10300 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced105d0 parent 0x1afcecf76c8 prev 0x1afced17110 <col:25, ./src\Core/Container/Variant.inl:243:5> line:239:27 Variant 'void (const char *)' inline
| | |-ParmVarDecl 0x1afced10540 <col:35, col:47> col:47 used _value 'const char *'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced10768 <line:240:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08dd8 'typeString' 'Michka::Variant::Type'
| | |-CompoundStmt 0x1afced108c0 <line:241:5, line:243:5>
| | `-AlwaysInlineAttr 0x1afced106c0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced1aa30 parent 0x1afcecf76c8 prev 0x1afced17300 <col:25, ./src\Core/Container/Variant.inl:249:5> line:245:27 Variant 'void (const wchar_t *)' inline
| | |-ParmVarDecl 0x1afced10908 <col:35, col:50> col:50 used _value 'const wchar_t *'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced1abc8 <line:246:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08dd8 'typeString' 'Michka::Variant::Type'
| | |-CompoundStmt 0x1afced1ad20 <line:247:5, line:249:5>
| | `-AlwaysInlineAttr 0x1afced1ab20 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced1adf8 parent 0x1afcecf76c8 prev 0x1afced174f0 <col:25, ./src\Core/Container/Variant.inl:255:5> line:251:27 Variant 'void (const char32_t *)' inline
| | |-ParmVarDecl 0x1afced1ad68 <col:35, col:51> col:51 used _value 'const char32_t *'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced1af90 <line:252:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08dd8 'typeString' 'Michka::Variant::Type'
| | |-CompoundStmt 0x1afced1b0e8 <line:253:5, line:255:5>
| | `-AlwaysInlineAttr 0x1afced1aee8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced1b1b8 parent 0x1afcecf76c8 prev 0x1afced176d0 <col:25, ./src\Core/Container/Variant.inl:261:5> line:257:27 Variant 'void (const Michka::String &)' inline
| | |-ParmVarDecl 0x1afced1b128 <col:35, col:49> col:49 used _value 'const Michka::String &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-DeclRefExpr 0x1afced1b350 <line:258:15, col:30> 'Michka::Variant::Type' EnumConstant 0x1afced08dd8 'typeString' 'Michka::Variant::Type'
| | |-CompoundStmt 0x1afced1b4a8 <line:259:5, line:261:5>
| | `-AlwaysInlineAttr 0x1afced1b2a8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced1b6a0 parent 0x1afcecf76c8 prev 0x1afced17b20 <col:25, ./src\Core/Container/Variant.inl:266:5> line:263:27 Variant 'void (const List<Michka::Variant> &)' inline
| | |-ParmVarDecl 0x1afced1b5d8 <col:35, col:56> col:56 used _value 'const List<Michka::Variant> &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-CXXDefaultInitExpr 0x1afced1b7e8 <col:27> 'Michka::Variant::Type'
| | |-CompoundStmt 0x1afced1b9b8 <line:264:5, line:266:5>
| | | `-CXXOperatorCallExpr 0x1afced1b978 <line:265:9, col:17> 'Michka::Variant' lvalue '='
| | |   |-ImplicitCastExpr 0x1afced1b960 <col:15> 'Michka::Variant &(*)(const List<Michka::Variant> &)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x1afced1b8e0 <col:15> 'Michka::Variant &(const List<Michka::Variant> &)' lvalue CXXMethod 0x1afced163c0 'operator=' 'Michka::Variant &(const List<Michka::Variant> &)'
| | |   |-UnaryOperator 0x1afced1b848 <col:9, col:10> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |   | `-CXXThisExpr 0x1afced1b838 <col:10> 'Michka::Variant *' this
| | |   `-DeclRefExpr 0x1afced1b860 <col:17> 'const List<Michka::Variant>':'const Michka::List<Michka::Variant>' lvalue ParmVar 0x1afced1b5d8 '_value' 'const List<Michka::Variant> &'
| | `-AlwaysInlineAttr 0x1afced1b790 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afced1bc30 parent 0x1afcecf76c8 <./src\Core/Container/Variant.inl:268:5, line:269:73> col:27 invalid Variant
| | |-TemplateTypeParmDecl 0x1afced1b9d0 <line:268:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-CXXConstructorDecl 0x1afced1bb48 parent 0x1afcecf76c8 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.inl:269:73> col:27 invalid Variant 'void (const int &)' inline
| |   |-ParmVarDecl 0x1afced1bab8 <col:35, col:67> col:67 invalid _value 'const int &'
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afced1bca0 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afced1bfb8 parent 0x1afcecf76c8 prev 0x1afced18148 <./src\Core/Container/Variant.inl:274:5, line:275:50> col:27 Variant
| | |-TemplateTypeParmDecl 0x1afced1bcf8 <line:274:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-CXXConstructorDecl 0x1afced1bed0 parent 0x1afcecf76c8 prev 0x1afced180a0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.inl:275:50> col:27 Variant 'void (const T &)' inline
| |   |-ParmVarDecl 0x1afced1be00 <col:35, col:44> col:44 _value 'const T &'
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afced1c028 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afced1c3b8 parent 0x1afcecf76c8 prev 0x1afced18458 <./src\Core/Container/Variant.inl:280:5, line:281:44> col:27 Variant
| | |-TemplateTypeParmDecl 0x1afced1c0f8 <line:280:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-CXXConstructorDecl 0x1afced1c2d0 parent 0x1afcecf76c8 prev 0x1afced183b0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.inl:281:44> col:27 Variant 'void (T *)' inline
| |   |-ParmVarDecl 0x1afced1c200 <col:35, col:38> col:38 _value 'T *'
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afced1c428 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced1c5b8 parent 0x1afcecf76c8 prev 0x1afced18620 <col:25, ./src\Core/Container/Variant.inl:289:5> line:286:27 Variant 'void (const Michka::Variant &)' inline
| | |-ParmVarDecl 0x1afced1c528 <col:35, col:50> col:50 used _value 'const Michka::Variant &'
| | |-CXXCtorInitializer Field 0x1afced19598 'mType' 'Michka::Variant::Type'
| | | `-CXXDefaultInitExpr 0x1afced1c700 <col:27> 'Michka::Variant::Type'
| | |-CompoundStmt 0x1afced1c878 <line:287:5, line:289:5>
| | | `-CXXOperatorCallExpr 0x1afced1c838 <line:288:9, col:17> 'Michka::Variant' lvalue '='
| | |   |-ImplicitCastExpr 0x1afced1c820 <col:15> 'Michka::Variant &(*)(const Michka::Variant &)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x1afced1c7c8 <col:15> 'Michka::Variant &(const Michka::Variant &)' lvalue CXXMethod 0x1afced18f00 'operator=' 'Michka::Variant &(const Michka::Variant &)'
| | |   |-UnaryOperator 0x1afced1c760 <col:9, col:10> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |   | `-CXXThisExpr 0x1afced1c750 <col:10> 'Michka::Variant *' this
| | |   `-DeclRefExpr 0x1afced1c778 <col:17> 'const Michka::Variant' lvalue ParmVar 0x1afced1c528 '_value' 'const Michka::Variant &'
| | `-AlwaysInlineAttr 0x1afced1c6a8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXDestructorDecl 0x1afced1c8e0 parent 0x1afcecf76c8 prev 0x1afced18770 <col:25, ./src\Core/Container/Variant.inl:294:5> line:291:28 ~Variant 'void () noexcept' inline
| | |-CompoundStmt 0x1afced1ebc8 <line:292:5, line:294:5>
| | | `-CXXMemberCallExpr 0x1afced1eba8 <line:293:9, col:17> 'Michka::Variant' lvalue
| | |   `-MemberExpr 0x1afced1eb78 <col:9> '<bound member function type>' ->destroy 0x1afced18960
| | |     `-CXXThisExpr 0x1afced1eb68 <col:9> 'Michka::Variant *' implicit this
| | `-AlwaysInlineAttr 0x1afced1ca08 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced1ec08 parent 0x1afcecf76c8 prev 0x1afced18960 <col:25, ./src\Core/Container/Variant.inl:313:5> line:296:36 used destroy 'Michka::Variant &()' inline
| | |-CompoundStmt 0x1afced1fc98 <line:297:5, line:313:5>
| | | |-SwitchStmt 0x1afced1ede8 <line:298:9, line:309:9>
| | | | |-ImplicitCastExpr 0x1afced1edd0 <line:298:17> 'Michka::Variant::Type' <LValueToRValue>
| | | | | `-MemberExpr 0x1afced1eda0 <col:17> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | |   `-CXXThisExpr 0x1afced1ed90 <col:17> 'Michka::Variant *' implicit this
| | | | `-CompoundStmt 0x1afced1f270 <line:299:9, line:309:9>
| | | |   |-CaseStmt 0x1afced1ee90 <line:300:13, line:301:24>
| | | |   | |-ConstantExpr 0x1afced1ee70 <line:300:18, col:24> 'Michka::Variant::Type'
| | | |   | | |-value: Int 4
| | | |   | | `-DeclRefExpr 0x1afced1ee40 <col:18, col:24> 'Michka::Variant::Type' EnumConstant 0x1afced08dd8 'typeString' 'Michka::Variant::Type'
| | | |   | `-CXXDeleteExpr 0x1afced1ef58 <line:301:17, col:24> 'void' Function 0x1afcecf5118 'operator delete' 'void (void *) noexcept'
| | | |   |   `-ImplicitCastExpr 0x1afced1ef40 <col:24> 'Michka::String *' <LValueToRValue>
| | | |   |     `-MemberExpr 0x1afced1ef10 <col:24> 'Michka::String *' lvalue .mString 0x1afced199d0
| | | |   |       `-MemberExpr 0x1afced1eec8 <col:24> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | |   |         `-CXXThisExpr 0x1afced1eeb8 <col:24> 'Michka::Variant *' implicit this
| | | |   |-BreakStmt 0x1afced1ef78 <line:302:17>
| | | |   |-CaseStmt 0x1afced1f008 <line:303:13, line:304:24>
| | | |   | |-ConstantExpr 0x1afced1efe8 <line:303:18, col:24> 'Michka::Variant::Type'
| | | |   | | |-value: Int 5
| | | |   | | `-DeclRefExpr 0x1afced1efb8 <col:18, col:24> 'Michka::Variant::Type' EnumConstant 0x1afced08e30 'typeArray' 'Michka::Variant::Type'
| | | |   | `-CXXDeleteExpr 0x1afced1f0d0 <line:304:17, col:24> 'void' Function 0x1afcecf5118 'operator delete' 'void (void *) noexcept'
| | | |   |   `-ImplicitCastExpr 0x1afced1f0b8 <col:24> 'List<Michka::Variant> *' <LValueToRValue>
| | | |   |     `-MemberExpr 0x1afced1f088 <col:24> 'List<Michka::Variant> *' lvalue .mList 0x1afced19b58
| | | |   |       `-MemberExpr 0x1afced1f040 <col:24> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | |   |         `-CXXThisExpr 0x1afced1f030 <col:24> 'Michka::Variant *' implicit this
| | | |   |-BreakStmt 0x1afced1f0f0 <line:305:17>
| | | |   |-CaseStmt 0x1afced1f180 <line:306:13, line:307:24>
| | | |   | |-ConstantExpr 0x1afced1f160 <line:306:18, col:24> 'Michka::Variant::Type'
| | | |   | | |-value: Int 7
| | | |   | | `-DeclRefExpr 0x1afced1f130 <col:18, col:24> 'Michka::Variant::Type' EnumConstant 0x1afced08ee0 'typeCustom' 'Michka::Variant::Type'
| | | |   | `-CXXDeleteExpr 0x1afced1f248 <line:307:17, col:24> 'void' Function 0x1afcecf5118 'operator delete' 'void (void *) noexcept'
| | | |   |   `-ImplicitCastExpr 0x1afced1f230 <col:24> 'Private::CustomVariantBase *' <LValueToRValue>
| | | |   |     `-MemberExpr 0x1afced1f200 <col:24> 'Private::CustomVariantBase *' lvalue .mCustom 0x1afced19c98
| | | |   |       `-MemberExpr 0x1afced1f1b8 <col:24> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | |   |         `-CXXThisExpr 0x1afced1f1a8 <col:24> 'Michka::Variant *' implicit this
| | | |   `-BreakStmt 0x1afced1f268 <line:308:17>
| | | |-BinaryOperator 0x1afced1f378 <line:310:9, col:16> 'i64':'long long' lvalue '='
| | | | |-MemberExpr 0x1afced1f308 <col:9> 'i64':'long long' lvalue .mInt 0x1afced19720
| | | | | `-MemberExpr 0x1afced1f2c0 <col:9> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | | |   `-CXXThisExpr 0x1afced1f2b0 <col:9> 'Michka::Variant *' implicit this
| | | | `-ImplicitCastExpr 0x1afced1f360 <col:16> 'i64':'long long' <IntegralCast>
| | | |   `-IntegerLiteral 0x1afced1f338 <col:16> 'int' 0
| | | |-BinaryOperator 0x1afced1fc40 <line:311:9, col:32> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced1f3a8 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced1f398 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced1f428 <col:17, col:32> 'Michka::Variant::Type' EnumConstant 0x1afced08c78 'typeNull' 'Michka::Variant::Type'
| | | `-ReturnStmt 0x1afced1fc88 <line:312:9, col:17>
| | |   `-UnaryOperator 0x1afced1fc70 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced1fc60 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced1ecf8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced1fdb0 parent 0x1afcecf76c8 prev 0x1afced0cad0 <col:25, ./src\Core/Container/Variant.inl:318:5> line:315:41 getType 'Variant::Type () const' inline
| | |-CompoundStmt 0x1afced1ff60 <line:316:5, line:318:5>
| | | `-ReturnStmt 0x1afced1ff50 <line:317:9, col:16>
| | |   `-ImplicitCastExpr 0x1afced1ff38 <col:16> 'Michka::Variant::Type' <LValueToRValue>
| | |     `-MemberExpr 0x1afced1ff08 <col:16> 'const Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | |       `-CXXThisExpr 0x1afced1fef8 <col:16> 'const Michka::Variant *' implicit this
| | `-AlwaysInlineAttr 0x1afced1fea0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced20020 parent 0x1afcecf76c8 prev 0x1afced0cd10 <col:25, ./src\Core/Container/Variant.inl:323:5> line:320:32 is 'bool (const Michka::Variant::Type &) const' inline
| | |-ParmVarDecl 0x1afced1ff90 <col:35, col:47> col:47 used _type 'const Michka::Variant::Type &'
| | |-CompoundStmt 0x1afced20230 <line:321:5, line:323:5>
| | | `-ReturnStmt 0x1afced20220 <line:322:9, col:25>
| | |   `-BinaryOperator 0x1afced20200 <col:16, col:25> 'bool' '=='
| | |     |-ImplicitCastExpr 0x1afced201d0 <col:16> 'Michka::Variant::Type' <LValueToRValue>
| | |     | `-MemberExpr 0x1afced20180 <col:16> 'const Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | |     |   `-CXXThisExpr 0x1afced20170 <col:16> 'const Michka::Variant *' implicit this
| | |     `-ImplicitCastExpr 0x1afced201e8 <col:25> 'Michka::Variant::Type' <LValueToRValue>
| | |       `-DeclRefExpr 0x1afced201b0 <col:25> 'const Michka::Variant::Type' lvalue ParmVar 0x1afced1ff90 '_type' 'const Michka::Variant::Type &'
| | `-AlwaysInlineAttr 0x1afced20118 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced20270 parent 0x1afcecf76c8 prev 0x1afced0ce60 <col:25, ./src\Core/Container/Variant.inl:328:5> line:325:32 isNull 'bool () const' inline
| | |-CompoundStmt 0x1afced204a8 <line:326:5, line:328:5>
| | | `-ReturnStmt 0x1afced20498 <line:327:9, col:31>
| | |   `-BinaryOperator 0x1afced20478 <col:16, col:31> 'bool' '=='
| | |     |-ImplicitCastExpr 0x1afced20460 <col:16> 'Michka::Variant::Type' <LValueToRValue>
| | |     | `-MemberExpr 0x1afced203c8 <col:16> 'const Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | |     |   `-CXXThisExpr 0x1afced203b8 <col:16> 'const Michka::Variant *' implicit this
| | |     `-DeclRefExpr 0x1afced20430 <col:25, col:31> 'Michka::Variant::Type' EnumConstant 0x1afced08c78 'typeNull' 'Michka::Variant::Type'
| | `-AlwaysInlineAttr 0x1afced20360 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced204e8 parent 0x1afcecf76c8 prev 0x1afced0cfa8 <col:25, ./src\Core/Container/Variant.inl:333:5> line:330:32 isBool 'bool () const' inline
| | |-CompoundStmt 0x1afced20720 <line:331:5, line:333:5>
| | | `-ReturnStmt 0x1afced20710 <line:332:9, col:31>
| | |   `-BinaryOperator 0x1afced206f0 <col:16, col:31> 'bool' '=='
| | |     |-ImplicitCastExpr 0x1afced206d8 <col:16> 'Michka::Variant::Type' <LValueToRValue>
| | |     | `-MemberExpr 0x1afced20640 <col:16> 'const Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | |     |   `-CXXThisExpr 0x1afced20630 <col:16> 'const Michka::Variant *' implicit this
| | |     `-DeclRefExpr 0x1afced206a8 <col:25, col:31> 'Michka::Variant::Type' EnumConstant 0x1afced08cd0 'typeBool' 'Michka::Variant::Type'
| | `-AlwaysInlineAttr 0x1afced205d8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced20760 parent 0x1afcecf76c8 prev 0x1afced0d0f0 <col:25, ./src\Core/Container/Variant.inl:338:5> line:335:32 isInt 'bool () const' inline
| | |-CompoundStmt 0x1afced20998 <line:336:5, line:338:5>
| | | `-ReturnStmt 0x1afced20988 <line:337:9, col:31>
| | |   `-BinaryOperator 0x1afced20968 <col:16, col:31> 'bool' '=='
| | |     |-ImplicitCastExpr 0x1afced20950 <col:16> 'Michka::Variant::Type' <LValueToRValue>
| | |     | `-MemberExpr 0x1afced208b8 <col:16> 'const Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | |     |   `-CXXThisExpr 0x1afced208a8 <col:16> 'const Michka::Variant *' implicit this
| | |     `-DeclRefExpr 0x1afced20920 <col:25, col:31> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | `-AlwaysInlineAttr 0x1afced20850 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced1ca40 parent 0x1afcecf76c8 prev 0x1afced0d238 <col:25, ./src\Core/Container/Variant.inl:343:5> line:340:32 isFloat 'bool () const' inline
| | |-CompoundStmt 0x1afced1cc78 <line:341:5, line:343:5>
| | | `-ReturnStmt 0x1afced1cc68 <line:342:9, col:31>
| | |   `-BinaryOperator 0x1afced1cc48 <col:16, col:31> 'bool' '=='
| | |     |-ImplicitCastExpr 0x1afced1cc30 <col:16> 'Michka::Variant::Type' <LValueToRValue>
| | |     | `-MemberExpr 0x1afced1cb98 <col:16> 'const Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | |     |   `-CXXThisExpr 0x1afced1cb88 <col:16> 'const Michka::Variant *' implicit this
| | |     `-DeclRefExpr 0x1afced1cc00 <col:25, col:31> 'Michka::Variant::Type' EnumConstant 0x1afced08d80 'typeFloat' 'Michka::Variant::Type'
| | `-AlwaysInlineAttr 0x1afced1cb30 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced1ccb8 parent 0x1afcecf76c8 prev 0x1afced0d380 <col:25, ./src\Core/Container/Variant.inl:348:5> line:345:32 isString 'bool () const' inline
| | |-CompoundStmt 0x1afced1cef0 <line:346:5, line:348:5>
| | | `-ReturnStmt 0x1afced1cee0 <line:347:9, col:31>
| | |   `-BinaryOperator 0x1afced1cec0 <col:16, col:31> 'bool' '=='
| | |     |-ImplicitCastExpr 0x1afced1cea8 <col:16> 'Michka::Variant::Type' <LValueToRValue>
| | |     | `-MemberExpr 0x1afced1ce10 <col:16> 'const Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | |     |   `-CXXThisExpr 0x1afced1ce00 <col:16> 'const Michka::Variant *' implicit this
| | |     `-DeclRefExpr 0x1afced1ce78 <col:25, col:31> 'Michka::Variant::Type' EnumConstant 0x1afced08dd8 'typeString' 'Michka::Variant::Type'
| | `-AlwaysInlineAttr 0x1afced1cda8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced1cf30 parent 0x1afcecf76c8 prev 0x1afced0d4c8 <col:25, ./src\Core/Container/Variant.inl:353:5> line:350:32 isArray 'bool () const' inline
| | |-CompoundStmt 0x1afced1d168 <line:351:5, line:353:5>
| | | `-ReturnStmt 0x1afced1d158 <line:352:9, col:31>
| | |   `-BinaryOperator 0x1afced1d138 <col:16, col:31> 'bool' '=='
| | |     |-ImplicitCastExpr 0x1afced1d120 <col:16> 'Michka::Variant::Type' <LValueToRValue>
| | |     | `-MemberExpr 0x1afced1d088 <col:16> 'const Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | |     |   `-CXXThisExpr 0x1afced1d078 <col:16> 'const Michka::Variant *' implicit this
| | |     `-DeclRefExpr 0x1afced1d0f0 <col:25, col:31> 'Michka::Variant::Type' EnumConstant 0x1afced08e30 'typeArray' 'Michka::Variant::Type'
| | `-AlwaysInlineAttr 0x1afced1d020 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced1d1a8 parent 0x1afcecf76c8 prev 0x1afced0d610 <col:25, ./src\Core/Container/Variant.inl:358:5> line:355:32 isReference 'bool () const' inline
| | |-CompoundStmt 0x1afced1d3e0 <line:356:5, line:358:5>
| | | `-ReturnStmt 0x1afced1d3d0 <line:357:9, col:31>
| | |   `-BinaryOperator 0x1afced1d3b0 <col:16, col:31> 'bool' '=='
| | |     |-ImplicitCastExpr 0x1afced1d398 <col:16> 'Michka::Variant::Type' <LValueToRValue>
| | |     | `-MemberExpr 0x1afced1d300 <col:16> 'const Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | |     |   `-CXXThisExpr 0x1afced1d2f0 <col:16> 'const Michka::Variant *' implicit this
| | |     `-DeclRefExpr 0x1afced1d368 <col:25, col:31> 'Michka::Variant::Type' EnumConstant 0x1afced08e88 'typeReference' 'Michka::Variant::Type'
| | `-AlwaysInlineAttr 0x1afced1d298 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced1d420 parent 0x1afcecf76c8 prev 0x1afced0d758 <col:25, ./src\Core/Container/Variant.inl:363:5> line:360:32 isCustom 'bool () const' inline
| | |-CompoundStmt 0x1afced1d658 <line:361:5, line:363:5>
| | | `-ReturnStmt 0x1afced1d648 <line:362:9, col:31>
| | |   `-BinaryOperator 0x1afced1d628 <col:16, col:31> 'bool' '=='
| | |     |-ImplicitCastExpr 0x1afced1d610 <col:16> 'Michka::Variant::Type' <LValueToRValue>
| | |     | `-MemberExpr 0x1afced1d578 <col:16> 'const Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | |     |   `-CXXThisExpr 0x1afced1d568 <col:16> 'const Michka::Variant *' implicit this
| | |     `-DeclRefExpr 0x1afced1d5e0 <col:25, col:31> 'Michka::Variant::Type' EnumConstant 0x1afced08ee0 'typeCustom' 'Michka::Variant::Type'
| | `-AlwaysInlineAttr 0x1afced1d510 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afced1d828 parent 0x1afcecf76c8 prev 0x1afced0d9e0 <./src\Core/Container/Variant.inl:365:5, line:366:37> col:19 isConvertibleTo
| | |-TemplateTypeParmDecl 0x1afced1d670 <line:365:14, col:23> col:23 typename depth 0 index 0 T
| | `-CXXMethodDecl 0x1afced1d738 parent 0x1afcecf76c8 prev 0x1afced0d940 <line:366:5, col:37> col:19 isConvertibleTo 'bool () const'
| |   `-<<<NULL>>>
| |-FunctionTemplateDecl 0x1afced1db30 parent 0x1afcecf76c8 prev 0x1afced0dc00 <line:394:5, line:395:21> col:16 to
| | |-TemplateTypeParmDecl 0x1afced1d938 <line:394:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-CXXMethodDecl 0x1afced1da40 parent 0x1afcecf76c8 prev 0x1afced0db60 <line:395:5, col:21> col:16 to 'T () const'
| |   `-<<<NULL>>>
| |-CXXMethodDecl 0x1afced1ddb0 parent 0x1afcecf76c8 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.inl:493:5> line:489:36 invalid operator= 'Michka::Variant &(const int &)' inline
| | |-ParmVarDecl 0x1afced1dd20 <col:48, col:70> col:70 invalid _value 'const int &'
| | |-CompoundStmt 0x1afced1df98 <line:490:5, line:493:5>
| | | |-CXXMemberCallExpr 0x1afced1df40 <line:491:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced1df10 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced1df00 <col:9> 'Michka::Variant *' implicit this
| | | `-ReturnStmt 0x1afced1df88 <line:492:9, col:17>
| | |   `-UnaryOperator 0x1afced1df70 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced1df60 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced1dea8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced1e068 parent 0x1afcecf76c8 prev 0x1afced0e010 <col:25, ./src\Core/Container/Variant.inl:502:5> line:495:36 operator= 'Michka::Variant &(const float &)' inline
| | |-ParmVarDecl 0x1afced1dfd8 <col:48, col:61> col:61 used _value 'const float &'
| | |-CompoundStmt 0x1afced1e410 <line:496:5, line:502:5>
| | | |-CXXMemberCallExpr 0x1afced1e1f8 <line:497:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced1e1c8 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced1e1b8 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced1e2c0 <line:498:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced1e228 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced1e218 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced1e290 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08d80 'typeFloat' 'Michka::Variant::Type'
| | | |-BinaryOperator 0x1afced1e3b8 <line:499:9, col:18> 'double' lvalue '='
| | | | |-MemberExpr 0x1afced1e338 <col:9> 'double' lvalue .mFloat 0x1afced19790
| | | | | `-MemberExpr 0x1afced1e2f0 <col:9> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | | |   `-CXXThisExpr 0x1afced1e2e0 <col:9> 'Michka::Variant *' implicit this
| | | | `-ImplicitCastExpr 0x1afced1e3a0 <col:18> 'double' <FloatingCast>
| | | |   `-ImplicitCastExpr 0x1afced1e388 <col:18> 'float' <LValueToRValue>
| | | |     `-DeclRefExpr 0x1afced1e368 <col:18> 'const float' lvalue ParmVar 0x1afced1dfd8 '_value' 'const float &'
| | | `-ReturnStmt 0x1afced1e400 <line:501:9, col:17>
| | |   `-UnaryOperator 0x1afced1e3e8 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced1e3d8 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced1e160 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced1e4f0 parent 0x1afcecf76c8 prev 0x1afced0e1f0 <col:25, ./src\Core/Container/Variant.inl:511:5> line:504:36 operator= 'Michka::Variant &(const double &)' inline
| | |-ParmVarDecl 0x1afced1e460 <col:48, col:62> col:62 used _value 'const double &'
| | |-CompoundStmt 0x1afced1e880 <line:505:5, line:511:5>
| | | |-CXXMemberCallExpr 0x1afced1e680 <line:506:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced1e650 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced1e640 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced1e748 <line:507:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced1e6b0 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced1e6a0 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced1e718 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08d80 'typeFloat' 'Michka::Variant::Type'
| | | |-BinaryOperator 0x1afced1e828 <line:508:9, col:18> 'double' lvalue '='
| | | | |-MemberExpr 0x1afced1e7c0 <col:9> 'double' lvalue .mFloat 0x1afced19790
| | | | | `-MemberExpr 0x1afced1e778 <col:9> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | | |   `-CXXThisExpr 0x1afced1e768 <col:9> 'Michka::Variant *' implicit this
| | | | `-ImplicitCastExpr 0x1afced1e810 <col:18> 'double' <LValueToRValue>
| | | |   `-DeclRefExpr 0x1afced1e7f0 <col:18> 'const double' lvalue ParmVar 0x1afced1e460 '_value' 'const double &'
| | | `-ReturnStmt 0x1afced1e870 <line:510:9, col:17>
| | |   `-UnaryOperator 0x1afced1e858 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced1e848 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced1e5e8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced1e960 parent 0x1afcecf76c8 prev 0x1afced0e3d0 <col:25, ./src\Core/Container/Variant.inl:520:5> line:513:36 operator= 'Michka::Variant &(const bool &)' inline
| | |-ParmVarDecl 0x1afced1e8d0 <col:48, col:60> col:60 used _value 'const bool &'
| | |-CompoundStmt 0x1afced10cc8 <line:514:5, line:520:5>
| | | |-CXXMemberCallExpr 0x1afced10ab0 <line:515:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced10a80 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced10a70 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced10b78 <line:516:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced10ae0 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced10ad0 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced10b48 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08cd0 'typeBool' 'Michka::Variant::Type'
| | | |-BinaryOperator 0x1afced10c70 <line:517:9, col:16> 'i64':'long long' lvalue '='
| | | | |-MemberExpr 0x1afced10bf0 <col:9> 'i64':'long long' lvalue .mInt 0x1afced19720
| | | | | `-MemberExpr 0x1afced10ba8 <col:9> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | | |   `-CXXThisExpr 0x1afced10b98 <col:9> 'Michka::Variant *' implicit this
| | | | `-ImplicitCastExpr 0x1afced10c58 <col:16> 'i64':'long long' <IntegralCast>
| | | |   `-ImplicitCastExpr 0x1afced10c40 <col:16> 'bool' <LValueToRValue>
| | | |     `-DeclRefExpr 0x1afced10c20 <col:16> 'const bool' lvalue ParmVar 0x1afced1e8d0 '_value' 'const bool &'
| | | `-ReturnStmt 0x1afced10cb8 <line:519:9, col:17>
| | |   `-UnaryOperator 0x1afced10ca0 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced10c90 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced10a18 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced10da8 parent 0x1afcecf76c8 prev 0x1afced0e578 <col:25, ./src\Core/Container/Variant.inl:529:5> line:522:36 operator= 'Michka::Variant &(const int &)' inline
| | |-ParmVarDecl 0x1afced10d18 <col:48, col:59> col:59 used _value 'const int &'
| | |-CompoundStmt 0x1afced11150 <line:523:5, line:529:5>
| | | |-CXXMemberCallExpr 0x1afced10f38 <line:524:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced10f08 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced10ef8 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced11000 <line:525:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced10f68 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced10f58 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced10fd0 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | | |-BinaryOperator 0x1afced110f8 <line:526:9, col:16> 'i64':'long long' lvalue '='
| | | | |-MemberExpr 0x1afced11078 <col:9> 'i64':'long long' lvalue .mInt 0x1afced19720
| | | | | `-MemberExpr 0x1afced11030 <col:9> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | | |   `-CXXThisExpr 0x1afced11020 <col:9> 'Michka::Variant *' implicit this
| | | | `-ImplicitCastExpr 0x1afced110e0 <col:16> 'i64':'long long' <IntegralCast>
| | | |   `-ImplicitCastExpr 0x1afced110c8 <col:16> 'int' <LValueToRValue>
| | | |     `-DeclRefExpr 0x1afced110a8 <col:16> 'const int' lvalue ParmVar 0x1afced10d18 '_value' 'const int &'
| | | `-ReturnStmt 0x1afced11140 <line:528:9, col:17>
| | |   `-UnaryOperator 0x1afced11128 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced11118 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced10ea0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced11230 parent 0x1afcecf76c8 prev 0x1afced0e760 <col:25, ./src\Core/Container/Variant.inl:538:5> line:531:36 operator= 'Michka::Variant &(const unsigned int &)' inline
| | |-ParmVarDecl 0x1afced111a0 <col:48, col:68> col:68 used _value 'const unsigned int &'
| | |-CompoundStmt 0x1afced115d8 <line:532:5, line:538:5>
| | | |-CXXMemberCallExpr 0x1afced113c0 <line:533:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced11390 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced11380 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced11488 <line:534:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced113f0 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced113e0 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced11458 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | | |-BinaryOperator 0x1afced11580 <line:535:9, col:16> 'i64':'long long' lvalue '='
| | | | |-MemberExpr 0x1afced11500 <col:9> 'i64':'long long' lvalue .mInt 0x1afced19720
| | | | | `-MemberExpr 0x1afced114b8 <col:9> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | | |   `-CXXThisExpr 0x1afced114a8 <col:9> 'Michka::Variant *' implicit this
| | | | `-ImplicitCastExpr 0x1afced11568 <col:16> 'i64':'long long' <IntegralCast>
| | | |   `-ImplicitCastExpr 0x1afced11550 <col:16> 'unsigned int' <LValueToRValue>
| | | |     `-DeclRefExpr 0x1afced11530 <col:16> 'const unsigned int' lvalue ParmVar 0x1afced111a0 '_value' 'const unsigned int &'
| | | `-ReturnStmt 0x1afced115c8 <line:537:9, col:17>
| | |   `-UnaryOperator 0x1afced115b0 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced115a0 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced11328 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced116b8 parent 0x1afcecf76c8 prev 0x1afced14a00 <col:25, ./src\Core/Container/Variant.inl:547:5> line:540:36 operator= 'Michka::Variant &(const short &)' inline
| | |-ParmVarDecl 0x1afced11628 <col:48, col:65> col:65 used _value 'const short &'
| | |-CompoundStmt 0x1afced11a60 <line:541:5, line:547:5>
| | | |-CXXMemberCallExpr 0x1afced11848 <line:542:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced11818 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced11808 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced11910 <line:543:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced11878 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced11868 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced118e0 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | | |-BinaryOperator 0x1afced11a08 <line:544:9, col:16> 'i64':'long long' lvalue '='
| | | | |-MemberExpr 0x1afced11988 <col:9> 'i64':'long long' lvalue .mInt 0x1afced19720
| | | | | `-MemberExpr 0x1afced11940 <col:9> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | | |   `-CXXThisExpr 0x1afced11930 <col:9> 'Michka::Variant *' implicit this
| | | | `-ImplicitCastExpr 0x1afced119f0 <col:16> 'i64':'long long' <IntegralCast>
| | | |   `-ImplicitCastExpr 0x1afced119d8 <col:16> 'short' <LValueToRValue>
| | | |     `-DeclRefExpr 0x1afced119b8 <col:16> 'const short' lvalue ParmVar 0x1afced11628 '_value' 'const short &'
| | | `-ReturnStmt 0x1afced11a50 <line:546:9, col:17>
| | |   `-UnaryOperator 0x1afced11a38 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced11a28 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced117b0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced11b40 parent 0x1afcecf76c8 prev 0x1afced14be0 <col:25, ./src\Core/Container/Variant.inl:556:5> line:549:36 operator= 'Michka::Variant &(const unsigned short &)' inline
| | |-ParmVarDecl 0x1afced11ab0 <col:48, col:74> col:74 used _value 'const unsigned short &'
| | |-CompoundStmt 0x1afced11ee8 <line:550:5, line:556:5>
| | | |-CXXMemberCallExpr 0x1afced11cd0 <line:551:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced11ca0 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced11c90 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced11d98 <line:552:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced11d00 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced11cf0 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced11d68 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | | |-BinaryOperator 0x1afced11e90 <line:553:9, col:16> 'i64':'long long' lvalue '='
| | | | |-MemberExpr 0x1afced11e10 <col:9> 'i64':'long long' lvalue .mInt 0x1afced19720
| | | | | `-MemberExpr 0x1afced11dc8 <col:9> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | | |   `-CXXThisExpr 0x1afced11db8 <col:9> 'Michka::Variant *' implicit this
| | | | `-ImplicitCastExpr 0x1afced11e78 <col:16> 'i64':'long long' <IntegralCast>
| | | |   `-ImplicitCastExpr 0x1afced11e60 <col:16> 'unsigned short' <LValueToRValue>
| | | |     `-DeclRefExpr 0x1afced11e40 <col:16> 'const unsigned short' lvalue ParmVar 0x1afced11ab0 '_value' 'const unsigned short &'
| | | `-ReturnStmt 0x1afced11ed8 <line:555:9, col:17>
| | |   `-UnaryOperator 0x1afced11ec0 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced11eb0 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced11c38 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced11fc8 parent 0x1afcecf76c8 prev 0x1afced14dc0 <col:25, ./src\Core/Container/Variant.inl:565:5> line:558:36 operator= 'Michka::Variant &(const long long &)' inline
| | |-ParmVarDecl 0x1afced11f38 <col:48, col:69> col:69 used _value 'const long long &'
| | |-CompoundStmt 0x1afced12358 <line:559:5, line:565:5>
| | | |-CXXMemberCallExpr 0x1afced12158 <line:560:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced12128 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced12118 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced12220 <line:561:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced12188 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced12178 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced121f0 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | | |-BinaryOperator 0x1afced12300 <line:562:9, col:16> 'i64':'long long' lvalue '='
| | | | |-MemberExpr 0x1afced12298 <col:9> 'i64':'long long' lvalue .mInt 0x1afced19720
| | | | | `-MemberExpr 0x1afced12250 <col:9> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | | |   `-CXXThisExpr 0x1afced12240 <col:9> 'Michka::Variant *' implicit this
| | | | `-ImplicitCastExpr 0x1afced122e8 <col:16> 'long long' <LValueToRValue>
| | | |   `-DeclRefExpr 0x1afced122c8 <col:16> 'const long long' lvalue ParmVar 0x1afced11f38 '_value' 'const long long &'
| | | `-ReturnStmt 0x1afced12348 <line:564:9, col:17>
| | |   `-UnaryOperator 0x1afced12330 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced12320 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced120c0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced12438 parent 0x1afcecf76c8 prev 0x1afced14fa0 <col:25, ./src\Core/Container/Variant.inl:574:5> line:567:36 operator= 'Michka::Variant &(const unsigned long long &)' inline
| | |-ParmVarDecl 0x1afced123a8 <col:48, col:78> col:78 used _value 'const unsigned long long &'
| | |-CompoundStmt 0x1afced127e0 <line:568:5, line:574:5>
| | | |-CXXMemberCallExpr 0x1afced125c8 <line:569:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced12598 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced12588 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced12690 <line:570:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced125f8 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced125e8 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced12660 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | | |-BinaryOperator 0x1afced12788 <line:571:9, col:16> 'i64':'long long' lvalue '='
| | | | |-MemberExpr 0x1afced12708 <col:9> 'i64':'long long' lvalue .mInt 0x1afced19720
| | | | | `-MemberExpr 0x1afced126c0 <col:9> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | | |   `-CXXThisExpr 0x1afced126b0 <col:9> 'Michka::Variant *' implicit this
| | | | `-ImplicitCastExpr 0x1afced12770 <col:16> 'i64':'long long' <IntegralCast>
| | | |   `-ImplicitCastExpr 0x1afced12758 <col:16> 'unsigned long long' <LValueToRValue>
| | | |     `-DeclRefExpr 0x1afced12738 <col:16> 'const unsigned long long' lvalue ParmVar 0x1afced123a8 '_value' 'const unsigned long long &'
| | | `-ReturnStmt 0x1afced127d0 <line:573:9, col:17>
| | |   `-UnaryOperator 0x1afced127b8 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced127a8 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced12530 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced128c0 parent 0x1afcecf76c8 prev 0x1afced15180 <col:25, ./src\Core/Container/Variant.inl:583:5> line:576:36 operator= 'Michka::Variant &(const char &)' inline
| | |-ParmVarDecl 0x1afced12830 <col:48, col:60> col:60 used _value 'const char &'
| | |-CompoundStmt 0x1afced26d18 <line:577:5, line:583:5>
| | | |-CXXMemberCallExpr 0x1afced26b00 <line:578:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced26ad0 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced26ac0 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced26bc8 <line:579:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced26b30 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced26b20 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced26b98 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | | |-BinaryOperator 0x1afced26cc0 <line:580:9, col:16> 'i64':'long long' lvalue '='
| | | | |-MemberExpr 0x1afced26c40 <col:9> 'i64':'long long' lvalue .mInt 0x1afced19720
| | | | | `-MemberExpr 0x1afced26bf8 <col:9> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | | |   `-CXXThisExpr 0x1afced26be8 <col:9> 'Michka::Variant *' implicit this
| | | | `-ImplicitCastExpr 0x1afced26ca8 <col:16> 'i64':'long long' <IntegralCast>
| | | |   `-ImplicitCastExpr 0x1afced26c90 <col:16> 'char' <LValueToRValue>
| | | |     `-DeclRefExpr 0x1afced26c70 <col:16> 'const char' lvalue ParmVar 0x1afced12830 '_value' 'const char &'
| | | `-ReturnStmt 0x1afced26d08 <line:582:9, col:17>
| | |   `-UnaryOperator 0x1afced26cf0 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced26ce0 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced129b8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced26df8 parent 0x1afcecf76c8 prev 0x1afced15360 <col:25, ./src\Core/Container/Variant.inl:592:5> line:585:36 operator= 'Michka::Variant &(const unsigned char &)' inline
| | |-ParmVarDecl 0x1afced26d68 <col:48, col:69> col:69 used _value 'const unsigned char &'
| | |-CompoundStmt 0x1afced271a0 <line:586:5, line:592:5>
| | | |-CXXMemberCallExpr 0x1afced26f88 <line:587:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced26f58 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced26f48 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced27050 <line:588:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced26fb8 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced26fa8 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced27020 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | | |-BinaryOperator 0x1afced27148 <line:589:9, col:16> 'i64':'long long' lvalue '='
| | | | |-MemberExpr 0x1afced270c8 <col:9> 'i64':'long long' lvalue .mInt 0x1afced19720
| | | | | `-MemberExpr 0x1afced27080 <col:9> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | | |   `-CXXThisExpr 0x1afced27070 <col:9> 'Michka::Variant *' implicit this
| | | | `-ImplicitCastExpr 0x1afced27130 <col:16> 'i64':'long long' <IntegralCast>
| | | |   `-ImplicitCastExpr 0x1afced27118 <col:16> 'unsigned char' <LValueToRValue>
| | | |     `-DeclRefExpr 0x1afced270f8 <col:16> 'const unsigned char' lvalue ParmVar 0x1afced26d68 '_value' 'const unsigned char &'
| | | `-ReturnStmt 0x1afced27190 <line:591:9, col:17>
| | |   `-UnaryOperator 0x1afced27178 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced27168 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced26ef0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced27280 parent 0x1afcecf76c8 prev 0x1afced15540 <col:25, ./src\Core/Container/Variant.inl:601:5> line:594:36 operator= 'Michka::Variant &(const wchar_t &)' inline
| | |-ParmVarDecl 0x1afced271f0 <col:48, col:63> col:63 used _value 'const wchar_t &'
| | |-CompoundStmt 0x1afced27628 <line:595:5, line:601:5>
| | | |-CXXMemberCallExpr 0x1afced27410 <line:596:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced273e0 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced273d0 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced274d8 <line:597:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced27440 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced27430 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced274a8 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | | |-BinaryOperator 0x1afced275d0 <line:598:9, col:16> 'i64':'long long' lvalue '='
| | | | |-MemberExpr 0x1afced27550 <col:9> 'i64':'long long' lvalue .mInt 0x1afced19720
| | | | | `-MemberExpr 0x1afced27508 <col:9> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | | |   `-CXXThisExpr 0x1afced274f8 <col:9> 'Michka::Variant *' implicit this
| | | | `-ImplicitCastExpr 0x1afced275b8 <col:16> 'i64':'long long' <IntegralCast>
| | | |   `-ImplicitCastExpr 0x1afced275a0 <col:16> 'wchar_t' <LValueToRValue>
| | | |     `-DeclRefExpr 0x1afced27580 <col:16> 'const wchar_t' lvalue ParmVar 0x1afced271f0 '_value' 'const wchar_t &'
| | | `-ReturnStmt 0x1afced27618 <line:600:9, col:17>
| | |   `-UnaryOperator 0x1afced27600 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced275f0 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced27378 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced27708 parent 0x1afcecf76c8 prev 0x1afced15720 <col:25, ./src\Core/Container/Variant.inl:610:5> line:603:36 operator= 'Michka::Variant &(const char16_t &)' inline
| | |-ParmVarDecl 0x1afced27678 <col:48, col:64> col:64 used _value 'const char16_t &'
| | |-CompoundStmt 0x1afced27ab0 <line:604:5, line:610:5>
| | | |-CXXMemberCallExpr 0x1afced27898 <line:605:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced27868 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced27858 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced27960 <line:606:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced278c8 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced278b8 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced27930 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | | |-BinaryOperator 0x1afced27a58 <line:607:9, col:16> 'i64':'long long' lvalue '='
| | | | |-MemberExpr 0x1afced279d8 <col:9> 'i64':'long long' lvalue .mInt 0x1afced19720
| | | | | `-MemberExpr 0x1afced27990 <col:9> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | | |   `-CXXThisExpr 0x1afced27980 <col:9> 'Michka::Variant *' implicit this
| | | | `-ImplicitCastExpr 0x1afced27a40 <col:16> 'i64':'long long' <IntegralCast>
| | | |   `-ImplicitCastExpr 0x1afced27a28 <col:16> 'char16_t' <LValueToRValue>
| | | |     `-DeclRefExpr 0x1afced27a08 <col:16> 'const char16_t' lvalue ParmVar 0x1afced27678 '_value' 'const char16_t &'
| | | `-ReturnStmt 0x1afced27aa0 <line:609:9, col:17>
| | |   `-UnaryOperator 0x1afced27a88 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced27a78 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced27800 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced27b90 parent 0x1afcecf76c8 prev 0x1afced15900 <col:25, ./src\Core/Container/Variant.inl:619:5> line:612:36 operator= 'Michka::Variant &(const char32_t &)' inline
| | |-ParmVarDecl 0x1afced27b00 <col:48, col:64> col:64 used _value 'const char32_t &'
| | |-CompoundStmt 0x1afced27f38 <line:613:5, line:619:5>
| | | |-CXXMemberCallExpr 0x1afced27d20 <line:614:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced27cf0 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced27ce0 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced27de8 <line:615:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced27d50 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced27d40 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced27db8 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | | |-BinaryOperator 0x1afced27ee0 <line:616:9, col:16> 'i64':'long long' lvalue '='
| | | | |-MemberExpr 0x1afced27e60 <col:9> 'i64':'long long' lvalue .mInt 0x1afced19720
| | | | | `-MemberExpr 0x1afced27e18 <col:9> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | | |   `-CXXThisExpr 0x1afced27e08 <col:9> 'Michka::Variant *' implicit this
| | | | `-ImplicitCastExpr 0x1afced27ec8 <col:16> 'i64':'long long' <IntegralCast>
| | | |   `-ImplicitCastExpr 0x1afced27eb0 <col:16> 'char32_t' <LValueToRValue>
| | | |     `-DeclRefExpr 0x1afced27e90 <col:16> 'const char32_t' lvalue ParmVar 0x1afced27b00 '_value' 'const char32_t &'
| | | `-ReturnStmt 0x1afced27f28 <line:618:9, col:17>
| | |   `-UnaryOperator 0x1afced27f10 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced27f00 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced27c88 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced28018 parent 0x1afcecf76c8 prev 0x1afced15ae0 <col:25, ./src\Core/Container/Variant.inl:628:5> line:621:36 operator= 'Michka::Variant &(const char *)' inline
| | |-ParmVarDecl 0x1afced27f88 <col:48, col:60> col:60 used _value 'const char *'
| | |-CompoundStmt 0x1afced283a0 <line:622:5, line:628:5>
| | | |-CXXMemberCallExpr 0x1afced281a8 <line:623:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced28178 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced28168 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced28270 <line:624:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced281d8 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced281c8 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced28240 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08dd8 'typeString' 'Michka::Variant::Type'
| | | `-ReturnStmt 0x1afced28390 <line:627:9, col:17>
| | |   `-UnaryOperator 0x1afced28378 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced28368 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced28110 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced28478 parent 0x1afcecf76c8 prev 0x1afced15cc0 <col:25, ./src\Core/Container/Variant.inl:637:5> line:630:36 operator= 'Michka::Variant &(const wchar_t *)' inline
| | |-ParmVarDecl 0x1afced283e8 <col:48, col:63> col:63 used _value 'const wchar_t *'
| | |-CompoundStmt 0x1afced28800 <line:631:5, line:637:5>
| | | |-CXXMemberCallExpr 0x1afced28608 <line:632:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced285d8 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced285c8 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced286d0 <line:633:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced28638 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced28628 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced286a0 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08dd8 'typeString' 'Michka::Variant::Type'
| | | `-ReturnStmt 0x1afced287f0 <line:636:9, col:17>
| | |   `-UnaryOperator 0x1afced287d8 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced287c8 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced28570 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced288d8 parent 0x1afcecf76c8 prev 0x1afced15ea0 <col:25, ./src\Core/Container/Variant.inl:646:5> line:639:36 operator= 'Michka::Variant &(const char32_t *)' inline
| | |-ParmVarDecl 0x1afced28848 <col:48, col:64> col:64 used _value 'const char32_t *'
| | |-CompoundStmt 0x1afced20c38 <line:640:5, line:646:5>
| | | |-CXXMemberCallExpr 0x1afced28a68 <line:641:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced28a38 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced28a28 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced20b08 <line:642:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced20a70 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced20a60 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced20ad8 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08dd8 'typeString' 'Michka::Variant::Type'
| | | `-ReturnStmt 0x1afced20c28 <line:645:9, col:17>
| | |   `-UnaryOperator 0x1afced20c10 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced20c00 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced289d0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced20d08 parent 0x1afcecf76c8 prev 0x1afced160c0 <col:25, ./src\Core/Container/Variant.inl:655:5> line:648:36 operator= 'Michka::Variant &(const Michka::String &)' inline
| | |-ParmVarDecl 0x1afced20c78 <col:48, col:62> col:62 used _value 'const Michka::String &'
| | |-CompoundStmt 0x1afced21090 <line:649:5, line:655:5>
| | | |-CXXMemberCallExpr 0x1afced20e98 <line:650:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced20e68 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced20e58 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced20f60 <line:651:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced20ec8 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced20eb8 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced20f30 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08dd8 'typeString' 'Michka::Variant::Type'
| | | `-ReturnStmt 0x1afced21080 <line:654:9, col:17>
| | |   `-UnaryOperator 0x1afced21068 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced21058 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced20e00 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced21280 parent 0x1afcecf76c8 prev 0x1afced163c0 <col:25, ./src\Core/Container/Variant.inl:664:5> line:657:36 used operator= 'Michka::Variant &(const List<Michka::Variant> &)' inline
| | |-ParmVarDecl 0x1afced211b8 <col:48, col:69> col:69 used _value 'const List<Michka::Variant> &'
| | |-CompoundStmt 0x1afced216b0 <line:658:5, line:664:5>
| | | |-CXXMemberCallExpr 0x1afced21410 <line:659:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced213e0 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced213d0 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced214d8 <line:660:9, col:23> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced21440 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced21430 <col:9> 'Michka::Variant *' implicit this
| | | | `-DeclRefExpr 0x1afced214a8 <col:17, col:23> 'Michka::Variant::Type' EnumConstant 0x1afced08e30 'typeArray' 'Michka::Variant::Type'
| | | `-ReturnStmt 0x1afced216a0 <line:663:9, col:17>
| | |   `-UnaryOperator 0x1afced21688 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced21678 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced21378 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afced21930 parent 0x1afcecf76c8 <./src\Core/Container/Variant.inl:666:5, line:667:86> col:36 invalid operator=
| | |-TemplateTypeParmDecl 0x1afced216d8 <line:666:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-CXXMethodDecl 0x1afced21840 parent 0x1afcecf76c8 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.inl:667:86> col:36 invalid operator= 'Michka::Variant &(const int &)' inline
| |   |-ParmVarDecl 0x1afced217b0 <col:48, col:80> col:80 invalid _value 'const int &'
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afced219a0 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afced21cb0 parent 0x1afcecf76c8 prev 0x1afced18a20 <./src\Core/Container/Variant.inl:680:5, line:681:63> col:36 operator=
| | |-TemplateTypeParmDecl 0x1afced219f8 <line:680:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-CXXMethodDecl 0x1afced21bc0 parent 0x1afcecf76c8 prev 0x1afced16960 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.inl:681:63> col:36 operator= 'Michka::Variant &(const T &)' inline
| |   |-ParmVarDecl 0x1afced21af0 <col:48, col:57> col:57 _value 'const T &'
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afced21d20 <./src\Core/Defines.h:54:25> __forceinline
| |-FunctionTemplateDecl 0x1afced220a0 parent 0x1afcecf76c8 prev 0x1afced18d70 <./src\Core/Container/Variant.inl:690:5, line:691:57> col:36 operator=
| | |-TemplateTypeParmDecl 0x1afced21df0 <line:690:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-CXXMethodDecl 0x1afced21fb0 parent 0x1afcecf76c8 prev 0x1afced18cd0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Variant.inl:691:57> col:36 operator= 'Michka::Variant &(T *)' inline
| |   |-ParmVarDecl 0x1afced21ee0 <col:48, col:51> col:51 _value 'T *'
| |   |-<<<NULL>>>
| |   `-AlwaysInlineAttr 0x1afced22110 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced22288 parent 0x1afcecf76c8 prev 0x1afced18f00 <col:25, ./src\Core/Container/Variant.inl:728:5> line:700:36 used operator= 'Michka::Variant &(const Michka::Variant &)' inline
| | |-ParmVarDecl 0x1afced221f8 <col:48, col:63> col:63 used _value 'const Michka::Variant &'
| | |-CompoundStmt 0x1afced234a8 <line:701:5, line:728:5>
| | | |-CXXMemberCallExpr 0x1afced22418 <line:702:9, col:17> 'Michka::Variant' lvalue
| | | | `-MemberExpr 0x1afced223e8 <col:9> '<bound member function type>' ->destroy 0x1afced1ec08
| | | |   `-CXXThisExpr 0x1afced223d8 <col:9> 'Michka::Variant *' implicit this
| | | |-BinaryOperator 0x1afced224e0 <line:703:9, col:24> 'Michka::Variant::Type' lvalue '='
| | | | |-MemberExpr 0x1afced22448 <col:9> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | | `-CXXThisExpr 0x1afced22438 <col:9> 'Michka::Variant *' implicit this
| | | | `-ImplicitCastExpr 0x1afced224c8 <col:17, col:24> 'Michka::Variant::Type' <LValueToRValue>
| | | |   `-MemberExpr 0x1afced22498 <col:17, col:24> 'const Michka::Variant::Type' lvalue .mType 0x1afced19598
| | | |     `-DeclRefExpr 0x1afced22478 <col:17> 'const Michka::Variant' lvalue ParmVar 0x1afced221f8 '_value' 'const Michka::Variant &'
| | | |-SwitchStmt 0x1afced22598 <line:704:9, line:725:9>
| | | | |-ImplicitCastExpr 0x1afced22580 <line:704:17> 'Michka::Variant::Type' <LValueToRValue>
| | | | | `-MemberExpr 0x1afced22550 <col:17> 'Michka::Variant::Type' lvalue ->mType 0x1afced19598
| | | | |   `-CXXThisExpr 0x1afced22540 <col:17> 'Michka::Variant *' implicit this
| | | | `-CompoundStmt 0x1afced23400 <line:705:9, line:725:9>
| | | |   |-CaseStmt 0x1afced22640 <line:706:13, line:707:17>
| | | |   | |-ConstantExpr 0x1afced22620 <line:706:18, col:24> 'Michka::Variant::Type'
| | | |   | | |-value: Int 0
| | | |   | | `-DeclRefExpr 0x1afced225f0 <col:18, col:24> 'Michka::Variant::Type' EnumConstant 0x1afced08c78 'typeNull' 'Michka::Variant::Type'
| | | |   | `-BreakStmt 0x1afced22668 <line:707:17>
| | | |   |-CaseStmt 0x1afced22728 <line:708:13, line:710:31>
| | | |   | |-ConstantExpr 0x1afced22708 <line:708:18, col:24> 'Michka::Variant::Type'
| | | |   | | |-value: Int 1
| | | |   | | `-DeclRefExpr 0x1afced226d8 <col:18, col:24> 'Michka::Variant::Type' EnumConstant 0x1afced08cd0 'typeBool' 'Michka::Variant::Type'
| | | |   | `-CaseStmt 0x1afced227d8 <line:709:13, line:710:31>
| | | |   |   |-ConstantExpr 0x1afced227b8 <line:709:18, col:24> 'Michka::Variant::Type'
| | | |   |   | |-value: Int 2
| | | |   |   | `-DeclRefExpr 0x1afced22788 <col:18, col:24> 'Michka::Variant::Type' EnumConstant 0x1afced08d28 'typeInt' 'Michka::Variant::Type'
| | | |   |   `-BinaryOperator 0x1afced22938 <line:710:17, col:31> 'i64':'long long' lvalue '='
| | | |   |     |-MemberExpr 0x1afced22858 <col:17> 'i64':'long long' lvalue .mInt 0x1afced19720
| | | |   |     | `-MemberExpr 0x1afced22810 <col:17> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | |   |     |   `-CXXThisExpr 0x1afced22800 <col:17> 'Michka::Variant *' implicit this
| | | |   |     `-ImplicitCastExpr 0x1afced22920 <col:24, col:31> 'i64':'long long' <LValueToRValue>
| | | |   |       `-MemberExpr 0x1afced228f0 <col:24, col:31> 'const i64':'const long long' lvalue .mInt 0x1afced19720
| | | |   |         `-MemberExpr 0x1afced228a8 <col:24, col:31> 'const Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue . 0x1afced19d70
| | | |   |           `-DeclRefExpr 0x1afced22888 <col:24> 'const Michka::Variant' lvalue ParmVar 0x1afced221f8 '_value' 'const Michka::Variant &'
| | | |   |-BreakStmt 0x1afced22958 <line:711:17>
| | | |   |-CaseStmt 0x1afced229e8 <line:712:13, line:713:33>
| | | |   | |-ConstantExpr 0x1afced229c8 <line:712:18, col:24> 'Michka::Variant::Type'
| | | |   | | |-value: Int 3
| | | |   | | `-DeclRefExpr 0x1afced22998 <col:18, col:24> 'Michka::Variant::Type' EnumConstant 0x1afced08d80 'typeFloat' 'Michka::Variant::Type'
| | | |   | `-BinaryOperator 0x1afced22b98 <line:713:17, col:33> 'double' lvalue '='
| | | |   |   |-MemberExpr 0x1afced22ab8 <col:17> 'double' lvalue .mFloat 0x1afced19790
| | | |   |   | `-MemberExpr 0x1afced22a70 <col:17> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | |   |   |   `-CXXThisExpr 0x1afced22a10 <col:17> 'Michka::Variant *' implicit this
| | | |   |   `-ImplicitCastExpr 0x1afced22b80 <col:26, col:33> 'double' <LValueToRValue>
| | | |   |     `-MemberExpr 0x1afced22b50 <col:26, col:33> 'const double' lvalue .mFloat 0x1afced19790
| | | |   |       `-MemberExpr 0x1afced22b08 <col:26, col:33> 'const Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue . 0x1afced19d70
| | | |   |         `-DeclRefExpr 0x1afced22ae8 <col:26> 'const Michka::Variant' lvalue ParmVar 0x1afced221f8 '_value' 'const Michka::Variant &'
| | | |   |-BreakStmt 0x1afced22bb8 <line:714:17>
| | | |   |-CaseStmt 0x1afced22c48 <line:715:13, <invalid sloc>>
| | | |   | |-ConstantExpr 0x1afced22c28 <col:18, col:24> 'Michka::Variant::Type'
| | | |   | | |-value: Int 4
| | | |   | | `-DeclRefExpr 0x1afced22bf8 <col:18, col:24> 'Michka::Variant::Type' EnumConstant 0x1afced08dd8 'typeString' 'Michka::Variant::Type'
| | | |   | `-NullStmt 0x1afced22df0 <<invalid sloc>>
| | | |   |-BreakStmt 0x1afced22df8 <line:717:17>
| | | |   |-CaseStmt 0x1afced22e88 <line:718:13, <invalid sloc>>
| | | |   | |-ConstantExpr 0x1afced22e68 <col:18, col:24> 'Michka::Variant::Type'
| | | |   | | |-value: Int 5
| | | |   | | `-DeclRefExpr 0x1afced22e38 <col:18, col:24> 'Michka::Variant::Type' EnumConstant 0x1afced08e30 'typeArray' 'Michka::Variant::Type'
| | | |   | `-NullStmt 0x1afced230e0 <<invalid sloc>>
| | | |   |-BreakStmt 0x1afced230e8 <line:720:17>
| | | |   |-CaseStmt 0x1afced23178 <line:721:13, line:723:49>
| | | |   | |-ConstantExpr 0x1afced23158 <line:721:18, col:24> 'Michka::Variant::Type'
| | | |   | | |-value: Int 7
| | | |   | | `-DeclRefExpr 0x1afced23128 <col:18, col:24> 'Michka::Variant::Type' EnumConstant 0x1afced08ee0 'typeCustom' 'Michka::Variant::Type'
| | | |   | `-CaseStmt 0x1afced23228 <line:722:13, line:723:49>
| | | |   |   |-ConstantExpr 0x1afced23208 <line:722:18, col:24> 'Michka::Variant::Type'
| | | |   |   | |-value: Int 6
| | | |   |   | `-DeclRefExpr 0x1afced231d8 <col:18, col:24> 'Michka::Variant::Type' EnumConstant 0x1afced08e88 'typeReference' 'Michka::Variant::Type'
| | | |   |   `-BinaryOperator 0x1afced233d8 <line:723:17, col:49> 'Private::CustomVariantBase *' lvalue '='
| | | |   |     |-MemberExpr 0x1afced232a8 <col:17> 'Private::CustomVariantBase *' lvalue .mCustom 0x1afced19c98
| | | |   |     | `-MemberExpr 0x1afced23260 <col:17> 'Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue -> 0x1afced19d70
| | | |   |     |   `-CXXThisExpr 0x1afced23250 <col:17> 'Michka::Variant *' implicit this
| | | |   |     `-CXXMemberCallExpr 0x1afced233b8 <col:27, col:49> 'Michka::Private::CustomVariantBase *'
| | | |   |       `-MemberExpr 0x1afced23388 <col:27, col:43> '<bound member function type>' ->clone 0x1afcecf3910
| | | |   |         `-ImplicitCastExpr 0x1afced23370 <col:27, col:34> 'Private::CustomVariantBase *' <LValueToRValue>
| | | |   |           `-MemberExpr 0x1afced23340 <col:27, col:34> 'Private::CustomVariantBase *const' lvalue .mCustom 0x1afced19c98
| | | |   |             `-MemberExpr 0x1afced232f8 <col:27, col:34> 'const Michka::Variant::(anonymous union at ./src\Core/Container/Variant.h:298:9)' lvalue . 0x1afced19d70
| | | |   |               `-DeclRefExpr 0x1afced232d8 <col:27> 'const Michka::Variant' lvalue ParmVar 0x1afced221f8 '_value' 'const Michka::Variant &'
| | | |   `-BreakStmt 0x1afced233f8 <line:724:17>
| | | |-NullStmt 0x1afced23468 <line:725:10>
| | | `-ReturnStmt 0x1afced23498 <line:727:9, col:17>
| | |   `-UnaryOperator 0x1afced23480 <col:16, col:17> 'Michka::Variant' lvalue prefix '*' cannot overflow
| | |     `-CXXThisExpr 0x1afced23470 <col:17> 'Michka::Variant *' this
| | `-AlwaysInlineAttr 0x1afced22380 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced23588 parent 0x1afcecf76c8 prev 0x1afced19228 <col:25, ./src\Core/Container/Variant.inl:733:5> line:730:32 operator!= 'bool (const Michka::Variant &) const' inline
| | |-ParmVarDecl 0x1afced234f8 <col:45, col:60> col:60 used _other 'const Michka::Variant &'
| | |-CompoundStmt 0x1afced23850 <line:731:5, line:733:5>
| | | `-ReturnStmt 0x1afced23840 <line:732:9, col:33>
| | |   `-UnaryOperator 0x1afced23828 <col:16, col:33> 'bool' prefix '!' cannot overflow
| | |     `-ParenExpr 0x1afced23808 <col:17, col:33> 'bool'
| | |       `-CXXOperatorCallExpr 0x1afced237c8 <col:18, col:27> 'bool' '=='
| | |         |-ImplicitCastExpr 0x1afced237b0 <col:24> 'bool (*)(const Michka::Variant &) const' <FunctionToPointerDecay>
| | |         | `-DeclRefExpr 0x1afced23758 <col:24> 'bool (const Michka::Variant &) const' lvalue CXXMethod 0x1afced190e0 'operator==' 'bool (const Michka::Variant &) const'
| | |         |-UnaryOperator 0x1afced23720 <col:18, col:19> 'const Michka::Variant' lvalue prefix '*' cannot overflow
| | |         | `-CXXThisExpr 0x1afced23710 <col:19> 'const Michka::Variant *' this
| | |         `-DeclRefExpr 0x1afced23738 <col:27> 'const Michka::Variant' lvalue ParmVar 0x1afced234f8 '_other' 'const Michka::Variant &'
| | `-AlwaysInlineAttr 0x1afced23680 <./src\Core/Defines.h:54:25> __forceinline
| `-FunctionTemplateDecl 0x1afced23a78 parent 0x1afcecf76c8 prev 0x1afced194f8 <./src\Core/Container/Variant.inl:735:5, line:736:27> col:14 operator type-parameter-0-0
|   |-TemplateTypeParmDecl 0x1afced23868 <line:735:14, col:23> col:23 referenced typename depth 0 index 0 T
|   `-CXXConversionDecl 0x1afced23990 parent 0x1afcecf76c8 prev 0x1afced19450 <line:736:5, col:27> col:14 operator type-parameter-0-0 'T () const'
|     `-<<<NULL>>>
|-NamespaceDecl 0x1afced23be8 prev 0x1afced1a1b8 <./src\Core/Container/Pair.h:34:1, line:54:1> line:34:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| `-ClassTemplateDecl 0x1afced23e18 <line:36:5, line:53:5> line:37:12 Pair
|   |-TemplateTypeParmDecl 0x1afced23c58 <line:36:14, col:23> col:23 referenced typename depth 0 index 0 T1
|   |-TemplateTypeParmDecl 0x1afced23ce0 <col:27, col:36> col:36 referenced typename depth 0 index 1 T2
|   `-CXXRecordDecl 0x1afced23d88 <line:37:5, line:53:5> line:37:12 struct Pair definition
|     |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
|     | |-DefaultConstructor exists non_trivial user_provided
|     | |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
|     | |-MoveConstructor exists non_trivial user_declared
|     | |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
|     | |-MoveAssignment exists non_trivial user_declared
|     | `-Destructor non_trivial user_declared
|     |-CXXRecordDecl 0x1afced240a8 <col:5, col:12> col:12 implicit referenced struct Pair
|     |-TypedefDecl 0x1afced24160 <./src\Core/Helpers.h:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
|     | |-BuiltinType 0x1afcc6e38c0 'bool'
|     | `-AnnotateAttr 0x1afced241b8 <line:271:39, col:60> ""
|     |-CXXMethodDecl 0x1afced24278 <line:273:5, col:45> col:31 classFileName 'const char *()' static inline
|     | `-<<<NULL>>>
|     |-CXXMethodDecl 0x1afced24340 <<scratch space>:46:1, ./src\Core/Helpers.h:277:62> <scratch space>:46:1 invalid __MICHKA_STRUCT_GENERATED_BODY_39 'int ()'
|     |-CXXConstructorDecl 0x1afced24418 <./src\Core/Defines.h:54:25, ./src\Core/Container/Pair.h:41:27> col:22 Pair<T1, T2> 'void ()' inline
|     | `-AlwaysInlineAttr 0x1afced244c0 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXConstructorDecl 0x1afced24730 <col:25, ./src\Core/Container/Pair.h:42:62> col:22 Pair<T1, T2> 'void (const T1 &, const T2 &)' inline
|     | |-ParmVarDecl 0x1afced24560 <col:27, col:37> col:37 _first 'const T1 &'
|     | |-ParmVarDecl 0x1afced24610 <col:45, col:55> col:55 _second 'const T2 &'
|     | `-AlwaysInlineAttr 0x1afced247e8 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXConstructorDecl 0x1afced24ab0 <col:25, ./src\Core/Container/Pair.h:43:52> col:22 Pair<T1, T2> 'void (T1 &&, T2 &&)' inline
|     | |-ParmVarDecl 0x1afced24880 <col:27, col:32> col:32 _first 'T1 &&'
|     | |-ParmVarDecl 0x1afced24960 <col:40, col:45> col:45 _second 'T2 &&'
|     | `-AlwaysInlineAttr 0x1afced24b68 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXConstructorDecl 0x1afced24e50 <col:25, ./src\Core/Container/Pair.h:44:53> col:22 Pair<T1, T2> 'void (const Pair<T1, T2> &)' inline
|     | |-ParmVarDecl 0x1afced24d40 <col:27, col:47> col:47 _other 'const Pair<T1, T2> &'
|     | `-AlwaysInlineAttr 0x1afced24f00 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXConstructorDecl 0x1afced251f0 <col:25, ./src\Core/Container/Pair.h:45:48> col:22 Pair<T1, T2> 'void (Pair<T1, T2> &&)' inline
|     | |-ParmVarDecl 0x1afced250e0 <col:27, col:42> col:42 _other 'Pair<T1, T2> &&'
|     | `-AlwaysInlineAttr 0x1afced252a0 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXDestructorDecl 0x1afced25340 <col:25, ./src\Core/Container/Pair.h:46:28> col:22 ~Pair<T1, T2> 'void ()' inline
|     | `-AlwaysInlineAttr 0x1afced253f0 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXMethodDecl 0x1afced25820 <col:25, ./src\Core/Container/Pair.h:48:74> col:36 operator= 'Pair<T1, T2> &(const Pair<T1, T2> &)' inline
|     | |-ParmVarDecl 0x1afced25670 <col:48, col:68> col:68 _other 'const Pair<T1, T2> &'
|     | `-AlwaysInlineAttr 0x1afced258c8 <./src\Core/Defines.h:54:25> __forceinline
|     |-CXXMethodDecl 0x1afced25cc0 <col:25, ./src\Core/Container/Pair.h:49:69> col:36 operator= 'Pair<T1, T2> &(Pair<T1, T2> &&)' inline
|     | |-ParmVarDecl 0x1afced25b40 <col:48, col:63> col:63 _other 'Pair<T1, T2> &&'
|     | `-AlwaysInlineAttr 0x1afced25d68 <./src\Core/Defines.h:54:25> __forceinline
|     |-FieldDecl 0x1afced25dd0 <./src\Core/Container/Pair.h:51:9, col:12> col:12 first 'T1'
|     `-FieldDecl 0x1afced25e38 <line:52:9, col:12> col:12 second 'T2'
|-NamespaceDecl 0x1afced25f20 prev 0x1afced23be8 <./src\Core/Container/Pair.inl:29:1, line:92:1> line:29:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| |-CXXConstructorDecl 0x1afced262c0 parent 0x1afced23d88 prev 0x1afced24418 <line:31:5, line:32:37> col:32 Pair<T1, T2> 'void ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced263b0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced5d100 parent 0x1afced23d88 prev 0x1afced24730 <./src\Core/Container/Pair.inl:37:5, line:38:72> col:32 Pair<T1, T2> 'void (const T1 &, const T2 &)' inline
| | |-ParmVarDecl 0x1afced26880 <col:37, col:47> col:47 _first 'const T1 &'
| | |-ParmVarDecl 0x1afced26930 <col:55, col:65> col:65 _second 'const T2 &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced5d200 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced5d860 parent 0x1afced23d88 prev 0x1afced24ab0 <./src\Core/Container/Pair.inl:45:5, line:46:62> col:32 Pair<T1, T2> 'void (T1 &&, T2 &&)' inline
| | |-ParmVarDecl 0x1afced5d6d0 <col:37, col:42> col:42 _first 'T1 &&'
| | |-ParmVarDecl 0x1afced5d780 <col:50, col:55> col:55 _second 'T2 &&'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced5d960 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced5e010 parent 0x1afced23d88 prev 0x1afced24e50 <./src\Core/Container/Pair.inl:53:5, line:54:63> col:32 Pair<T1, T2> 'void (const Pair<T1, T2> &)' inline
| | |-ParmVarDecl 0x1afced5df40 <col:37, col:57> col:57 _other 'const Pair<T1, T2> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced5e108 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced5e7b0 parent 0x1afced23d88 prev 0x1afced251f0 <./src\Core/Container/Pair.inl:61:5, line:62:58> col:32 Pair<T1, T2> 'void (Pair<T1, T2> &&)' inline
| | |-ParmVarDecl 0x1afced5e6e0 <col:37, col:52> col:52 _other 'Pair<T1, T2> &&'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced5e8a8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXDestructorDecl 0x1afced5ec70 parent 0x1afced23d88 prev 0x1afced25340 <./src\Core/Container/Pair.inl:69:5, line:70:38> col:32 ~Pair<T1, T2> 'void ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced5ed68 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced59510 parent 0x1afced23d88 prev 0x1afced25820 <./src\Core/Container/Pair.inl:75:5, line:76:84> col:46 operator= 'Pair<T1, T2> &(const Pair<T1, T2> &)' inline
| | |-ParmVarDecl 0x1afced59300 <col:58, col:78> col:78 _other 'const Pair<T1, T2> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced59600 <./src\Core/Defines.h:54:25> __forceinline
| `-CXXMethodDecl 0x1afced59da0 parent 0x1afced23d88 prev 0x1afced25cc0 <./src\Core/Container/Pair.inl:84:5, line:85:79> col:46 operator= 'Pair<T1, T2> &(Pair<T1, T2> &&)' inline
|   |-ParmVarDecl 0x1afced59b90 <col:58, col:73> col:73 _other 'Pair<T1, T2> &&'
|   |-<<<NULL>>>
|   `-AlwaysInlineAttr 0x1afced59e90 <./src\Core/Defines.h:54:25> __forceinline
|-NamespaceDecl 0x1afced59f18 prev 0x1afced25f20 <./src\Core/Container/Map.h:35:1, line:274:1> line:35:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| `-ClassTemplateDecl 0x1afced5a148 <line:37:5, line:273:5> line:38:11 Map
|   |-TemplateTypeParmDecl 0x1afced59f88 <line:37:14, col:23> col:23 referenced typename depth 0 index 0 TKey
|   |-TemplateTypeParmDecl 0x1afced5a010 <col:29, col:38> col:38 referenced typename depth 0 index 1 TValue
|   |-CXXRecordDecl 0x1afced5a0b8 <line:38:5, line:273:5> line:38:11 class Map definition
|   | |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
|   | | |-DefaultConstructor exists non_trivial user_provided
|   | | |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
|   | | |-MoveConstructor exists non_trivial user_declared
|   | | |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
|   | | |-MoveAssignment exists non_trivial user_declared
|   | | `-Destructor simple irrelevant trivial needs_implicit
|   | |-CXXRecordDecl 0x1afced5a3d8 <col:5, col:11> col:11 implicit referenced class Map
|   | |-AccessSpecDecl 0x1afced5a468 <./src\Core/Helpers.h:304:5, col:11> col:5 public
|   | |-TypedefDecl 0x1afced5a4c0 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
|   | | |-BuiltinType 0x1afcc6e38c0 'bool'
|   | | `-AnnotateAttr 0x1afced5a518 <line:271:39, col:60> ""
|   | |-CXXMethodDecl 0x1afced5a5d8 <line:273:5, col:45> col:31 classFileName 'const char *()' static inline
|   | | `-<<<NULL>>>
|   | |-CXXMethodDecl 0x1afced5a6a0 <<scratch space>:51:1, ./src\Core/Helpers.h:277:62> <scratch space>:51:1 invalid __MICHKA_STRUCT_GENERATED_BODY_40 'int ()'
|   | |-AccessSpecDecl 0x1afced5a740 <./src\Core/Container/Map.h:41:5, col:11> col:5 public
|   | |-CXXRecordDecl 0x1afced5a770 <line:42:9, line:61:9> line:42:16 referenced struct Element definition
|   | | |-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
|   | | | |-DefaultConstructor defaulted_is_constexpr
|   | | | |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
|   | | | |-MoveConstructor exists non_trivial user_declared
|   | | | |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
|   | | | |-MoveAssignment exists non_trivial user_declared
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public 'Pair<TKey, TValue>'
|   | | |-CXXRecordDecl 0x1afced5a988 <col:9, col:16> col:16 implicit referenced struct Element
|   | | |-CXXConstructorDecl 0x1afced5ac40 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:44:65> col:26 Element 'void (TKey &&, TValue &&)' inline
|   | | | |-ParmVarDecl 0x1afced5aa60 <col:34, col:41> col:41 _first 'TKey &&'
|   | | | |-ParmVarDecl 0x1afced5ab10 <col:49, col:58> col:58 _second 'TValue &&'
|   | | | `-AlwaysInlineAttr 0x1afced5acf8 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXConstructorDecl 0x1afced5af20 <col:25, ./src\Core/Container/Map.h:45:75> col:26 Element 'void (const TKey &, const TValue &)' inline
|   | | | |-ParmVarDecl 0x1afced5ad90 <col:34, col:46> col:46 _first 'const TKey &'
|   | | | |-ParmVarDecl 0x1afced5ae40 <col:54, col:68> col:68 _second 'const TValue &'
|   | | | `-AlwaysInlineAttr 0x1afced5afd8 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXConstructorDecl 0x1afced5f170 <col:25, ./src\Core/Container/Map.h:46:55> col:26 Element 'void (const Michka::Map::Element &)' inline
|   | | | |-ParmVarDecl 0x1afced5b070 <col:34, col:49> col:49 _other 'const Michka::Map::Element &'
|   | | | `-AlwaysInlineAttr 0x1afced5f220 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXConstructorDecl 0x1afced5f390 <col:25, ./src\Core/Container/Map.h:47:50> col:26 Element 'void (Michka::Map::Element &&)' inline
|   | | | |-ParmVarDecl 0x1afced5f2c0 <col:34, col:44> col:44 _other 'Michka::Map::Element &&'
|   | | | `-AlwaysInlineAttr 0x1afced5f440 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afced5f520 <col:25, ./src\Core/Container/Map.h:49:36> col:32 key 'TKey &()' inline
|   | | | `-AlwaysInlineAttr 0x1afced5f5c0 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afced5f6a0 <col:25, ./src\Core/Container/Map.h:50:37> col:31 key 'TKey () const' inline
|   | | | `-AlwaysInlineAttr 0x1afced5f740 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afced5f880 <col:25, ./src\Core/Container/Map.h:51:40> col:34 value 'TValue &()' inline
|   | | | `-AlwaysInlineAttr 0x1afced5f920 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afced5fa00 <col:25, ./src\Core/Container/Map.h:52:41> col:33 value 'TValue () const' inline
|   | | | `-AlwaysInlineAttr 0x1afced5faa0 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-UnresolvedUsingValueDecl 0x1afced5fbe8 <./src\Core/Container/Map.h:54:13, col:48> col:39 Pair<TKey, TValue>::operator= '<dependent type>'
|   | | |-CXXMethodDecl 0x1afced5fd50 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:56:68> col:35 operator= 'Michka::Map::Element &(const Michka::Map::Element &)' inline
|   | | | |-ParmVarDecl 0x1afced5fc50 <col:47, col:62> col:62 _other 'const Michka::Map::Element &'
|   | | | `-AlwaysInlineAttr 0x1afced5fdf8 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afced5ff30 <col:25, ./src\Core/Container/Map.h:57:63> col:35 operator= 'Michka::Map::Element &(Michka::Map::Element &&)' inline
|   | | | |-ParmVarDecl 0x1afced5fe60 <col:47, col:57> col:57 _other 'Michka::Map::Element &&'
|   | | | `-AlwaysInlineAttr 0x1afced5ffd8 <./src\Core/Defines.h:54:25> __forceinline
|   | | |-CXXMethodDecl 0x1afced60110 <col:25, ./src\Core/Container/Map.h:59:67> col:31 operator== 'bool (const Michka::Map::Element &) const' inline
|   | | | |-ParmVarDecl 0x1afced60040 <col:44, col:59> col:59 _other 'const Michka::Map::Element &'
|   | | | `-AlwaysInlineAttr 0x1afced601b8 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-CXXMethodDecl 0x1afced602b0 <col:25, ./src\Core/Container/Map.h:60:67> col:31 operator!= 'bool (const Michka::Map::Element &) const' inline
|   | |   |-ParmVarDecl 0x1afced60220 <col:44, col:59> col:59 _other 'const Michka::Map::Element &'
|   | |   `-AlwaysInlineAttr 0x1afced60358 <./src\Core/Defines.h:54:25> __forceinline
|   | |-TypedefDecl 0x1afced603d8 <./src\Core/Container/Map.h:63:9, col:26> col:26 referenced Iterator 'Michka::Map::Element *'
|   | | `-PointerType 0x1afced5ab80 'Michka::Map::Element *' dependent
|   | |   `-RecordType 0x1afced5a800 'Michka::Map::Element' dependent
|   | |     `-CXXRecord 0x1afced5a770 'Element'
|   | |-TypedefDecl 0x1afced60440 <line:64:9, col:32> col:32 referenced ConstIterator 'const Michka::Map::Element *'
|   | | `-PointerType 0x1afced5f620 'const Michka::Map::Element *' dependent
|   | |   `-QualType 0x1afced5a801 'const Michka::Map::Element' const
|   | |     `-RecordType 0x1afced5a800 'Michka::Map::Element' dependent
|   | |       `-CXXRecord 0x1afced5a770 'Element'
|   | |-AccessSpecDecl 0x1afced60498 <line:66:5, col:11> col:5 public
|   | |-CXXConstructorDecl 0x1afced60500 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:67:26> col:22 Map<TKey, TValue> 'void ()' inline
|   | | `-AlwaysInlineAttr 0x1afced605a8 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXConstructorDecl 0x1afced606b8 <col:25, ./src\Core/Container/Map.h:68:70> col:22 invalid Map<TKey, TValue> 'void (const int &)' inline
|   | | |-ParmVarDecl 0x1afced60628 <col:26, col:64> col:64 invalid _array 'const int &'
|   | | `-AlwaysInlineAttr 0x1afced60768 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXConstructorDecl 0x1afced60a50 <col:25, ./src\Core/Container/Map.h:69:57> col:22 Map<TKey, TValue> 'void (const Map<TKey, TValue> &)' inline
|   | | |-ParmVarDecl 0x1afced60940 <col:26, col:51> col:51 _other 'const Map<TKey, TValue> &'
|   | | `-AlwaysInlineAttr 0x1afced60b00 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXConstructorDecl 0x1afced60df0 <col:25, ./src\Core/Container/Map.h:70:52> col:22 Map<TKey, TValue> 'void (Map<TKey, TValue> &&)' inline
|   | | |-ParmVarDecl 0x1afced60ce0 <col:26, col:46> col:46 _other 'Map<TKey, TValue> &&'
|   | | `-AlwaysInlineAttr 0x1afced60ea0 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afced61040 <col:25, ./src\Core/Container/Map.h:78:51> col:31 at 'Michka::Map::Element &(const u32 &)' inline
|   | | |-ParmVarDecl 0x1afced60f38 <col:34, col:45> col:45 _index 'const u32 &'
|   | | |-AlwaysInlineAttr 0x1afced610e8 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedf1108 <./src\Core/Container/Map.h:73:11, line:76:26>
|   | |   |-ParagraphComment 0x1afcedf0f00 <line:73:11>
|   | |   | `-TextComment 0x1afcedf0ed8 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedf0f20 <col:12, col:53> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedf0f70 <col:18, col:53>
|   | |   |   `-TextComment 0x1afcedf0f48 <col:18, col:53> Text=" Get key and value in specific index"
|   | |   |-ParagraphComment 0x1afcedf0fb8 <line:75:11>
|   | |   | `-TextComment 0x1afcedf0f90 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedf0fd8 <col:12, line:76:11> [in] implicitly Param="_index" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedf1050 <col:11>
|   | |   |   `-TextComment 0x1afcedf1028 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedf1070 <col:12, col:26> Name="return"
|   | |     `-ParagraphComment 0x1afcedf10c0 <col:19, col:26>
|   | |       `-TextComment 0x1afcedf1098 <col:19, col:26> Text=" Element"
|   | |-CXXMethodDecl 0x1afced652c0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:79:52> col:30 at 'Michka::Map::Element (const u32 &) const' inline
|   | | |-ParmVarDecl 0x1afced65180 <col:33, col:44> col:44 _index 'const u32 &'
|   | | `-AlwaysInlineAttr 0x1afced65368 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afced654a0 <col:25, ./src\Core/Container/Map.h:84:37> col:31 begin 'Michka::Map::Iterator ()' inline
|   | | |-AlwaysInlineAttr 0x1afced65540 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedf1230 <./src\Core/Container/Map.h:82:11, col:45>
|   | |   |-ParagraphComment 0x1afcedf1190 <col:11>
|   | |   | `-TextComment 0x1afcedf1168 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedf11b0 <col:12, col:45> Name="brief"
|   | |     `-ParagraphComment 0x1afcedf1200 <col:18, col:45>
|   | |       `-TextComment 0x1afcedf11d8 <col:18, col:45> Text=" Iterator to begin of array."
|   | |-CXXMethodDecl 0x1afced65680 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:89:44> col:36 begin 'Michka::Map::ConstIterator () const' inline
|   | | |-AlwaysInlineAttr 0x1afced65720 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedf1358 <./src\Core/Container/Map.h:87:11, col:59>
|   | |   |-ParagraphComment 0x1afcedf12b8 <col:11>
|   | |   | `-TextComment 0x1afcedf1290 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedf12d8 <col:12, col:59> Name="brief"
|   | |     `-ParagraphComment 0x1afcedf1328 <col:18, col:59>
|   | |       `-TextComment 0x1afcedf1300 <col:18, col:59> Text=" Iterator to begin of array for constants."
|   | |-CXXMethodDecl 0x1afced659a0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:96:47> col:41 clear 'Map<TKey, TValue> &()' inline
|   | | |-AlwaysInlineAttr 0x1afced65a40 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedf1548 <./src\Core/Container/Map.h:92:11, line:94:23>
|   | |   |-ParagraphComment 0x1afcedf13e0 <line:92:11>
|   | |   | `-TextComment 0x1afcedf13b8 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedf1400 <col:12, col:28> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedf1450 <col:18, col:28>
|   | |   |   `-TextComment 0x1afcedf1428 <col:18, col:28> Text=" Clear map."
|   | |   |-ParagraphComment 0x1afcedf1498 <line:94:11>
|   | |   | `-TextComment 0x1afcedf1470 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedf14b8 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcedf1508 <col:19, col:23>
|   | |       `-TextComment 0x1afcedf14e0 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afced65ae8 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:101:35> col:31 end 'Michka::Map::Iterator ()' inline
|   | | |-AlwaysInlineAttr 0x1afced65b88 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedf1670 <./src\Core/Container/Map.h:99:11, col:43>
|   | |   |-ParagraphComment 0x1afcedf15d0 <col:11>
|   | |   | `-TextComment 0x1afcedf15a8 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedf15f0 <col:12, col:43> Name="brief"
|   | |     `-ParagraphComment 0x1afcedf1640 <col:18, col:43>
|   | |       `-TextComment 0x1afcedf1618 <col:18, col:43> Text=" Iterator to end of array."
|   | |-CXXMethodDecl 0x1afced65c30 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:106:42> col:36 end 'Michka::Map::ConstIterator () const' inline
|   | | |-AlwaysInlineAttr 0x1afced65cd0 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedf1798 <./src\Core/Container/Map.h:104:11, col:57>
|   | |   |-ParagraphComment 0x1afcedf16f8 <col:11>
|   | |   | `-TextComment 0x1afcedf16d0 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedf1718 <col:12, col:57> Name="brief"
|   | |     `-ParagraphComment 0x1afcedf1768 <col:18, col:57>
|   | |       `-TextComment 0x1afcedf1740 <col:18, col:57> Text=" Iterator to end of array for constants."
|   | |-CXXMethodDecl 0x1afced66090 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:114:100> col:41 invalid filter 'Map<TKey, TValue> &(const int &)' inline
|   | | |-ParmVarDecl 0x1afced65f18 <col:48, col:91> col:91 invalid _callback 'const int &'
|   | | |-AlwaysInlineAttr 0x1afced66138 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedf1a30 <./src\Core/Container/Map.h:109:11, line:112:23>
|   | |   |-ParagraphComment 0x1afcedf1820 <line:109:11>
|   | |   | `-TextComment 0x1afcedf17f8 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedf1840 <col:12, col:49> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedf1890 <col:18, col:49>
|   | |   |   `-TextComment 0x1afcedf1868 <col:18, col:49> Text=" Filter map items by a callback."
|   | |   |-ParagraphComment 0x1afcedf18d8 <line:111:11>
|   | |   | `-TextComment 0x1afcedf18b0 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedf18f8 <col:12, line:112:11> [in] implicitly Param="_callback" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedf1978 <col:11>
|   | |   |   `-TextComment 0x1afcedf1950 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedf1998 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcedf19e8 <col:19, col:23>
|   | |       `-TextComment 0x1afcedf19c0 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afced66210 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:119:37> col:31 first 'Michka::Map::Element &()' inline
|   | | |-AlwaysInlineAttr 0x1afced662b0 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedf1b58 <./src\Core/Container/Map.h:117:11, col:33>
|   | |   |-ParagraphComment 0x1afcedf1ab8 <col:11>
|   | |   | `-TextComment 0x1afcedf1a90 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedf1ad8 <col:12, col:33> Name="brief"
|   | |     `-ParagraphComment 0x1afcedf1b28 <col:18, col:33>
|   | |       `-TextComment 0x1afcedf1b00 <col:18, col:33> Text=" Get first item."
|   | |-CXXMethodDecl 0x1afced66360 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:120:38> col:30 first 'Michka::Map::Element () const' inline
|   | | `-AlwaysInlineAttr 0x1afced66400 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afced664a8 <col:25, ./src\Core/Container/Map.h:125:40> col:26 getCapacity 'u32 () const' inline
|   | | |-AlwaysInlineAttr 0x1afced66548 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedf1c80 <./src\Core/Container/Map.h:123:11, col:38>
|   | |   |-ParagraphComment 0x1afcedf1be0 <col:11>
|   | |   | `-TextComment 0x1afcedf1bb8 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedf1c00 <col:12, col:38> Name="brief"
|   | |     `-ParagraphComment 0x1afcedf1c50 <col:18, col:38>
|   | |       `-TextComment 0x1afcedf1c28 <col:18, col:38> Text=" Get capacity of map."
|   | |-CXXMethodDecl 0x1afced66898 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:133:106> col:40 invalid getFiltered 'Map<TKey, TValue> (const int &) const' inline
|   | | |-ParmVarDecl 0x1afced66750 <col:52, col:95> col:95 invalid _callback 'const int &'
|   | | |-AlwaysInlineAttr 0x1afced66940 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedf1f18 <./src\Core/Container/Map.h:128:11, line:131:34>
|   | |   |-ParagraphComment 0x1afcedf1d08 <line:128:11>
|   | |   | `-TextComment 0x1afcedf1ce0 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedf1d28 <col:12, col:57> Name="brief"
|   | |   | `-ParagraphComment 0x1afcedf1d78 <col:18, col:57>
|   | |   |   `-TextComment 0x1afcedf1d50 <col:18, col:57> Text=" Get filtered map by a compare callback."
|   | |   |-ParagraphComment 0x1afcedf1dc0 <line:130:11>
|   | |   | `-TextComment 0x1afcedf1d98 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcedf1de0 <col:12, line:131:11> [in] implicitly Param="_callback" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcedf1e60 <col:11>
|   | |   |   `-TextComment 0x1afcedf1e38 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedf1e80 <col:12, col:34> Name="return"
|   | |     `-ParagraphComment 0x1afcedf1ed0 <col:19, col:34>
|   | |       `-TextComment 0x1afcedf1ea8 <col:19, col:34> Text=" Filtered Vector"
|   | |-CXXMethodDecl 0x1afced669e8 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:138:36> col:26 getSize 'u32 () const' inline
|   | | |-AlwaysInlineAttr 0x1afced66a88 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcedf2040 <./src\Core/Container/Map.h:136:11, col:44>
|   | |   |-ParagraphComment 0x1afcedf1fa0 <col:11>
|   | |   | `-TextComment 0x1afcedf1f78 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcedf1fc0 <col:12, col:44> Name="brief"
|   | |     `-ParagraphComment 0x1afcedf2010 <col:18, col:44>
|   | |       `-TextComment 0x1afcedf1fe8 <col:18, col:44> Text=" Get count of items in map."
|   | |-CXXMethodDecl 0x1afced66cb0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:147:91> col:29 getValue 'TValue (const TKey &, const TValue &) const' inline
|   | | |-ParmVarDecl 0x1afced66b20 <col:38, col:50> col:50 _key 'const TKey &'
|   | | |-ParmVarDecl 0x1afced66b98 <col:56, col:88> col:70 _default 'const TValue &' cinit
|   | | | `-CXXUnresolvedConstructExpr 0x1afced633d8 <col:81, col:88> 'TValue' 'TValue'
|   | | |-AlwaysInlineAttr 0x1afced66d60 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede2320 <./src\Core/Container/Map.h:141:11, line:145:31>
|   | |   |-ParagraphComment 0x1afcedf20c8 <line:141:11>
|   | |   | `-TextComment 0x1afcedf20a0 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcedf20e8 <col:12, col:68> Name="brief"
|   | |   | `-ParagraphComment 0x1afcede20e0 <col:18, col:68>
|   | |   |   `-TextComment 0x1afcedf2110 <col:18, col:68> Text=" Get value of a key. if not exists returns default."
|   | |   |-ParagraphComment 0x1afcede2128 <line:143:11>
|   | |   | `-TextComment 0x1afcede2100 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcede2148 <col:12, line:144:11> [in] implicitly Param="_key" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcede21c0 <col:11>
|   | |   |   `-TextComment 0x1afcede2198 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcede21e0 <col:12, line:145:11> [in] implicitly Param="_default" ParamIndex=1
|   | |   | `-ParagraphComment 0x1afcede2260 <col:11>
|   | |   |   `-TextComment 0x1afcede2238 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede2280 <col:12, col:31> Name="return"
|   | |     `-ParagraphComment 0x1afcede22d0 <col:19, col:31>
|   | |       `-TextComment 0x1afcede22a8 <col:19, col:31> Text=" Value of key"
|   | |-CXXMethodDecl 0x1afced66f00 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:155:52> col:27 hasKey 'bool (const TKey &) const' inline
|   | | |-ParmVarDecl 0x1afced66df8 <col:34, col:46> col:46 _key 'const TKey &'
|   | | |-AlwaysInlineAttr 0x1afced66fa8 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede25b0 <./src\Core/Container/Map.h:150:11, line:153:33>
|   | |   |-ParagraphComment 0x1afcede23a8 <line:150:11>
|   | |   | `-TextComment 0x1afcede2380 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcede23c8 <col:12, col:44> Name="brief"
|   | |   | `-ParagraphComment 0x1afcede2418 <col:18, col:44>
|   | |   |   `-TextComment 0x1afcede23f0 <col:18, col:44> Text=" Check specific key exists."
|   | |   |-ParagraphComment 0x1afcede2460 <line:152:11>
|   | |   | `-TextComment 0x1afcede2438 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcede2480 <col:12, line:153:11> [in] implicitly Param="_key" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcede24f8 <col:11>
|   | |   |   `-TextComment 0x1afcede24d0 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede2518 <col:12, col:33> Name="return"
|   | |     `-ParagraphComment 0x1afcede2568 <col:19, col:33>
|   | |       `-TextComment 0x1afcede2540 <col:19, col:33> Text=" true if exists"
|   | |-CXXMethodDecl 0x1afced67178 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:163:58> col:27 hasValue 'bool (const TValue &) const' inline
|   | | |-ParmVarDecl 0x1afced67040 <col:36, col:50> col:50 _value 'const TValue &'
|   | | |-AlwaysInlineAttr 0x1afced67220 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede2840 <./src\Core/Container/Map.h:158:11, line:161:33>
|   | |   |-ParagraphComment 0x1afcede2638 <line:158:11>
|   | |   | `-TextComment 0x1afcede2610 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcede2658 <col:12, col:46> Name="brief"
|   | |   | `-ParagraphComment 0x1afcede26a8 <col:18, col:46>
|   | |   |   `-TextComment 0x1afcede2680 <col:18, col:46> Text=" Check specific value exists."
|   | |   |-ParagraphComment 0x1afcede26f0 <line:160:11>
|   | |   | `-TextComment 0x1afcede26c8 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcede2710 <col:12, line:161:11> [in] implicitly Param="_value" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcede2788 <col:11>
|   | |   |   `-TextComment 0x1afcede2760 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede27a8 <col:12, col:33> Name="return"
|   | |     `-ParagraphComment 0x1afcede27f8 <col:19, col:33>
|   | |       `-TextComment 0x1afcede27d0 <col:19, col:33> Text=" true if exists"
|   | |-CXXMethodDecl 0x1afced673c0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:171:56> col:26 indexOfKey 'u32 (const TKey &) const' inline
|   | | |-ParmVarDecl 0x1afced672b8 <col:37, col:49> col:49 _what 'const TKey &'
|   | | |-AlwaysInlineAttr 0x1afced67468 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede2ad0 <./src\Core/Container/Map.h:166:11, line:169:23>
|   | |   |-ParagraphComment 0x1afcede28c8 <line:166:11>
|   | |   | `-TextComment 0x1afcede28a0 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcede28e8 <col:12, col:38> Name="brief"
|   | |   | `-ParagraphComment 0x1afcede2938 <col:18, col:38>
|   | |   |   `-TextComment 0x1afcede2910 <col:18, col:38> Text=" Find index of a key."
|   | |   |-ParagraphComment 0x1afcede2980 <line:168:11>
|   | |   | `-TextComment 0x1afcede2958 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcede29a0 <col:12, line:169:11> [in] implicitly Param="_what" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcede2a18 <col:11>
|   | |   |   `-TextComment 0x1afcede29f0 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede2a38 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcede2a88 <col:19, col:23>
|   | |       `-TextComment 0x1afcede2a60 <col:19, col:23> Text=" TKey"
|   | |-CXXMethodDecl 0x1afced67690 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:180:81> col:26 indexOfValue 'u32 (const TValue &, const u32) const' inline
|   | | |-ParmVarDecl 0x1afced67500 <col:39, col:53> col:53 _what 'const TValue &'
|   | | |-ParmVarDecl 0x1afced67578 <col:60, col:78> col:70 _from 'const u32':'const unsigned int' cinit
|   | | | `-ImplicitCastExpr 0x1afced63420 <col:78> 'u32':'unsigned int' <IntegralCast>
|   | | |   `-IntegerLiteral 0x1afced633f8 <col:78> 'int' 0
|   | | |-AlwaysInlineAttr 0x1afced67740 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede2e00 <./src\Core/Container/Map.h:174:11, line:178:23>
|   | |   |-ParagraphComment 0x1afcede2b58 <line:174:11>
|   | |   | `-TextComment 0x1afcede2b30 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcede2b78 <col:12, col:40> Name="brief"
|   | |   | `-ParagraphComment 0x1afcede2bc8 <col:18, col:40>
|   | |   |   `-TextComment 0x1afcede2ba0 <col:18, col:40> Text=" Find index of a value."
|   | |   |-ParagraphComment 0x1afcede2c10 <line:176:11>
|   | |   | `-TextComment 0x1afcede2be8 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcede2c30 <col:12, line:177:11> [in] implicitly Param="_what" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcede2ca8 <col:11>
|   | |   |   `-TextComment 0x1afcede2c80 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcede2cc8 <col:12, line:178:11> [in] implicitly Param="_from" ParamIndex=1
|   | |   | `-ParagraphComment 0x1afcede2d40 <col:11>
|   | |   |   `-TextComment 0x1afcede2d18 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede2d60 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcede2db0 <col:19, col:23>
|   | |       `-TextComment 0x1afcede2d88 <col:19, col:23> Text=" TKey"
|   | |-CXXMethodDecl 0x1afced67ab0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:189:86> col:41 insert 'Map<TKey, TValue> &(const TKey &, const TValue &)' inline
|   | | |-ParmVarDecl 0x1afced678a8 <col:48, col:60> col:60 _key 'const TKey &'
|   | | |-ParmVarDecl 0x1afced67920 <col:66, col:80> col:80 _value 'const TValue &'
|   | | |-AlwaysInlineAttr 0x1afced67b60 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede3130 <./src\Core/Container/Map.h:183:11, line:187:23>
|   | |   |-ParagraphComment 0x1afcede2e88 <line:183:11>
|   | |   | `-TextComment 0x1afcede2e60 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcede2ea8 <col:12, col:34> Name="brief"
|   | |   | `-ParagraphComment 0x1afcede2ef8 <col:18, col:34>
|   | |   |   `-TextComment 0x1afcede2ed0 <col:18, col:34> Text=" Insert into map."
|   | |   |-ParagraphComment 0x1afcede2f40 <line:185:11>
|   | |   | `-TextComment 0x1afcede2f18 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcede2f60 <col:12, line:186:11> [in] implicitly Param="_what"
|   | |   | `-ParagraphComment 0x1afcede2fd8 <col:11>
|   | |   |   `-TextComment 0x1afcede2fb0 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcede2ff8 <col:12, line:187:11> [in] implicitly Param="_from"
|   | |   | `-ParagraphComment 0x1afcede3070 <col:11>
|   | |   |   `-TextComment 0x1afcede3048 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede3090 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcede30e0 <col:19, col:23>
|   | |       `-TextComment 0x1afcede30b8 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afced67ea0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:190:76> col:41 insert 'Map<TKey, TValue> &(TKey &&, TValue &&)' inline
|   | | |-ParmVarDecl 0x1afced67c98 <col:48, col:55> col:55 _key 'TKey &&'
|   | | |-ParmVarDecl 0x1afced67d10 <col:61, col:70> col:70 _value 'TValue &&'
|   | | `-AlwaysInlineAttr 0x1afced67f50 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afced67ff8 <col:25, ./src\Core/Container/Map.h:195:37> col:27 isEmpty 'bool () const' inline
|   | | |-AlwaysInlineAttr 0x1afced68098 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede3258 <./src\Core/Container/Map.h:193:11, col:37>
|   | |   |-ParagraphComment 0x1afcede31b8 <col:11>
|   | |   | `-TextComment 0x1afcede3190 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede31d8 <col:12, col:37> Name="brief"
|   | |     `-ParagraphComment 0x1afcede3228 <col:18, col:37>
|   | |       `-TextComment 0x1afcede3200 <col:18, col:37> Text=" Check map is empty."
|   | |-CXXMethodDecl 0x1afced68140 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:200:40> col:27 isNotEmpty 'bool () const' inline
|   | | |-AlwaysInlineAttr 0x1afced681e0 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede3380 <./src\Core/Container/Map.h:198:11, col:41>
|   | |   |-ParagraphComment 0x1afcede32e0 <col:11>
|   | |   | `-TextComment 0x1afcede32b8 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede3300 <col:12, col:41> Name="brief"
|   | |     `-ParagraphComment 0x1afcede3350 <col:18, col:41>
|   | |       `-TextComment 0x1afcede3328 <col:18, col:41> Text=" Check map is not empty."
|   | |-CXXMethodDecl 0x1afced68288 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:205:36> col:31 last 'Michka::Map::Element &()' inline
|   | | |-AlwaysInlineAttr 0x1afced68328 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede34a8 <./src\Core/Container/Map.h:203:11, col:32>
|   | |   |-ParagraphComment 0x1afcede3408 <col:11>
|   | |   | `-TextComment 0x1afcede33e0 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede3428 <col:12, col:32> Name="brief"
|   | |     `-ParagraphComment 0x1afcede3478 <col:18, col:32>
|   | |       `-TextComment 0x1afcede3450 <col:18, col:32> Text=" Get last item."
|   | |-CXXMethodDecl 0x1afced683a0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:206:37> col:30 last 'Michka::Map::Element () const' inline
|   | | `-AlwaysInlineAttr 0x1afced68440 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afced68720 <col:25, ./src\Core/Container/Map.h:214:64> col:41 remove 'Map<TKey, TValue> &(const TKey &)' inline
|   | | |-ParmVarDecl 0x1afced685a8 <col:48, col:60> col:60 _key 'const TKey &'
|   | | |-AlwaysInlineAttr 0x1afced687c8 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede3738 <./src\Core/Container/Map.h:209:11, line:212:23>
|   | |   |-ParagraphComment 0x1afcede3530 <line:209:11>
|   | |   | `-TextComment 0x1afcede3508 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcede3550 <col:12, col:38> Name="brief"
|   | |   | `-ParagraphComment 0x1afcede35a0 <col:18, col:38>
|   | |   |   `-TextComment 0x1afcede3578 <col:18, col:38> Text=" Remove specific key."
|   | |   |-ParagraphComment 0x1afcede35e8 <line:211:11>
|   | |   | `-TextComment 0x1afcede35c0 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcede3608 <col:12, line:212:11> [in] implicitly Param="_key" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcede3680 <col:11>
|   | |   |   `-TextComment 0x1afcede3658 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede36a0 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcede36f0 <col:19, col:23>
|   | |       `-TextComment 0x1afcede36c8 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afced68aa0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:222:67> col:41 removeAt 'Map<TKey, TValue> &(const u32 &)' inline
|   | | |-ParmVarDecl 0x1afced68928 <col:50, col:61> col:61 _index 'const u32 &'
|   | | |-AlwaysInlineAttr 0x1afced68b48 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede39c8 <./src\Core/Container/Map.h:217:11, line:220:23>
|   | |   |-ParagraphComment 0x1afcede37c0 <line:217:11>
|   | |   | `-TextComment 0x1afcede3798 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcede37e0 <col:12, col:72> Name="brief"
|   | |   | `-ParagraphComment 0x1afcede3830 <col:18, col:72>
|   | |   |   `-TextComment 0x1afcede3808 <col:18, col:72> Text=" Remove at specific index instead of searching for key."
|   | |   |-ParagraphComment 0x1afcede3878 <line:219:11>
|   | |   | `-TextComment 0x1afcede3850 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcede3898 <col:12, line:220:11> [in] implicitly Param="_index" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcede3910 <col:11>
|   | |   |   `-TextComment 0x1afcede38e8 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede3930 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcede3980 <col:19, col:23>
|   | |       `-TextComment 0x1afcede3958 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afced68de0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:229:71> col:41 resize 'Map<TKey, TValue> &(const u32 &)' inline
|   | | |-ParmVarDecl 0x1afced68ca8 <col:48, col:59> col:59 _newCapacity 'const u32 &'
|   | | |-AlwaysInlineAttr 0x1afced68e88 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede3bb8 <./src\Core/Container/Map.h:225:11, line:227:23>
|   | |   |-ParagraphComment 0x1afcede3a50 <line:225:11>
|   | |   | `-TextComment 0x1afcede3a28 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcede3a70 <col:12, col:41> Name="brief"
|   | |   | `-ParagraphComment 0x1afcede3ac0 <col:18, col:41>
|   | |   |   `-TextComment 0x1afcede3a98 <col:18, col:41> Text=" Resize capacity of map."
|   | |   |-ParagraphComment 0x1afcede3b08 <line:227:11>
|   | |   | `-TextComment 0x1afcede3ae0 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede3b28 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcede3b78 <col:19, col:23>
|   | |       `-TextComment 0x1afcede3b50 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afced611d0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:238:82> col:41 swap 'Map<TKey, TValue> &(const TKey &, const TKey &)' inline
|   | | |-ParmVarDecl 0x1afced68fe8 <col:46, col:58> col:58 _key1 'const TKey &'
|   | | |-ParmVarDecl 0x1afced69060 <col:65, col:77> col:77 _key2 'const TKey &'
|   | | |-AlwaysInlineAttr 0x1afced61280 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcede3ee8 <./src\Core/Container/Map.h:232:11, line:236:23>
|   | |   |-ParagraphComment 0x1afcede3c40 <line:232:11>
|   | |   | `-TextComment 0x1afcede3c18 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcede3c60 <col:12, col:51> Name="brief"
|   | |   | `-ParagraphComment 0x1afcede3cb0 <col:18, col:51>
|   | |   |   `-TextComment 0x1afcede3c88 <col:18, col:51> Text=" Swap two values at specific keys."
|   | |   |-ParagraphComment 0x1afcede3cf8 <line:234:11>
|   | |   | `-TextComment 0x1afcede3cd0 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcede3d18 <col:12, line:235:11> [in] implicitly Param="_key1" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcede3d90 <col:11>
|   | |   |   `-TextComment 0x1afcede3d68 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcede3db0 <col:12, line:236:11> [in] implicitly Param="_key2" ParamIndex=1
|   | |   | `-ParagraphComment 0x1afcede3e28 <col:11>
|   | |   |   `-TextComment 0x1afcede3e00 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcede3e48 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcede3e98 <col:19, col:23>
|   | |       `-TextComment 0x1afcede3e70 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afced616b0 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:246:71> col:41 swap 'Map<TKey, TValue> &(Map<TKey, TValue> &)' inline
|   | | |-ParmVarDecl 0x1afced61530 <col:46, col:65> col:65 _other 'Map<TKey, TValue> &'
|   | | |-AlwaysInlineAttr 0x1afced61758 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcee00268 <./src\Core/Container/Map.h:241:11, line:244:23>
|   | |   |-ParagraphComment 0x1afcede3f70 <line:241:11>
|   | |   | `-TextComment 0x1afcede3f48 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcede3f90 <col:12, col:62> Name="brief"
|   | |   | `-ParagraphComment 0x1afcede3fe0 <col:18, col:62>
|   | |   |   `-TextComment 0x1afcede3fb8 <col:18, col:62> Text=" Swap values of this map with another vector."
|   | |   |-ParagraphComment 0x1afcede4028 <line:243:11>
|   | |   | `-TextComment 0x1afcede4000 <col:11> Text=" "
|   | |   |-ParamCommandComment 0x1afcede4048 <col:12, line:244:11> [in] implicitly Param="_other" ParamIndex=0
|   | |   | `-ParagraphComment 0x1afcede40c0 <col:11>
|   | |   |   `-TextComment 0x1afcede4098 <col:11> Text=" "
|   | |   `-BlockCommandComment 0x1afcee001d0 <col:12, col:23> Name="return"
|   | |     `-ParagraphComment 0x1afcee00220 <col:19, col:23>
|   | |       `-TextComment 0x1afcee001f8 <col:19, col:23> Text=" Self"
|   | |-CXXMethodDecl 0x1afced61900 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:253:50> col:29 take 'TValue (const TKey &)' inline
|   | | |-ParmVarDecl 0x1afced617f0 <col:34, col:46> col:46 _key 'const TKey &'
|   | | |-AlwaysInlineAttr 0x1afced619a8 <./src\Core/Defines.h:54:25> __forceinline
|   | | `-FullComment 0x1afcee00480 <./src\Core/Container/Map.h:249:11, line:252:9>
|   | |   |-ParagraphComment 0x1afcee002f0 <line:249:11>
|   | |   | `-TextComment 0x1afcee002c8 <col:11> Text=" "
|   | |   |-BlockCommandComment 0x1afcee00310 <col:12, col:63> Name="brief"
|   | |   | `-ParagraphComment 0x1afcee00360 <col:18, col:63>
|   | |   |   `-TextComment 0x1afcee00338 <col:18, col:63> Text=" Get value of specific key and then remove it."
|   | |   |-ParagraphComment 0x1afcee003a8 <line:251:11>
|   | |   | `-TextComment 0x1afcee00380 <col:11> Text=" "
|   | |   `-ParamCommandComment 0x1afcee003c8 <col:12, line:252:9> [in] implicitly Param="_key" ParamIndex=0
|   | |     `-ParagraphComment 0x1afcee00440 <col:1, col:9>
|   | |       `-TextComment 0x1afcee00418 <col:1, col:9> Text="         "
|   | |-CXXMethodDecl 0x1afced61c30 <line:255:9, col:84> col:28 invalid operator= 'Map<TKey, TValue> &(const int &)'
|   | | `-ParmVarDecl 0x1afced61af0 <col:40, col:78> col:78 invalid _array 'const int &'
|   | |-CXXMethodDecl 0x1afced62080 <line:256:9, col:71> col:28 operator= 'Map<TKey, TValue> &(const Map<TKey, TValue> &)'
|   | | `-ParmVarDecl 0x1afced61f00 <col:40, col:65> col:65 _other 'const Map<TKey, TValue> &'
|   | |-CXXMethodDecl 0x1afced624d0 <line:257:9, col:66> col:28 operator= 'Map<TKey, TValue> &(Map<TKey, TValue> &&)'
|   | | `-ParmVarDecl 0x1afced62350 <col:40, col:60> col:60 _other 'Map<TKey, TValue> &&'
|   | |-CXXMethodDecl 0x1afced62690 <./src\Core/Defines.h:54:25, ./src\Core/Container/Map.h:259:59> col:30 operator[] 'TValue &(const TKey &)' inline
|   | | |-ParmVarDecl 0x1afced62588 <col:43, col:55> col:55 _key 'const TKey &'
|   | | `-AlwaysInlineAttr 0x1afced62738 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afced628b0 <col:25, ./src\Core/Container/Map.h:260:60> col:29 operator[] 'TValue (const TKey &) const' inline
|   | | |-ParmVarDecl 0x1afced627a0 <col:42, col:54> col:54 _key 'const TKey &'
|   | | `-AlwaysInlineAttr 0x1afced62958 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afced62c10 <col:25, ./src\Core/Container/Map.h:262:73> col:27 operator== 'bool (const Map<TKey, TValue> &) const' inline
|   | | |-ParmVarDecl 0x1afced62b00 <col:40, col:65> col:65 _other 'const Map<TKey, TValue> &'
|   | | `-AlwaysInlineAttr 0x1afced62cb8 <./src\Core/Defines.h:54:25> __forceinline
|   | |-CXXMethodDecl 0x1afced62f30 <col:25, ./src\Core/Container/Map.h:263:73> col:27 operator!= 'bool (const Map<TKey, TValue> &) const' inline
|   | | |-ParmVarDecl 0x1afced62e60 <col:40, col:65> col:65 _other 'const Map<TKey, TValue> &'
|   | | `-AlwaysInlineAttr 0x1afced62fd8 <./src\Core/Defines.h:54:25> __forceinline
|   | |-AccessSpecDecl 0x1afced63060 <./src\Core/Container/Map.h:265:5, col:11> col:5 public
|   | |-VarDecl 0x1afced630a0 <line:269:5, col:50> col:22 notFound 'const u32':'const unsigned int' static cinit
|   | | |-DependentScopeDeclRefExpr 0x1afced63238 <col:33, col:50> '<dependent type>' lvalue
|   | | `-FullComment 0x1afcee005a8 <line:267:7, col:51>
|   | |   |-ParagraphComment 0x1afcee00508 <col:7>
|   | |   | `-TextComment 0x1afcee004e0 <col:7> Text=" "
|   | |   `-BlockCommandComment 0x1afcee00528 <col:8, col:51> Name="brief"
|   | |     `-ParagraphComment 0x1afcee00578 <col:14, col:51>
|   | |       `-TextComment 0x1afcee00550 <col:14, col:51> Text=" Not found index for search functions."
|   | |-AccessSpecDecl 0x1afced63270 <line:271:5, col:14> col:5 protected
|   | `-FieldDecl 0x1afced63358 <line:272:9, col:25> col:25 mData 'Vector<Michka::Map::Element>'
|   `-ClassTemplateSpecializationDecl 0x1afced769a8 <line:37:5, line:273:5> line:38:11 class Map
|     |-TemplateArgument type 'Michka::StringTemplate<wchar_t>'
|     | `-RecordType 0x1afce07e360 'Michka::StringTemplate<wchar_t>'
|     |   `-ClassTemplateSpecialization 0x1afce07e280 'StringTemplate'
|     `-TemplateArgument type 'Michka::Variant'
|       `-RecordType 0x1afcecea860 'Michka::Variant'
|         `-CXXRecord 0x1afcecf76c8 'Variant'
|-NamespaceDecl 0x1afced634c8 prev 0x1afced59f18 <./src\Core/Container/Map.inl:30:1, line:429:1> line:30:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| |-CXXConstructorDecl 0x1afced63ba0 parent 0x1afced5a770 prev 0x1afced5ac40 <line:32:5, line:33:85> col:46 Element 'void (TKey &&, TValue &&)' inline
| | |-ParmVarDecl 0x1afced63a10 <col:54, col:61> col:61 _first 'TKey &&'
| | |-ParmVarDecl 0x1afced63ac0 <col:69, col:78> col:78 _second 'TValue &&'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced63ca0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced64390 parent 0x1afced5a770 prev 0x1afced5af20 <./src\Core/Container/Map.inl:38:5, line:39:95> col:46 Element 'void (const TKey &, const TValue &)' inline
| | |-ParmVarDecl 0x1afced64200 <col:54, col:66> col:66 _first 'const TKey &'
| | |-ParmVarDecl 0x1afced642b0 <col:74, col:88> col:88 _second 'const TValue &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced64490 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced64a50 parent 0x1afced5a770 prev 0x1afced5f170 <./src\Core/Container/Map.inl:44:5, line:45:75> col:46 Element 'void (const Michka::Map::Element &)' inline
| | |-ParmVarDecl 0x1afced649c0 <col:54, col:69> col:69 _other 'const Michka::Map::Element &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced64b48 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced69160 parent 0x1afced5a770 prev 0x1afced5f390 <./src\Core/Container/Map.inl:50:5, line:51:70> col:46 Element 'void (Michka::Map::Element &&)' inline
| | |-ParmVarDecl 0x1afced65070 <col:54, col:64> col:64 _other 'Michka::Map::Element &&'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced69258 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced696e0 parent 0x1afced5a770 prev 0x1afced5f520 <./src\Core/Container/Map.inl:56:5, line:57:56> col:52 key 'TKey &()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced697c8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced69bf0 parent 0x1afced5a770 prev 0x1afced5f6a0 <./src\Core/Container/Map.inl:62:5, line:63:57> col:51 key 'TKey () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced69cd8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced6a130 parent 0x1afced5a770 prev 0x1afced5f880 <./src\Core/Container/Map.inl:68:5, line:69:60> col:54 value 'TValue &()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced6a218 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced6a640 parent 0x1afced5a770 prev 0x1afced5fa00 <./src\Core/Container/Map.inl:74:5, line:75:61> col:53 value 'TValue () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced6a728 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced6ad50 parent 0x1afced5a770 prev 0x1afced60110 <./src\Core/Container/Map.inl:80:5, line:81:106> col:51 operator== 'bool (const Map<TKey, TValue>::Element &) const' inline
| | |-ParmVarDecl 0x1afced6ac88 <col:64, col:98> col:98 _other 'const Map<TKey, TValue>::Element &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced6ae40 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced5b400 parent 0x1afced5a770 prev 0x1afced602b0 <./src\Core/Container/Map.inl:86:5, line:87:106> col:51 operator!= 'bool (const Map<TKey, TValue>::Element &) const' inline
| | |-ParmVarDecl 0x1afced5b338 <col:64, col:98> col:98 _other 'const Map<TKey, TValue>::Element &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced5b4f0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced5be58 parent 0x1afced5a770 prev 0x1afced5fd50 <./src\Core/Container/Map.inl:92:5, line:93:135> col:83 operator= 'typename Map<TKey, TValue>::Element &(const Map<TKey, TValue>::Element &)' inline
| | |-ParmVarDecl 0x1afced5bbf8 <col:95, col:129> col:129 _other 'const Map<TKey, TValue>::Element &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced5bf48 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced5c858 parent 0x1afced5a770 prev 0x1afced5ff30 <./src\Core/Container/Map.inl:101:5, line:102:130> col:83 operator= 'typename Map<TKey, TValue>::Element &(Map<TKey, TValue>::Element &&)' inline
| | |-ParmVarDecl 0x1afced5c5f8 <col:95, col:124> col:124 _other 'Map<TKey, TValue>::Element &&'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced5c948 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced5ccd0 parent 0x1afced5a0b8 prev 0x1afced60500 <./src\Core/Container/Map.inl:110:5, line:111:41> col:37 Map<TKey, TValue> 'void ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced5cdc0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced71510 parent 0x1afced5a0b8 <./src\Core/Container/Map.inl:116:5, line:117:104> col:37 invalid Map<TKey, TValue> 'void (const int &)' inline
| | |-ParmVarDecl 0x1afced71480 <col:41, col:98> col:98 invalid _array 'const int &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced71608 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced71c80 parent 0x1afced5a0b8 prev 0x1afced60a50 <./src\Core/Container/Map.inl:122:5, line:123:72> col:37 Map<TKey, TValue> 'void (const Map<TKey, TValue> &)' inline
| | |-ParmVarDecl 0x1afced71bb0 <col:41, col:66> col:66 _other 'const Map<TKey, TValue> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced71d78 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXConstructorDecl 0x1afced723f0 parent 0x1afced5a0b8 prev 0x1afced60df0 <./src\Core/Container/Map.inl:128:5, line:129:67> col:37 Map<TKey, TValue> 'void (Map<TKey, TValue> &&)' inline
| | |-ParmVarDecl 0x1afced72320 <col:41, col:61> col:61 _other 'Map<TKey, TValue> &&'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced724e8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced72c18 parent 0x1afced5a0b8 prev 0x1afced61040 <./src\Core/Container/Map.inl:134:5, line:135:94> col:74 at 'typename Map<TKey, TValue>::Element &(const u32 &)' inline
| | |-ParmVarDecl 0x1afced729b0 <col:77, col:88> col:88 _index 'const u32 &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced72d08 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced6b3d0 parent 0x1afced5a0b8 prev 0x1afced652c0 <./src\Core/Container/Map.inl:140:5, line:141:95> col:73 at 'typename Map<TKey, TValue>::Element (const u32 &) const' inline
| | |-ParmVarDecl 0x1afced6b1a8 <col:76, col:87> col:87 _index 'const u32 &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced6b4c0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced6bb70 parent 0x1afced5a0b8 prev 0x1afced654a0 <./src\Core/Container/Map.inl:146:5, line:147:80> col:74 begin 'typename Map<TKey, TValue>::Iterator ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced6bc58 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced6c300 parent 0x1afced5a0b8 prev 0x1afced65680 <./src\Core/Container/Map.inl:152:5, line:153:87> col:79 begin 'typename Map<TKey, TValue>::ConstIterator () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced6c3e8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced6c9b0 parent 0x1afced5a0b8 prev 0x1afced659a0 <./src\Core/Container/Map.inl:158:5, line:159:62> col:56 clear 'Map<TKey, TValue> &()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced6ca98 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced6d180 parent 0x1afced5a0b8 prev 0x1afced65ae8 <./src\Core/Container/Map.inl:166:5, line:167:78> col:74 end 'typename Map<TKey, TValue>::Iterator ()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced6d268 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced6d8d0 parent 0x1afced5a0b8 prev 0x1afced65c30 <./src\Core/Container/Map.inl:172:5, line:173:85> col:79 end 'typename Map<TKey, TValue>::ConstIterator () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced6d9b8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced6e0b0 parent 0x1afced5a0b8 <./src\Core/Container/Map.inl:178:5, line:179:115> col:56 invalid filter 'Map<TKey, TValue> &(const int &)' inline
| | |-ParmVarDecl 0x1afced6dea8 <col:63, col:106> col:106 invalid _callback 'const int &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced6e1a0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced6e848 parent 0x1afced5a0b8 prev 0x1afced66210 <./src\Core/Container/Map.inl:186:5, line:187:80> col:74 first 'typename Map<TKey, TValue>::Element &()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced6e930 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced6efa0 parent 0x1afced5a0b8 prev 0x1afced66360 <./src\Core/Container/Map.inl:192:5, line:193:81> col:73 first 'typename Map<TKey, TValue>::Element () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced6f088 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced7b4a0 parent 0x1afced5a0b8 prev 0x1afced669e8 <./src\Core/Container/Map.inl:198:5, line:199:51> col:41 getSize 'u32 () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced7b588 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced7b910 parent 0x1afced5a0b8 prev 0x1afced664a8 <./src\Core/Container/Map.inl:204:5, line:205:55> col:41 getCapacity 'u32 () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced7b9f8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced7c0b8 parent 0x1afced5a0b8 <./src\Core/Container/Map.inl:210:5, line:211:121> col:55 invalid getFiltered 'Map<TKey, TValue> (const int &) const' inline
| | |-ParmVarDecl 0x1afced7bee8 <col:67, col:110> col:110 invalid _callback 'const int &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced7c1a8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced7c700 parent 0x1afced5a0b8 prev 0x1afced66cb0 <./src\Core/Container/Map.inl:219:5, line:220:95> col:44 getValue 'TValue (const TKey &, const TValue &) const' inline
| | |-ParmVarDecl 0x1afced7c550 <col:53, col:65> col:65 _key 'const TKey &'
| | |-ParmVarDecl 0x1afced7c600 <col:71, col:85> col:85 _default 'const TValue &' cinit
| | | `-CXXUnresolvedConstructExpr 0x1afced633d8 <./src\Core/Container/Map.h:147:81, col:88> 'TValue' 'TValue'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced7c7f8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced7cc70 parent 0x1afced5a0b8 prev 0x1afced66f00 <./src\Core/Container/Map.inl:231:5, line:232:67> col:42 hasKey 'bool (const TKey &) const' inline
| | |-ParmVarDecl 0x1afced7cba0 <col:49, col:61> col:61 _key 'const TKey &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced7cd60 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced791e0 parent 0x1afced5a0b8 prev 0x1afced67178 <./src\Core/Container/Map.inl:237:5, line:238:73> col:42 hasValue 'bool (const TValue &) const' inline
| | |-ParmVarDecl 0x1afced7d110 <col:51, col:65> col:65 _value 'const TValue &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced792d0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced79750 parent 0x1afced5a0b8 prev 0x1afced673c0 <./src\Core/Container/Map.inl:243:5, line:244:71> col:41 indexOfKey 'u32 (const TKey &) const' inline
| | |-ParmVarDecl 0x1afced79680 <col:52, col:64> col:64 _what 'const TKey &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced79840 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced79d40 parent 0x1afced5a0b8 prev 0x1afced67690 <./src\Core/Container/Map.inl:252:5, line:253:92> col:41 indexOfValue 'u32 (const TValue &, const u32) const' inline
| | |-ParmVarDecl 0x1afced79bf0 <col:54, col:68> col:68 _what 'const TValue &'
| | |-ParmVarDecl 0x1afced79c68 <col:75, col:85> col:85 _from 'const u32':'const unsigned int' cinit
| | | `-ImplicitCastExpr 0x1afced63420 <./src\Core/Container/Map.h:180:78> 'u32':'unsigned int' <IntegralCast>
| | |   `-IntegerLiteral 0x1afced633f8 <col:78> 'int' 0
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced79e38 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced7a580 parent 0x1afced5a0b8 prev 0x1afced67ab0 <./src\Core/Container/Map.inl:261:5, line:262:101> col:56 insert 'Map<TKey, TValue> &(const TKey &, const TValue &)' inline
| | |-ParmVarDecl 0x1afced7a2b0 <col:63, col:75> col:75 _key 'const TKey &'
| | |-ParmVarDecl 0x1afced7a360 <col:81, col:95> col:95 _value 'const TValue &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced7a678 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced7aa00 parent 0x1afced5a0b8 prev 0x1afced67ff8 <./src\Core/Container/Map.inl:273:5, line:274:52> col:42 isEmpty 'bool () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced7aae8 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced7ae70 parent 0x1afced5a0b8 prev 0x1afced68140 <./src\Core/Container/Map.inl:279:5, line:280:55> col:42 isNotEmpty 'bool () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced7af58 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced775f8 parent 0x1afced5a0b8 prev 0x1afced68288 <./src\Core/Container/Map.inl:285:5, line:286:79> col:74 last 'typename Map<TKey, TValue>::Element &()' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced776e0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced77d50 parent 0x1afced5a0b8 prev 0x1afced683a0 <./src\Core/Container/Map.inl:291:5, line:292:80> col:73 last 'typename Map<TKey, TValue>::Element () const' inline
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced77e38 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced784c0 parent 0x1afced5a0b8 prev 0x1afced68720 <./src\Core/Container/Map.inl:297:5, line:298:79> col:56 remove 'Map<TKey, TValue> &(const TKey &)' inline
| | |-ParmVarDecl 0x1afced782b0 <col:63, col:75> col:75 _key 'const TKey &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced785b0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced78c10 parent 0x1afced5a0b8 prev 0x1afced68aa0 <./src\Core/Container/Map.inl:309:5, line:310:82> col:56 removeAt 'Map<TKey, TValue> &(const u32 &)' inline
| | |-ParmVarDecl 0x1afced78a00 <col:65, col:76> col:76 _index 'const u32 &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced78d00 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced7d390 parent 0x1afced5a0b8 prev 0x1afced68de0 <./src\Core/Container/Map.inl:316:5, line:317:86> col:56 resize 'Map<TKey, TValue> &(const u32 &)' inline
| | |-ParmVarDecl 0x1afced79150 <col:63, col:74> col:74 _newCapacity 'const u32 &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced7d480 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced7db90 parent 0x1afced5a0b8 prev 0x1afced611d0 <./src\Core/Container/Map.inl:324:5, line:325:97> col:56 swap 'Map<TKey, TValue> &(const TKey &, const TKey &)' inline
| | |-ParmVarDecl 0x1afced7d900 <col:61, col:73> col:73 _key1 'const TKey &'
| | |-ParmVarDecl 0x1afced7d978 <col:80, col:92> col:92 _key2 'const TKey &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced7dc88 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced7e420 parent 0x1afced5a0b8 prev 0x1afced616b0 <./src\Core/Container/Map.inl:332:5, line:333:86> col:56 swap 'Map<TKey, TValue> &(Map<TKey, TValue> &)' inline
| | |-ParmVarDecl 0x1afced7e210 <col:61, col:80> col:80 _other 'Map<TKey, TValue> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced7e510 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced7e9b0 parent 0x1afced5a0b8 prev 0x1afced61900 <./src\Core/Container/Map.inl:340:5, line:341:65> col:44 take 'TValue (const TKey &)' inline
| | |-ParmVarDecl 0x1afced7e8c0 <col:49, col:61> col:61 _key 'const TKey &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced7eaa0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced6f190 parent 0x1afced5a0b8 prev 0x1afced67ea0 <./src\Core/Container/Map.inl:346:5, line:347:91> col:56 insert 'Map<TKey, TValue> &(TKey &&, TValue &&)' inline
| | |-ParmVarDecl 0x1afced7ef20 <col:63, col:70> col:70 _key 'TKey &&'
| | |-ParmVarDecl 0x1afced7efd0 <col:76, col:85> col:85 _value 'TValue &&'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced6f288 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced6fa50 parent 0x1afced5a0b8 <./src\Core/Container/Map.inl:358:5, line:359:118> col:43 invalid operator= 'Map<TKey, TValue> &(const int &)'
| | |-ParmVarDecl 0x1afced6f840 <col:55, col:112> col:112 invalid _array 'const int &'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afced70280 parent 0x1afced5a0b8 prev 0x1afced62080 <line:369:5, line:370:86> col:43 operator= 'Map<TKey, TValue> &(const Map<TKey, TValue> &)'
| | |-ParmVarDecl 0x1afced70070 <col:55, col:80> col:80 _other 'const Map<TKey, TValue> &'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afced70ab0 parent 0x1afced5a0b8 prev 0x1afced624d0 <line:377:5, line:378:81> col:43 operator= 'Map<TKey, TValue> &(Map<TKey, TValue> &&)'
| | |-ParmVarDecl 0x1afced708a0 <col:55, col:75> col:75 _other 'Map<TKey, TValue> &&'
| | `-<<<NULL>>>
| |-CXXMethodDecl 0x1afced70fe0 parent 0x1afced5a0b8 prev 0x1afced628b0 <line:385:5, line:386:75> col:44 operator[] 'TValue (const TKey &) const' inline
| | |-ParmVarDecl 0x1afced70ef0 <col:57, col:69> col:69 _key 'const TKey &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced710d0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced755e0 parent 0x1afced5a0b8 prev 0x1afced62690 <./src\Core/Container/Map.inl:397:5, line:398:74> col:45 operator[] 'TValue &(const TKey &)' inline
| | |-ParmVarDecl 0x1afced754c0 <col:58, col:70> col:70 _key 'const TKey &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced756d0 <./src\Core/Defines.h:54:25> __forceinline
| |-CXXMethodDecl 0x1afced75c60 parent 0x1afced5a0b8 prev 0x1afced62c10 <./src\Core/Container/Map.inl:418:5, line:419:88> col:42 operator== 'bool (const Map<TKey, TValue> &) const' inline
| | |-ParmVarDecl 0x1afced75b90 <col:55, col:80> col:80 _other 'const Map<TKey, TValue> &'
| | |-<<<NULL>>>
| | `-AlwaysInlineAttr 0x1afced75d50 <./src\Core/Defines.h:54:25> __forceinline
| `-CXXMethodDecl 0x1afced762e0 parent 0x1afced5a0b8 prev 0x1afced62f30 <./src\Core/Container/Map.inl:424:5, line:425:88> col:42 operator!= 'bool (const Map<TKey, TValue> &) const' inline
|   |-ParmVarDecl 0x1afced76210 <col:55, col:80> col:80 _other 'const Map<TKey, TValue> &'
|   |-<<<NULL>>>
|   `-AlwaysInlineAttr 0x1afced763d0 <./src\Core/Defines.h:54:25> __forceinline
|-NamespaceDecl 0x1afced76458 prev 0x1afced634c8 <./src\Core/Reflection/MetaAttributes.h:35:1, line:77:1> line:35:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| `-CXXRecordDecl 0x1afced764c8 <line:37:5, line:76:5> line:37:22 invalid class MetaAttributes definition
|   |-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
|   | |-MoveConstructor
|   | |-CopyAssignment simple trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment
|   | `-Destructor non_trivial user_declared
|   |-DLLExportAttr 0x1afced765f0 <./src\Core/Defines.h:65:34>
|   |-CXXRecordDecl 0x1afced76648 <./src\Core/Reflection/MetaAttributes.h:37:5, col:22> col:22 implicit referenced class MetaAttributes
|   |-AccessSpecDecl 0x1afced766d8 <line:39:5, col:11> col:5 public
|   |-CXXConstructorDecl 0x1afced76778 <line:40:9, col:24> col:9 used MetaAttributes 'void ()'
|   | `-DLLExportAttr 0x1afced7f980 <./src\Core/Defines.h:65:34> Inherited
|   |-CXXDestructorDecl 0x1afced76868 <./src\Core/Reflection/MetaAttributes.h:41:9, col:25> col:9 used ~MetaAttributes 'void () noexcept'
|   | `-DLLExportAttr 0x1afced7f9d8 <./src\Core/Defines.h:65:34> Inherited
|   |-CXXMethodDecl 0x1afced76ca0 <./src\Core/Reflection/MetaAttributes.h:48:9, col:51> col:37 used getAttributes 'const Map<Michka::String, Michka::Variant> &()'
|   | |-DLLExportAttr 0x1afced7fa30 <./src\Core/Defines.h:65:34> Inherited
|   | `-FullComment 0x1afcee00810 <./src\Core/Reflection/MetaAttributes.h:44:11, line:46:46>
|   |   |-ParagraphComment 0x1afcee00630 <line:44:11>
|   |   | `-TextComment 0x1afcee00608 <col:11> Text=" "
|   |   |-BlockCommandComment 0x1afcee00650 <col:12, col:44> Name="brief"
|   |   | `-ParagraphComment 0x1afcee006a0 <col:18, col:44>
|   |   |   `-TextComment 0x1afcee00678 <col:18, col:44> Text=" Get the attributes object."
|   |   |-ParagraphComment 0x1afcee006e8 <line:46:11>
|   |   | `-TextComment 0x1afcee006c0 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcee00708 <col:12, col:46> Name="return"
|   |     `-ParagraphComment 0x1afcee007d0 <col:19, col:46>
|   |       |-TextComment 0x1afcee00730 <col:19, col:28> Text=" const Map"
|   |       |-TextComment 0x1afcee00750 <col:29, col:35> Text="<String"
|   |       |-TextComment 0x1afcee00770 <col:36, col:45> Text=", Variant>"
|   |       `-TextComment 0x1afcee00790 <col:46> Text="&"
|   |-CXXMethodDecl 0x1afced76ec0 <line:56:9, col:51> col:17 used getAttribute 'Michka::Variant (const Michka::String &) const'
|   | |-ParmVarDecl 0x1afced76d80 <col:30, col:44> col:44 _name 'const Michka::String &'
|   | |-DLLExportAttr 0x1afced7fa88 <./src\Core/Defines.h:65:34> Inherited
|   | `-FullComment 0x1afcee00aa0 <./src\Core/Reflection/MetaAttributes.h:51:11, line:54:26>
|   |   |-ParagraphComment 0x1afcee00898 <line:51:11>
|   |   | `-TextComment 0x1afcee00870 <col:11> Text=" "
|   |   |-BlockCommandComment 0x1afcee008b8 <col:12, col:40> Name="brief"
|   |   | `-ParagraphComment 0x1afcee00908 <col:18, col:40>
|   |   |   `-TextComment 0x1afcee008e0 <col:18, col:40> Text=" Get a attribute value."
|   |   |-ParagraphComment 0x1afcee00950 <line:53:11>
|   |   | `-TextComment 0x1afcee00928 <col:11> Text=" "
|   |   |-ParamCommandComment 0x1afcee00970 <col:12, line:54:11> [in] implicitly Param="_name" ParamIndex=0
|   |   | `-ParagraphComment 0x1afcee009e8 <col:11>
|   |   |   `-TextComment 0x1afcee009c0 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcee00a08 <col:12, col:26> Name="return"
|   |     `-ParagraphComment 0x1afcee00a58 <col:19, col:26>
|   |       `-TextComment 0x1afcee00a30 <col:19, col:26> Text=" Variant"
|   |-CXXMethodDecl 0x1afced770b0 <line:63:9, col:48> col:14 used hasAttribute 'bool (const Michka::String &) const'
|   | |-ParmVarDecl 0x1afced76fa8 <col:27, col:41> col:41 _name 'const Michka::String &'
|   | |-DLLExportAttr 0x1afced7fae0 <./src\Core/Defines.h:65:34> Inherited
|   | `-FullComment 0x1afcee00cb8 <./src\Core/Reflection/MetaAttributes.h:59:11, line:62:9>
|   |   |-ParagraphComment 0x1afcee00b28 <line:59:11>
|   |   | `-TextComment 0x1afcee00b00 <col:11> Text=" "
|   |   |-BlockCommandComment 0x1afcee00b48 <col:12, col:54> Name="brief"
|   |   | `-ParagraphComment 0x1afcee00b98 <col:18, col:54>
|   |   |   `-TextComment 0x1afcee00b70 <col:18, col:54> Text=" Check if specific aAttribute exists."
|   |   |-ParagraphComment 0x1afcee00be0 <line:61:11>
|   |   | `-TextComment 0x1afcee00bb8 <col:11> Text=" "
|   |   `-ParamCommandComment 0x1afcee00c00 <col:12, line:62:9> [in] implicitly Param="_name" ParamIndex=0
|   |     `-ParagraphComment 0x1afcee00c78 <col:1, col:9>
|   |       `-TextComment 0x1afcee00c50 <col:1, col:9> Text="         "
|   |-CXXMethodDecl 0x1afced7f3d0 <line:72:9, col:80> col:25 used setAttribute 'Michka::MetaAttributes &(const Michka::String &, const Michka::Variant &)'
|   | |-ParmVarDecl 0x1afced7f210 <col:38, col:52> col:52 _name 'const Michka::String &'
|   | |-ParmVarDecl 0x1afced7f288 <col:59, col:74> col:74 _value 'const Michka::Variant &'
|   | |-DLLExportAttr 0x1afced7fb38 <./src\Core/Defines.h:65:34> Inherited
|   | `-FullComment 0x1afcee00fe8 <./src\Core/Reflection/MetaAttributes.h:66:11, line:70:23>
|   |   |-ParagraphComment 0x1afcee00d40 <line:66:11>
|   |   | `-TextComment 0x1afcee00d18 <col:11> Text=" "
|   |   |-BlockCommandComment 0x1afcee00d60 <col:12, col:40> Name="brief"
|   |   | `-ParagraphComment 0x1afcee00db0 <col:18, col:40>
|   |   |   `-TextComment 0x1afcee00d88 <col:18, col:40> Text=" Set a attribute value."
|   |   |-ParagraphComment 0x1afcee00df8 <line:68:11>
|   |   | `-TextComment 0x1afcee00dd0 <col:11> Text=" "
|   |   |-ParamCommandComment 0x1afcee00e18 <col:12, line:69:11> [in] implicitly Param="_name" ParamIndex=0
|   |   | `-ParagraphComment 0x1afcee00e90 <col:11>
|   |   |   `-TextComment 0x1afcee00e68 <col:11> Text=" "
|   |   |-ParamCommandComment 0x1afcee00eb0 <col:12, line:70:11> [in] implicitly Param="_value" ParamIndex=1
|   |   | `-ParagraphComment 0x1afcee00f28 <col:11>
|   |   |   `-TextComment 0x1afcee00f00 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcee00f48 <col:12, col:23> Name="return"
|   |     `-ParagraphComment 0x1afcee00f98 <col:19, col:23>
|   |       `-TextComment 0x1afcee00f70 <col:19, col:23> Text=" Self"
|   |-AccessSpecDecl 0x1afced7f480 <line:74:5, col:14> col:5 protected
|   |-FieldDecl 0x1afced7f5c0 <line:75:9, col:30> col:30 invalid mAttributes 'Map<Michka::String, Michka::Variant>':'Michka::Map<Michka::StringTemplate<wchar_t>, Michka::Variant>'
|   |-CXXConstructorDecl 0x1afced7f650 <line:37:22> col:22 implicit constexpr MetaAttributes 'void (const Michka::MetaAttributes &)' inline default trivial noexcept-unevaluated 0x1afced7f650
|   | `-ParmVarDecl 0x1afced7f780 <col:22> col:22 'const Michka::MetaAttributes &'
|   `-CXXMethodDecl 0x1afced7f7f0 <col:22> col:22 implicit used invalid operator= 'Michka::MetaAttributes &(const Michka::MetaAttributes &) noexcept' inline default trivial
|     |-ParmVarDecl 0x1afced7f910 <col:22> col:22 'const Michka::MetaAttributes &'
|     `-DLLExportAttr 0x1afced7fb90 <./src\Core/Defines.h:65:34> Inherited
|-NamespaceDecl 0x1afced7fcb8 prev 0x1afced76458 <./src\Core/Reflection/ClassReflection.h:53:1, line:111:1> line:53:11 Michka
| |-original Namespace 0x1afce07dc78 'Michka'
| `-CXXRecordDecl 0x1afced7fd28 <line:55:5, line:110:5> line:55:22 class ClassReflection definition
|   |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
|   | |-MoveConstructor
|   | |-CopyAssignment trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment
|   | `-Destructor non_trivial user_declared
|   |-DLLExportAttr 0x1afced7fe50 <./src\Core/Defines.h:65:34>
|   |-CXXRecordDecl 0x1afced7fea8 <./src\Core/Reflection/ClassReflection.h:55:5, col:22> col:22 implicit referenced class ClassReflection
|   |-AccessSpecDecl 0x1afced7ff38 <line:57:5, col:11> col:5 public
|   |-CXXConstructorDecl 0x1afced80370 <line:58:9, col:132> col:9 used ClassReflection 'void (const char *, const char *, const char *, const u64 &, const char *)'
|   | |-ParmVarDecl 0x1afced7ff80 <col:25, col:37> col:37 _name 'const char *'
|   | |-ParmVarDecl 0x1afced80000 <col:44, col:56> col:56 _rawname 'const char *'
|   | |-ParmVarDecl 0x1afced80080 <col:66, col:78> col:78 _typename 'const char *'
|   | |-ParmVarDecl 0x1afced80130 <col:89, col:100> col:100 _typehash 'const u64 &'
|   | |-ParmVarDecl 0x1afced801b0 <col:111, col:123> col:123 _filename 'const char *'
|   | `-DLLExportAttr 0x1afced812d0 <./src\Core/Defines.h:65:34> Inherited
|   |-CXXDestructorDecl 0x1afced80488 <./src\Core/Reflection/ClassReflection.h:59:9, col:26> col:9 used ~ClassReflection 'void () noexcept'
|   | `-DLLExportAttr 0x1afced81328 <./src\Core/Defines.h:65:34> Inherited
|   |-CXXMethodDecl 0x1afced80608 <./src\Core/Reflection/ClassReflection.h:66:9, col:35> col:21 used getFileName 'const char *() const'
|   | |-DLLExportAttr 0x1afced81380 <./src\Core/Defines.h:65:34> Inherited
|   | `-FullComment 0x1afcee011d8 <./src\Core/Reflection/ClassReflection.h:62:11, line:64:30>
|   |   |-ParagraphComment 0x1afcee01070 <line:62:11>
|   |   | `-TextComment 0x1afcee01048 <col:11> Text=" "
|   |   |-BlockCommandComment 0x1afcee01090 <col:12, col:47> Name="brief"
|   |   | `-ParagraphComment 0x1afcee010e0 <col:18, col:47>
|   |   |   `-TextComment 0x1afcee010b8 <col:18, col:47> Text=" Get source filename of class."
|   |   |-ParagraphComment 0x1afcee01128 <line:64:11>
|   |   | `-TextComment 0x1afcee01100 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcee01148 <col:12, col:30> Name="return"
|   |     `-ParagraphComment 0x1afcee01198 <col:19, col:30>
|   |       `-TextComment 0x1afcee01170 <col:19, col:30> Text=" const char*"
|   |-CXXMethodDecl 0x1afced80700 <line:73:9, col:31> col:21 used getName 'const char *() const'
|   | |-DLLExportAttr 0x1afced813d8 <./src\Core/Defines.h:65:34> Inherited
|   | `-FullComment 0x1afcee013c8 <./src\Core/Reflection/ClassReflection.h:69:11, line:71:30>
|   |   |-ParagraphComment 0x1afcee01260 <line:69:11>
|   |   | `-TextComment 0x1afcee01238 <col:11> Text=" "
|   |   |-BlockCommandComment 0x1afcee01280 <col:12, col:33> Name="brief"
|   |   | `-ParagraphComment 0x1afcee012d0 <col:18, col:33>
|   |   |   `-TextComment 0x1afcee012a8 <col:18, col:33> Text=" Get class name."
|   |   |-ParagraphComment 0x1afcee01318 <line:71:11>
|   |   | `-TextComment 0x1afcee012f0 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcee01338 <col:12, col:30> Name="return"
|   |     `-ParagraphComment 0x1afcee01388 <col:19, col:30>
|   |       `-TextComment 0x1afcee01360 <col:19, col:30> Text=" const char*"
|   |-CXXMethodDecl 0x1afced807f8 <line:80:9, col:34> col:21 used getRawName 'const char *() const'
|   | |-DLLExportAttr 0x1afced81430 <./src\Core/Defines.h:65:34> Inherited
|   | `-FullComment 0x1afcee015b8 <./src\Core/Reflection/ClassReflection.h:76:11, line:78:30>
|   |   |-ParagraphComment 0x1afcee01450 <line:76:11>
|   |   | `-TextComment 0x1afcee01428 <col:11> Text=" "
|   |   |-BlockCommandComment 0x1afcee01470 <col:12, col:56> Name="brief"
|   |   | `-ParagraphComment 0x1afcee014c0 <col:18, col:56>
|   |   |   `-TextComment 0x1afcee01498 <col:18, col:56> Text=" Get type raw name generated by typeid."
|   |   |-ParagraphComment 0x1afcee01508 <line:78:11>
|   |   | `-TextComment 0x1afcee014e0 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcee01528 <col:12, col:30> Name="return"
|   |     `-ParagraphComment 0x1afcee01578 <col:19, col:30>
|   |       `-TextComment 0x1afcee01550 <col:19, col:30> Text=" const char*"
|   |-CXXMethodDecl 0x1afced80950 <line:87:9, col:27> col:13 used getTypeHash 'u64 () const'
|   | |-DLLExportAttr 0x1afced81488 <./src\Core/Defines.h:65:34> Inherited
|   | `-FullComment 0x1afcee017a8 <./src\Core/Reflection/ClassReflection.h:83:11, line:85:22>
|   |   |-ParagraphComment 0x1afcee01640 <line:83:11>
|   |   | `-TextComment 0x1afcee01618 <col:11> Text=" "
|   |   |-BlockCommandComment 0x1afcee01660 <col:12, col:42> Name="brief"
|   |   | `-ParagraphComment 0x1afcee016b0 <col:18, col:42>
|   |   |   `-TextComment 0x1afcee01688 <col:18, col:42> Text=" Get the Type hash value."
|   |   |-ParagraphComment 0x1afcee016f8 <line:85:11>
|   |   | `-TextComment 0x1afcee016d0 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcee01718 <col:12, col:22> Name="return"
|   |     `-ParagraphComment 0x1afcee01768 <col:19, col:22>
|   |       `-TextComment 0x1afcee01740 <col:19, col:22> Text=" u64"
|   |-CXXMethodDecl 0x1afced80a48 <line:94:9, col:35> col:21 used getTypeName 'const char *() const'
|   | |-DLLExportAttr 0x1afced814e0 <./src\Core/Defines.h:65:34> Inherited
|   | `-FullComment 0x1afcee01998 <./src\Core/Reflection/ClassReflection.h:90:11, line:92:30>
|   |   |-ParagraphComment 0x1afcee01830 <line:90:11>
|   |   | `-TextComment 0x1afcee01808 <col:11> Text=" "
|   |   |-BlockCommandComment 0x1afcee01850 <col:12, col:52> Name="brief"
|   |   | `-ParagraphComment 0x1afcee018a0 <col:18, col:52>
|   |   |   `-TextComment 0x1afcee01878 <col:18, col:52> Text=" Get type name generated by typeid."
|   |   |-ParagraphComment 0x1afcee018e8 <line:92:11>
|   |   | `-TextComment 0x1afcee018c0 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcee01908 <col:12, col:30> Name="return"
|   |     `-ParagraphComment 0x1afcee01958 <col:19, col:30>
|   |       `-TextComment 0x1afcee01930 <col:19, col:30> Text=" const char*"
|   |-CXXMethodDecl 0x1afced80c30 <line:102:9, col:51> col:26 used setName 'Michka::ClassReflection &(const char *)'
|   | |-ParmVarDecl 0x1afced80b30 <col:34, col:46> col:46 _name 'const char *'
|   | |-DLLExportAttr 0x1afced81538 <./src\Core/Defines.h:65:34> Inherited
|   | `-FullComment 0x1afcee01c28 <./src\Core/Reflection/ClassReflection.h:97:11, line:100:23>
|   |   |-ParagraphComment 0x1afcee01a20 <line:97:11>
|   |   | `-TextComment 0x1afcee019f8 <col:11> Text=" "
|   |   |-BlockCommandComment 0x1afcee01a40 <col:12, col:37> Name="brief"
|   |   | `-ParagraphComment 0x1afcee01a90 <col:18, col:37>
|   |   |   `-TextComment 0x1afcee01a68 <col:18, col:37> Text=" Set the class name."
|   |   |-ParagraphComment 0x1afcee01ad8 <line:99:11>
|   |   | `-TextComment 0x1afcee01ab0 <col:11> Text=" "
|   |   |-ParamCommandComment 0x1afcee01af8 <col:12, line:100:11> [in] implicitly Param="_name" ParamIndex=0
|   |   | `-ParagraphComment 0x1afcee01b70 <col:11>
|   |   |   `-TextComment 0x1afcee01b48 <col:11> Text=" "
|   |   `-BlockCommandComment 0x1afcee01b90 <col:12, col:23> Name="return"
|   |     `-ParagraphComment 0x1afcee01be0 <col:19, col:23>
|   |       `-TextComment 0x1afcee01bb8 <col:19, col:23> Text=" Self"
|   |-AccessSpecDecl 0x1afced80cd8 <line:104:5, col:14> col:5 protected
|   |-FieldDecl 0x1afced80d20 <line:105:9, col:29> col:21 mName 'const char *'
|   | `-ImplicitCastExpr 0x1afced81678 <col:29> 'const char *' <NullToPointer>
|   |   `-CXXNullPtrLiteralExpr 0x1afced81668 <col:29> 'nullptr_t'
|   |-FieldDecl 0x1afced80d90 <line:106:9, col:33> col:21 mTypeName 'const char *'
|   | `-ImplicitCastExpr 0x1afced816a0 <col:33> 'const char *' <NullToPointer>
|   |   `-CXXNullPtrLiteralExpr 0x1afced81690 <col:33> 'nullptr_t'
|   |-FieldDecl 0x1afced80e00 <line:107:9, col:32> col:21 mRawName 'const char *'
|   | `-ImplicitCastExpr 0x1afced816c8 <col:32> 'const char *' <NullToPointer>
|   |   `-CXXNullPtrLiteralExpr 0x1afced816b8 <col:32> 'nullptr_t'
|   |-FieldDecl 0x1afced80e68 <line:108:9, col:31> col:19 mTypeHash 'const u64':'const unsigned long long'
|   | `-ImplicitCastExpr 0x1afced81708 <col:31> 'const u64':'const unsigned long long' <IntegralCast>
|   |   `-IntegerLiteral 0x1afced816e0 <col:31> 'int' 0
|   |-FieldDecl 0x1afced80ed8 <line:109:9, col:33> col:21 mFileName 'const char *'
|   | `-ImplicitCastExpr 0x1afced81730 <col:33> 'const char *' <NullToPointer>
|   |   `-CXXNullPtrLiteralExpr 0x1afced81720 <col:33> 'nullptr_t'
|   |-CXXConstructorDecl 0x1afced80f60 <line:55:22> col:22 implicit constexpr ClassReflection 'void (const Michka::ClassReflection &)' inline default trivial noexcept-unevaluated 0x1afced80f60
|   | `-ParmVarDecl 0x1afced81090 <col:22> col:22 'const Michka::ClassReflection &'
|   `-CXXMethodDecl 0x1afced81100 <col:22> col:22 implicit operator= 'Michka::ClassReflection &(const Michka::ClassReflection &)' inline default_delete trivial noexcept-unevaluated 0x1afced81100
|     `-ParmVarDecl 0x1afced81260 <col:22> col:22 'const Michka::ClassReflection &'
|-NamespaceDecl 0x1afced81778 prev 0x1afced7fcb8 <./src\Core/Reflection/Reflection.h:34:1, line:37:1> line:34:11 Michka
| `-original Namespace 0x1afce07dc78 'Michka'
|-CXXRecordDecl 0x1afced81818 <./tests/Classes/ReflectionClasses.h:33:1, line:38:1> line:33:7 referenced class ParentClass1 definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x1afced81940 <col:1, col:7> col:7 implicit class ParentClass1
| |-AccessSpecDecl 0x1afced819d0 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced81a28 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced81a80 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced81b48 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced81e78 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced81e68 <line:275:9, <scratch space>:53:1>
| |     `-ImplicitCastExpr 0x1afced81e50 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced81e10 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced81c10 <line:56:1, ./src\Core/Helpers.h:277:62> <scratch space>:56:1 invalid __MICHKA_STRUCT_GENERATED_BODY_35 'int ()'
| |-AccessSpecDecl 0x1afced81cb0 <./tests/Classes/ReflectionClasses.h:36:1, col:7> col:1 public
| `-FieldDecl 0x1afced81cf8 <line:37:5, col:14> col:9 a1 'int'
|   `-IntegerLiteral 0x1afced81d68 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced81e90 <line:40:1, line:45:1> line:40:7 referenced class ParentClass2 definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x1afced81fb0 <col:1, col:7> col:7 implicit class ParentClass2
| |-AccessSpecDecl 0x1afced82040 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced82098 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced820f0 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced821b8 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced82468 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced82458 <line:275:9, <scratch space>:58:1>
| |     `-ImplicitCastExpr 0x1afced82440 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced82400 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced82280 <line:61:1, ./src\Core/Helpers.h:277:62> <scratch space>:61:1 invalid __MICHKA_STRUCT_GENERATED_BODY_42 'int ()'
| |-AccessSpecDecl 0x1afced82320 <./tests/Classes/ReflectionClasses.h:43:1, col:7> col:1 public
| `-FieldDecl 0x1afced82368 <line:44:5, col:14> col:9 a2 'int'
|   `-IntegerLiteral 0x1afced823d8 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced82480 <line:47:1, line:52:1> line:47:7 referenced class ParentClass3 definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x1afced825a0 <col:1, col:7> col:7 implicit class ParentClass3
| |-AccessSpecDecl 0x1afced82630 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced82688 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced826e0 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced827a8 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced82a58 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced82a48 <line:275:9, <scratch space>:63:1>
| |     `-ImplicitCastExpr 0x1afced82a30 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced829f0 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced82870 <line:66:1, ./src\Core/Helpers.h:277:62> <scratch space>:66:1 invalid __MICHKA_STRUCT_GENERATED_BODY_49 'int ()'
| |-AccessSpecDecl 0x1afced82910 <./tests/Classes/ReflectionClasses.h:50:1, col:7> col:1 public
| `-FieldDecl 0x1afced82958 <line:51:5, col:14> col:9 a3 'int'
|   `-IntegerLiteral 0x1afced829c8 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced82a70 <line:54:1, line:59:1> line:54:7 referenced class ParentClass4 definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x1afced82b90 <col:1, col:7> col:7 implicit class ParentClass4
| |-AccessSpecDecl 0x1afced82c20 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced82c78 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced82cd0 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced82d98 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced83048 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced83038 <line:275:9, <scratch space>:68:1>
| |     `-ImplicitCastExpr 0x1afced83020 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced82fe0 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced82e60 <line:71:1, ./src\Core/Helpers.h:277:62> <scratch space>:71:1 invalid __MICHKA_STRUCT_GENERATED_BODY_56 'int ()'
| |-AccessSpecDecl 0x1afced82f00 <./tests/Classes/ReflectionClasses.h:57:1, col:7> col:1 public
| `-FieldDecl 0x1afced82f48 <line:58:5, col:14> col:9 a4 'int'
|   `-IntegerLiteral 0x1afced82fb8 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced83060 <line:61:1, line:66:1> line:61:7 referenced class ParentClass5 definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x1afced83180 <col:1, col:7> col:7 implicit referenced class ParentClass5
| |-AccessSpecDecl 0x1afced731b0 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced73208 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced73260 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced73328 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced735d8 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced735c8 <line:275:9, <scratch space>:73:1>
| |     `-ImplicitCastExpr 0x1afced735b0 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced73570 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced733f0 <line:76:1, ./src\Core/Helpers.h:277:62> <scratch space>:76:1 invalid __MICHKA_STRUCT_GENERATED_BODY_63 'int ()'
| |-AccessSpecDecl 0x1afced73490 <./tests/Classes/ReflectionClasses.h:64:1, col:7> col:1 public
| `-FieldDecl 0x1afced734d8 <line:65:5, col:14> col:9 a5 'int'
|   `-IntegerLiteral 0x1afced73548 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced735f0 <line:68:1, line:73:1> line:68:7 referenced class ParentClass6 definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x1afced73710 <col:1, col:7> col:7 implicit class ParentClass6
| |-AccessSpecDecl 0x1afced737a0 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced737f8 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced73850 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced73918 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced73bc8 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced73bb8 <line:275:9, <scratch space>:78:1>
| |     `-ImplicitCastExpr 0x1afced73ba0 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced73b60 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced739e0 <line:81:1, ./src\Core/Helpers.h:277:62> <scratch space>:81:1 invalid __MICHKA_STRUCT_GENERATED_BODY_70 'int ()'
| |-AccessSpecDecl 0x1afced73a80 <./tests/Classes/ReflectionClasses.h:71:1, col:7> col:1 public
| `-FieldDecl 0x1afced73ac8 <line:72:5, col:14> col:9 a6 'int'
|   `-IntegerLiteral 0x1afced73b38 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced73be0 <line:75:1, line:80:1> line:75:7 referenced class ParentClass7 definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x1afced73d00 <col:1, col:7> col:7 implicit class ParentClass7
| |-AccessSpecDecl 0x1afced73d90 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced73de8 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced73e40 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced73f08 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced741b8 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced741a8 <line:275:9, <scratch space>:83:1>
| |     `-ImplicitCastExpr 0x1afced74190 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced74150 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced73fd0 <line:86:1, ./src\Core/Helpers.h:277:62> <scratch space>:86:1 invalid __MICHKA_STRUCT_GENERATED_BODY_77 'int ()'
| |-AccessSpecDecl 0x1afced74070 <./tests/Classes/ReflectionClasses.h:78:1, col:7> col:1 public
| `-FieldDecl 0x1afced740b8 <line:79:5, col:14> col:9 a7 'int'
|   `-IntegerLiteral 0x1afced74128 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced741d0 <line:82:1, line:87:1> line:82:7 referenced class ParentClass8 definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x1afced742f0 <col:1, col:7> col:7 implicit class ParentClass8
| |-AccessSpecDecl 0x1afced74380 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced743d8 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced74430 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced744f8 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced747a8 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced74798 <line:275:9, <scratch space>:88:1>
| |     `-ImplicitCastExpr 0x1afced74780 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced74740 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced745c0 <line:91:1, ./src\Core/Helpers.h:277:62> <scratch space>:91:1 invalid __MICHKA_STRUCT_GENERATED_BODY_84 'int ()'
| |-AccessSpecDecl 0x1afced74660 <./tests/Classes/ReflectionClasses.h:85:1, col:7> col:1 public
| `-FieldDecl 0x1afced746a8 <line:86:5, col:14> col:9 a8 'int'
|   `-IntegerLiteral 0x1afced74718 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced747c0 <line:89:1, line:94:1> line:89:7 referenced class ParentClass9 definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x1afced748e0 <col:1, col:7> col:7 implicit class ParentClass9
| |-AccessSpecDecl 0x1afced74970 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced749c8 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced74a20 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced74ae8 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced74d98 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced74d88 <line:275:9, <scratch space>:93:1>
| |     `-ImplicitCastExpr 0x1afced74d70 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced74d30 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced74bb0 <line:96:1, ./src\Core/Helpers.h:277:62> <scratch space>:96:1 invalid __MICHKA_STRUCT_GENERATED_BODY_91 'int ()'
| |-AccessSpecDecl 0x1afced74c50 <./tests/Classes/ReflectionClasses.h:92:1, col:7> col:1 public
| `-FieldDecl 0x1afced74c98 <line:93:5, col:14> col:9 a9 'int'
|   `-IntegerLiteral 0x1afced74d08 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced74db0 <line:96:1, line:101:1> line:96:7 referenced class ParentClass10 definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x1afced74ed0 <col:1, col:7> col:7 implicit class ParentClass10
| |-AccessSpecDecl 0x1afced74f60 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced74fb8 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced75010 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced750d8 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced8d468 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced8d458 <line:275:9, <scratch space>:98:1>
| |     `-ImplicitCastExpr 0x1afced8d440 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced8d400 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced8d280 <line:101:1, ./src\Core/Helpers.h:277:62> <scratch space>:101:1 invalid __MICHKA_STRUCT_GENERATED_BODY_98 'int ()'
| |-AccessSpecDecl 0x1afced8d320 <./tests/Classes/ReflectionClasses.h:99:1, col:7> col:1 public
| `-FieldDecl 0x1afced8d368 <line:100:5, col:15> col:9 a10 'int'
|   `-IntegerLiteral 0x1afced8d3d8 <col:15> 'int' 0
|-CXXRecordDecl 0x1afced8d480 <line:103:1, line:108:1> line:103:7 class ChildClass0 definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x1afced8d5a0 <col:1, col:7> col:7 implicit class ChildClass0
| |-AccessSpecDecl 0x1afced8d630 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced8d688 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced8d6e0 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced8d7a8 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced8da30 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced8da20 <line:275:9, <scratch space>:103:1>
| |     `-ImplicitCastExpr 0x1afced8da08 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced8d9c8 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced8d870 <line:106:1, ./src\Core/Helpers.h:277:62> <scratch space>:106:1 invalid __MICHKA_STRUCT_GENERATED_BODY_105 'int ()'
| |-AccessSpecDecl 0x1afced8d910 <./tests/Classes/ReflectionClasses.h:106:1, col:7> col:1 public
| `-FieldDecl 0x1afced8d958 <line:107:5, col:9> col:9 b0 'int'
|-CXXRecordDecl 0x1afced8da48 <line:110:1, line:115:1> line:110:7 class ChildClass1 definition
| |-DefinitionData pass_in_registers aggregate trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-public 'ParentClass1'
| |-CXXRecordDecl 0x1afced8dbb0 <col:1, col:7> col:7 implicit class ChildClass1
| |-AccessSpecDecl 0x1afced8dc40 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced8dc98 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced8dcf0 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced8ddb8 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced8e068 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced8e058 <line:275:9, <scratch space>:108:1>
| |     `-ImplicitCastExpr 0x1afced8e040 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced8e000 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced8de80 <line:111:1, ./src\Core/Helpers.h:277:62> <scratch space>:111:1 invalid __MICHKA_STRUCT_GENERATED_BODY_112 'int ()'
| |-AccessSpecDecl 0x1afced8df20 <./tests/Classes/ReflectionClasses.h:113:1, col:7> col:1 public
| `-FieldDecl 0x1afced8df68 <line:114:5, col:14> col:9 b1 'int'
|   `-IntegerLiteral 0x1afced8dfd8 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced8e080 <line:117:1, line:122:1> line:117:7 class ChildClass2 definition
| |-DefinitionData pass_in_registers aggregate trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-public 'ParentClass1'
| |-public 'ParentClass2'
| |-CXXRecordDecl 0x1afced8e220 <col:1, col:7> col:7 implicit class ChildClass2
| |-AccessSpecDecl 0x1afced8e2b0 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced8e308 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced8e360 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced8e428 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced8e6d8 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced8e6c8 <line:275:9, <scratch space>:113:1>
| |     `-ImplicitCastExpr 0x1afced8e6b0 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced8e670 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced8e4f0 <line:116:1, ./src\Core/Helpers.h:277:62> <scratch space>:116:1 invalid __MICHKA_STRUCT_GENERATED_BODY_119 'int ()'
| |-AccessSpecDecl 0x1afced8e590 <./tests/Classes/ReflectionClasses.h:120:1, col:7> col:1 public
| `-FieldDecl 0x1afced8e5d8 <line:121:5, col:14> col:9 b2 'int'
|   `-IntegerLiteral 0x1afced8e648 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced8e6f0 <line:124:1, line:129:1> line:124:7 class ChildClass3 definition
| |-DefinitionData pass_in_registers aggregate trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-public 'ParentClass1'
| |-public 'ParentClass2'
| |-public 'ParentClass3'
| |-CXXRecordDecl 0x1afced8e8d0 <col:1, col:7> col:7 implicit class ChildClass3
| |-AccessSpecDecl 0x1afced8e960 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced8e9b8 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced8ea10 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced8ead8 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced8ed88 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced8ed78 <line:275:9, <scratch space>:118:1>
| |     `-ImplicitCastExpr 0x1afced8ed60 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced8ed20 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced8eba0 <line:121:1, ./src\Core/Helpers.h:277:62> <scratch space>:121:1 invalid __MICHKA_STRUCT_GENERATED_BODY_126 'int ()'
| |-AccessSpecDecl 0x1afced8ec40 <./tests/Classes/ReflectionClasses.h:127:1, col:7> col:1 public
| `-FieldDecl 0x1afced8ec88 <line:128:5, col:14> col:9 b3 'int'
|   `-IntegerLiteral 0x1afced8ecf8 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced8eda0 <line:131:1, line:136:1> line:131:7 class ChildClass4 definition
| |-DefinitionData pass_in_registers aggregate trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-public 'ParentClass1'
| |-public 'ParentClass2'
| |-public 'ParentClass3'
| |-public 'ParentClass4'
| |-CXXRecordDecl 0x1afced8efc0 <col:1, col:7> col:7 implicit class ChildClass4
| |-AccessSpecDecl 0x1afced8f050 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced8f0a8 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced8f100 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced8f1c8 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced85450 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced85440 <line:275:9, <scratch space>:123:1>
| |     `-ImplicitCastExpr 0x1afced85428 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced853e8 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced85268 <line:126:1, ./src\Core/Helpers.h:277:62> <scratch space>:126:1 invalid __MICHKA_STRUCT_GENERATED_BODY_133 'int ()'
| |-AccessSpecDecl 0x1afced85308 <./tests/Classes/ReflectionClasses.h:134:1, col:7> col:1 public
| `-FieldDecl 0x1afced85350 <line:135:5, col:14> col:9 b4 'int'
|   `-IntegerLiteral 0x1afced853c0 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced85468 <line:138:1, line:143:1> line:138:7 class ChildClass5 definition
| |-DefinitionData pass_in_registers aggregate trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-public 'ParentClass1'
| |-public 'ParentClass2'
| |-public 'ParentClass3'
| |-public 'ParentClass4'
| |-public 'ParentClass5'
| |-CXXRecordDecl 0x1afced856d0 <col:1, col:7> col:7 implicit class ChildClass5
| |-AccessSpecDecl 0x1afced85760 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced857b8 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced85810 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced858d8 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced85b88 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced85b78 <line:275:9, <scratch space>:128:1>
| |     `-ImplicitCastExpr 0x1afced85b60 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced85b20 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced859a0 <line:131:1, ./src\Core/Helpers.h:277:62> <scratch space>:131:1 invalid __MICHKA_STRUCT_GENERATED_BODY_140 'int ()'
| |-AccessSpecDecl 0x1afced85a40 <./tests/Classes/ReflectionClasses.h:141:1, col:7> col:1 public
| `-FieldDecl 0x1afced85a88 <line:142:5, col:14> col:9 b5 'int'
|   `-IntegerLiteral 0x1afced85af8 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced85ba0 <line:145:1, line:150:1> line:145:7 class ChildClass6 definition
| |-DefinitionData pass_in_registers aggregate trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-public 'ParentClass1'
| |-public 'ParentClass2'
| |-public 'ParentClass3'
| |-public 'ParentClass4'
| |-public 'ParentClass5'
| |-public 'ParentClass6'
| |-CXXRecordDecl 0x1afced85e40 <col:1, col:7> col:7 implicit class ChildClass6
| |-AccessSpecDecl 0x1afced85ed0 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced85f28 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced85f80 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced86048 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced862f8 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced862e8 <line:275:9, <scratch space>:133:1>
| |     `-ImplicitCastExpr 0x1afced862d0 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced86290 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced86110 <line:136:1, ./src\Core/Helpers.h:277:62> <scratch space>:136:1 invalid __MICHKA_STRUCT_GENERATED_BODY_147 'int ()'
| |-AccessSpecDecl 0x1afced861b0 <./tests/Classes/ReflectionClasses.h:148:1, col:7> col:1 public
| `-FieldDecl 0x1afced861f8 <line:149:5, col:14> col:9 b6 'int'
|   `-IntegerLiteral 0x1afced86268 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced86310 <line:152:1, line:157:1> line:152:7 class ChildClass7 definition
| |-DefinitionData pass_in_registers aggregate trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-public 'ParentClass1'
| |-public 'ParentClass2'
| |-public 'ParentClass3'
| |-public 'ParentClass4'
| |-public 'ParentClass5'
| |-public 'ParentClass6'
| |-public 'ParentClass7'
| |-CXXRecordDecl 0x1afced865f0 <col:1, col:7> col:7 implicit class ChildClass7
| |-AccessSpecDecl 0x1afced86680 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced866d8 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced86730 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced867f8 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced86aa8 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced86a98 <line:275:9, <scratch space>:138:1>
| |     `-ImplicitCastExpr 0x1afced86a80 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced86a40 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced868c0 <line:141:1, ./src\Core/Helpers.h:277:62> <scratch space>:141:1 invalid __MICHKA_STRUCT_GENERATED_BODY_154 'int ()'
| |-AccessSpecDecl 0x1afced86960 <./tests/Classes/ReflectionClasses.h:155:1, col:7> col:1 public
| `-FieldDecl 0x1afced869a8 <line:156:5, col:14> col:9 b7 'int'
|   `-IntegerLiteral 0x1afced86a18 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced86ac0 <line:159:1, line:164:1> line:159:7 class ChildClass8 definition
| |-DefinitionData pass_in_registers aggregate trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-public 'ParentClass1'
| |-public 'ParentClass2'
| |-public 'ParentClass3'
| |-public 'ParentClass4'
| |-public 'ParentClass5'
| |-public 'ParentClass6'
| |-public 'ParentClass7'
| |-public 'ParentClass8'
| |-CXXRecordDecl 0x1afced86de0 <col:1, col:7> col:7 implicit class ChildClass8
| |-AccessSpecDecl 0x1afced86e70 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced86ec8 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced86f20 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced86fe8 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced872b8 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced872a8 <line:275:9, <scratch space>:143:1>
| |     `-ImplicitCastExpr 0x1afced87290 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced87250 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced870b0 <line:146:1, ./src\Core/Helpers.h:277:62> <scratch space>:146:1 invalid __MICHKA_STRUCT_GENERATED_BODY_161 'int ()'
| |-AccessSpecDecl 0x1afced87150 <./tests/Classes/ReflectionClasses.h:162:1, col:7> col:1 public
| `-FieldDecl 0x1afced87198 <line:163:5, col:14> col:9 b8 'int'
|   `-IntegerLiteral 0x1afced87208 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced872d0 <line:166:1, line:171:1> line:166:7 class ChildClass9 definition
| |-DefinitionData pass_in_registers aggregate trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-public 'ParentClass1'
| |-public 'ParentClass2'
| |-public 'ParentClass3'
| |-public 'ParentClass4'
| |-public 'ParentClass5'
| |-public 'ParentClass6'
| |-public 'ParentClass7'
| |-public 'ParentClass8'
| |-public 'ParentClass9'
| |-CXXRecordDecl 0x1afced87630 <col:1, col:7> col:7 implicit class ChildClass9
| |-AccessSpecDecl 0x1afced876c0 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced87718 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced87770 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced87838 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced87ae8 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced87ad8 <line:275:9, <scratch space>:148:1>
| |     `-ImplicitCastExpr 0x1afced87ac0 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced87a80 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced87900 <line:151:1, ./src\Core/Helpers.h:277:62> <scratch space>:151:1 invalid __MICHKA_STRUCT_GENERATED_BODY_168 'int ()'
| |-AccessSpecDecl 0x1afced879a0 <./tests/Classes/ReflectionClasses.h:169:1, col:7> col:1 public
| `-FieldDecl 0x1afced879e8 <line:170:5, col:14> col:9 b9 'int'
|   `-IntegerLiteral 0x1afced87a58 <col:14> 'int' 0
|-CXXRecordDecl 0x1afced87b00 <line:173:1, line:178:1> line:173:7 referenced class ChildClass10 definition
| |-DefinitionData pass_in_registers aggregate trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-public 'ParentClass1'
| |-public 'ParentClass2'
| |-public 'ParentClass3'
| |-public 'ParentClass4'
| |-public 'ParentClass5'
| |-public 'ParentClass6'
| |-public 'ParentClass7'
| |-public 'ParentClass8'
| |-public 'ParentClass9'
| |-public 'ParentClass10'
| |-CXXRecordDecl 0x1afced87ea0 <col:1, col:7> col:7 implicit class ChildClass10
| |-AccessSpecDecl 0x1afced87f30 <./src\Core/Helpers.h:304:5, col:11> col:5 public
| |-TypedefDecl 0x1afced87f88 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
| | |-BuiltinType 0x1afcc6e38c0 'bool'
| | `-AnnotateAttr 0x1afced87fe0 <line:271:39, col:60> ""
| |-CXXMethodDecl 0x1afced880a8 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
| | `-CompoundStmt 0x1afced88358 <line:274:5, line:276:5>
| |   `-ReturnStmt 0x1afced88348 <line:275:9, <scratch space>:153:1>
| |     `-ImplicitCastExpr 0x1afced88330 <col:1> 'const char *' <ArrayToPointerDecay>
| |       `-StringLiteral 0x1afced882f0 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
| |-CXXMethodDecl 0x1afced88170 <line:156:1, ./src\Core/Helpers.h:277:62> <scratch space>:156:1 invalid __MICHKA_STRUCT_GENERATED_BODY_175 'int ()'
| |-AccessSpecDecl 0x1afced88210 <./tests/Classes/ReflectionClasses.h:176:1, col:7> col:1 public
| `-FieldDecl 0x1afced88258 <line:177:5, col:15> col:9 b10 'int'
|   `-IntegerLiteral 0x1afced882c8 <col:15> 'int' 0
`-CXXRecordDecl 0x1afced88370 <line:180:1, line:194:1> line:180:7 class ChildClass10Nested definition
  |-DefinitionData pass_in_registers aggregate trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
  | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
  | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
  | |-MoveConstructor exists simple trivial needs_implicit
  | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
  | |-MoveAssignment exists simple trivial needs_implicit
  | `-Destructor simple irrelevant trivial needs_implicit
  |-public 'ChildClass10'
  |-CXXRecordDecl 0x1afced884d0 <col:1, col:7> col:7 implicit class ChildClass10Nested
  |-AccessSpecDecl 0x1afced88560 <./src\Core/Helpers.h:304:5, col:11> col:5 public
  |-TypedefDecl 0x1afced885d0 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
  | |-BuiltinType 0x1afcc6e38c0 'bool'
  | `-AnnotateAttr 0x1afced88628 <line:271:39, col:60> ""Hello", "Hello 2""
  |-CXXMethodDecl 0x1afced88708 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
  | `-CompoundStmt 0x1afced89018 <line:274:5, line:276:5>
  |   `-ReturnStmt 0x1afced89008 <line:275:9, <scratch space>:158:1>
  |     `-ImplicitCastExpr 0x1afced88ff0 <col:1> 'const char *' <ArrayToPointerDecay>
  |       `-StringLiteral 0x1afced88fb0 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
  |-CXXMethodDecl 0x1afced887d0 <line:161:1, ./src\Core/Helpers.h:277:62> <scratch space>:161:1 invalid __MICHKA_STRUCT_GENERATED_BODY_182 'int ()'
  |-AccessSpecDecl 0x1afced88870 <./tests/Classes/ReflectionClasses.h:184:1, col:7> col:1 public
  |-CXXRecordDecl 0x1afced888a0 <line:185:5, line:190:5> line:185:11 class Child definition
  | |-DefinitionData pass_in_registers aggregate trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
  | | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
  | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
  | | |-MoveConstructor exists simple trivial needs_implicit
  | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
  | | |-MoveAssignment exists simple trivial needs_implicit
  | | `-Destructor simple irrelevant trivial needs_implicit
  | |-public 'ParentClass5'
  | |-CXXRecordDecl 0x1afced88a00 <col:5, col:11> col:11 implicit class Child
  | |-AccessSpecDecl 0x1afced88a90 <./src\Core/Helpers.h:304:5, col:11> col:5 public
  | |-TypedefDecl 0x1afced88ae8 <line:271:24, line:272:37> col:37 MichkaReflectionEnabled 'bool'
  | | |-BuiltinType 0x1afcc6e38c0 'bool'
  | | `-AnnotateAttr 0x1afced88b40 <line:271:39, col:60> ""
  | |-CXXMethodDecl 0x1afced88c08 <line:273:5, line:276:5> line:273:31 classFileName 'const char *()' static inline
  | | `-CompoundStmt 0x1afced89098 <line:274:5, line:276:5>
  | |   `-ReturnStmt 0x1afced89088 <line:275:9, <scratch space>:163:1>
  | |     `-ImplicitCastExpr 0x1afced89070 <col:1> 'const char *' <ArrayToPointerDecay>
  | |       `-StringLiteral 0x1afced89030 <col:1> 'const char [36]' lvalue "./tests/Classes/ReflectionClasses.h"
  | |-CXXMethodDecl 0x1afced88cd0 <line:166:1, ./src\Core/Helpers.h:277:62> <scratch space>:166:1 invalid __MICHKA_STRUCT_GENERATED_BODY_187 'int ()'
  | |-AccessSpecDecl 0x1afced88d70 <./tests/Classes/ReflectionClasses.h:188:5, col:11> col:5 public
  | `-FieldDecl 0x1afced88db8 <line:189:9, col:25> col:13 childTest 'int'
  |   `-IntegerLiteral 0x1afced88f60 <col:25> 'int' 0
  `-FieldDecl 0x1afced88e70 <line:192:5, line:193:16> col:9 b100 'int'
    |-IntegerLiteral 0x1afced88f88 <col:16> 'int' 0
    `-AnnotateAttr 0x1afced88ec8 <line:192:20, col:49> "Just a sample test"
