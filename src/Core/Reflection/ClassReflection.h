// ------------------------------------------------------------------------------- //
//                                     Michka                                      //
// ------------------------------------------------------------------------------- //
//                                  MIT License                                    //
//                                                                                 //
// Copyright (c) 2020-2021 amir alizadeh.                                          //
//                                                                                 //
// Permission is hereby granted, free of charge, to any person obtaining a copy    //
// of this software and associated documentation files (the "Software"), to deal   //
// in the Software without restriction, including without limitation the rights    //
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell       //
// copies of the Software, and to permit persons to whom the Software is           //
// furnished to do so, subject to the following conditions:                        //
//                                                                                 //
// The above copyright notice and this permission notice shall be included in all  //
// copies or substantial portions of the Software.                                 //
//                                                                                 //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR      //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,        //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE     //
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER          //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,   //
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE   //
// SOFTWARE.                                                                       //
// ------------------------------------------------------------------------------- //

#ifndef __REFLECTION_CLASS_H__
#define __REFLECTION_CLASS_H__

#include "Core/Helpers.h"
#include "MetaAttributes.h"
#include <type_traits>

/**
 * @brief Set struct reflection name of a type. This mostly using for custom name for specific template types.
 * @param _TYPE  type
 * @param _NAME  name
 */
#define MICHKA_SET_STRUCT_NAME(_TYPE, _NAME) \
    void michkaCallOnStart() \
    { \
        _TYPE::classReflection().setName(_NAME); \
    }

/**
 * @brief Set class reflection name of a type. This mostly using for custom name for specific template types.
 * @param _TYPE  type
 * @param _NAME  name
 */
#define MICHKA_SET_CLASS_NAME(_TYPE, _NAME) \
    MICHKA_SET_STRUCT_NAME(_TYPE, _NAME)

namespace Michka
{
    class MICHKA_API ClassReflection
    {
    public:
        ClassReflection(const char* _name, const char* _rawname, const char* _typename, const u64& _typehash, const char* _filename);
        ~ClassReflection();

        /**
         * @brief Get source filename of class.
         *
         * @return const char*
         */
        const char* getFileName() const;

        /**
         * @brief Get class name.
         *
         * @return const char*
         */
        const char* getName() const;

        /**
         * @brief Get type raw name generated by typeid.
         *
         * @return const char*
         */
        const char* getRawName() const;

        /**
         * @brief Get the Type hash value.
         *
         * @return u64
         */
        u64 getTypeHash() const;

        /**
         * @brief Get type name generated by typeid.
         *
         * @return const char*
         */
        const char* getTypeName() const;

        /**
         * @brief Set the class name.
         *
         * @param _name
         * @return Self
         */
        ClassReflection& setName(const char* _name);

    protected:
        const char* mName = nullptr;
        const char* mTypeName = nullptr;
        const char* mRawName = nullptr;
        const u64 mTypeHash = 0;
        const char* mFileName = nullptr;
    };
}

#endif // __REFLECTION_CLASS_H__
