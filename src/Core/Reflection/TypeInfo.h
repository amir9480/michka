// ------------------------------------------------------------------------------- //
//                                     Michka                                      //
// ------------------------------------------------------------------------------- //
//                                  MIT License                                    //
//                                                                                 //
// Copyright (c) 2020-2021 amir alizadeh.                                          //
//                                                                                 //
// Permission is hereby granted, free of charge, to any person obtaining a copy    //
// of this software and associated documentation files (the "Software"), to deal   //
// in the Software without restriction, including without limitation the rights    //
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell       //
// copies of the Software, and to permit persons to whom the Software is           //
// furnished to do so, subject to the following conditions:                        //
//                                                                                 //
// The above copyright notice and this permission notice shall be included in all  //
// copies or substantial portions of the Software.                                 //
//                                                                                 //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR      //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,        //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE     //
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER          //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,   //
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE   //
// SOFTWARE.                                                                       //
// ------------------------------------------------------------------------------- //

#ifndef __TYPE_INFO_H__
#define __TYPE_INFO_H__

#include "Core/Helpers.h"
#include "Core/Container/List.h"
#include "Core/Container/String.h"
#include "MetaAttributes.h"
#include "Property.h"
#include <type_traits>

/**
 * @brief Set reflection name of a type. This mostly using for custom name for specific template types.
 *
 * @param _TYPE  type
 * @param _NAME  name
 */
#define MICHKA_SET_TYPE_NAME(_TYPE, _NAME) \
    void michkaCallOnStart() \
    { \
        _TYPE::classReflection<Michka::TypeInfo>().setName(_NAME); \
    }


namespace Michka
{
    class MICHKA_API TypeInfo : public MetaAttributes
    {
    public:
        ~TypeInfo();

        /**
         * @brief Add property to type info.
         * @warning Do NOT call this function.
         *
         * @param _property
         */
        // void addProperty(const Property& _property);

        /**
         * @brief Get source filename of class.
         *
         * @return String
         */
        String getFileName() const;

        /**
         * @brief Get class name.
         *
         * @return String
         */
        String getName() const;

        /**
         * @brief Get type raw name generated by typeid.
         *
         * @return String
         */
        String getRawName() const;

        /**
         * @brief Get the Type hash value.
         *
         * @return u64
         */
        u64 getTypeHash() const;

        /**
         * @brief Get type name generated by typeid.
         *
         * @return String
         */
        String getTypeName() const;

        /**
         * @brief Set the class name.
         *
         * @param _name
         * @return Self
         */
        TypeInfo& setName(const String& _name);

    protected:
        TypeInfo(const String& _name, const String& _rawname, const String& _typename, const u64& _typehash, const String& _filename);

    protected:
        static List<TypeInfo*> types;

    protected:
        const u64 mTypeHash = 0;
        String mName;
        String mTypeName;
        String mRawName;
        String mFileName;
        Vector<Property> mProperties;
    };
}

#include "TypeInfo.inl"

#endif // __TYPE_INFO_H__
